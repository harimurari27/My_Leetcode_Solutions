2025-08-25 23:26:40,164 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, folder='.', problem_folder_name='${question_id}-${title_slug}', no_problem_statement=True, problem_statement_filename='${question_id}-${title_slug}.md', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', only_accepted=True, only_last_submission=True, language_unprocessed=None, verbose=False, extra_verbose=False, language=None)
2025-08-25 23:26:40,164 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-08-25 23:27:35,585 [DEBUG] connectionpool.py:1051 - Starting new HTTPS connection (1): leetcode.com:443
2025-08-25 23:27:36,815 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/11" 200 None
2025-08-25 23:27:36,817 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1748063961,"question_id":1586,"lang":"java","lang_name":"Java","time":"16Â minutes","timestamp":1756143669,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1748063961/","is_pending":"Not Pending","title":"Longest Subarray of 1's After Deleting One Element","memory":"56.8 MB","code":"class Solution {\n    public int longestSubarray(int[] nums) \n    {\n        int l=0,a=0,z=0;\n        for(int r=0;r<nums.length;r++)\n        {\n            if(nums[r]==0)\n            z++;\n            while(z>1)\n            {\n                if(nums[l]==0)\n                z--;\n                l++;\n            }\n            a=Math.max(a,r-l);\n        }\n        return a;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element","has_notes":false,"flag_type":1,"frontend_id":650}],"has_next":true,"last_key":""}
2025-08-25 23:27:37,818 [DEBUG] leetcode.py:112 - User is logged in
2025-08-25 23:27:37,818 [INFO] leetcode.py:95 - Cookie set successful
2025-08-25 23:27:37,818 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-08-25 23:27:38,670 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/11" 200 None
2025-08-25 23:27:38,672 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1748063961,"question_id":1586,"lang":"java","lang_name":"Java","time":"16\xc2\xa0minutes","timestamp":1756143669,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1748063961/","is_pending":"Not Pending","title":"Longest Subarray of 1\'s After Deleting One Element","memory":"56.8 MB","code":"class Solution {\\n    public int longestSubarray(int[] nums) \\n    {\\n        int l=0,a=0,z=0;\\n        for(int r=0;r<nums.length;r++)\\n        {\\n            if(nums[r]==0)\\n            z++;\\n            while(z>1)\\n            {\\n                if(nums[l]==0)\\n                z--;\\n                l++;\\n            }\\n            a=Math.max(a,r-l);\\n        }\\n        return a;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element","has_notes":false,"flag_type":1,"frontend_id":650},{"id":1745956829,"question_id":1586,"lang":"java","lang_name":"Java","time":"1\xc2\xa0day, 16\xc2\xa0hours","timestamp":1755997799,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1745956829/","is_pending":"Not Pending","title":"Longest Subarray of 1\'s After Deleting One Element","memory":"57.3 MB","code":"class Solution {\\n    public int longestSubarray(int[] nums) \\n    {\\n        int l=0,a=0,z=0;\\n        for(int r=0;r<nums.length;r++)\\n        {\\n            if(nums[r]==0)\\n            z++;\\n            while(z>1)\\n            {\\n                if(nums[l]==0)\\n                z--;\\n                l++;\\n            }\\n            a=Math.max(a,r-l);\\n        }\\n        return a;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-of-1s-after-deleting-one-element","has_notes":false,"flag_type":1,"frontend_id":649},{"id":1745032943,"question_id":560,"lang":"java","lang_name":"Java","time":"2\xc2\xa0days, 12\xc2\xa0hours","timestamp":1755928393,"status":10,"status_display":"Accepted","runtime":"1076 ms","url":"/submissions/detail/1745032943/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"46.6 MB","code":"class Solution \\n{\\n    public int subarraySum(int[] nums, int k) \\n    {\\n       // int s=0;\\n        int ml=0;\\n        int n=nums.length;\\n        for(int i=0;i<n;i++)\\n        {\\n             int s=0;\\n             for(int j=i;j<n;j++)\\n             {\\n                s+=nums[j];\\n                if(s==k)\\n                ml++;\\n                //ml=Math.max(ml,j-i+1);\\n             }\\n        }\\n        return ml;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":648},{"id":1745030113,"question_id":560,"lang":"java","lang_name":"Java","time":"2\xc2\xa0days, 12\xc2\xa0hours","timestamp":1755928200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1745030113/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution \\n{\\n    public int subarraySum(int[] nums, int k) \\n    {\\n       // int s=0;\\n        int ml=0;\\n        int n=nums.length;\\n        for(int i=0;i<n;i++)\\n        {\\n             int s=0;\\n             for(int j=i;j<n;j++)\\n             {\\n                s+=nums[j];\\n                if(s==k)\\n                ml=Math.max(ml,j-i+1);\\n             }\\n        }\\n        return ml;\\n    }\\n}","compare_result":"110110111011010001000000000000000000000000000000000000000001100000000000000000000000000000100","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":647},{"id":1745024682,"question_id":3459,"lang":"java","lang_name":"Java","time":"2\xc2\xa0days, 12\xc2\xa0hours","timestamp":1755927812,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1745024682/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones II","memory":"45.1 MB","code":"class Solution {\\n    public int grid[][];\\n    public int minAreaOfOneRectangle(int rowb,int rowe,int colb,int cole){\\n        int minRow=Integer.MAX_VALUE;\\n        int minCol=Integer.MAX_VALUE;\\n        int maxRow=0;\\n        int maxCol=0;\\n        for(int i=rowb;i<rowe;i++){\\n            for(int j=colb;j<cole;j++){\\n                if(grid[i][j]==1){\\n                    minRow=Math.min(minRow,i);\\n                    minCol=Math.min(minCol,j);\\n                    maxRow=Math.max(maxRow,i);\\n                    maxCol=Math.max(maxCol,j);\\n                }\\n            }\\n        }\\n        return (maxRow-minRow+1)*(maxCol-minCol+1);\\n    }\\n\\n    public int minAreaOfTwoRectangles(int rowb,int rowe,int colb,int cole){\\n        int ans=Integer.MAX_VALUE;\\n\\n        for(int i=rowb;i<rowe;i++){\\n            int top=minAreaOfOneRectangle(rowb,i,colb,cole);\\n            int down=minAreaOfOneRectangle(i,rowe,colb,cole);\\n            ans=Math.min(top+down,ans);\\n        }\\n\\n        for(int j=colb;j<cole;j++){\\n            int left=minAreaOfOneRectangle(rowb,rowe,colb,j);\\n            int right=minAreaOfOneRectangle(rowb,rowe,j,cole);\\n            ans=Math.min(left+right,ans);\\n        }\\n        \\n        return ans;\\n    }\\n\\n    public int minimumSum(int[][] grid) {\\n        this.grid=grid;\\n        int ans=Integer.MAX_VALUE;\\n        int m=grid.length;\\n        int n=grid[0].length;\\n        for(int i=0;i<m;i++){\\n            int top=minAreaOfTwoRectangles(0,i,0,n);\\n            int down=minAreaOfOneRectangle(i,m,0,n);\\n            ans=Math.min(top+down,ans);\\n        }\\n\\n        for(int i=0;i<m;i++){\\n            int top=minAreaOfOneRectangle(0,i,0,n);\\n            int down=minAreaOfTwoRectangles(i,m,0,n);\\n            ans=Math.min(top+down,ans);\\n        }\\n\\n        for(int j=0;j<n;j++){\\n            int left=minAreaOfTwoRectangles(0,m,0,j);\\n            int right=minAreaOfOneRectangle(0,m,j,n);\\n            ans=Math.min(left+right,ans);\\n        }\\n\\n        for(int j=0;j<n;j++){\\n            int left=minAreaOfOneRectangle(0,m,0,j);\\n            int right=minAreaOfTwoRectangles(0,m,j,n);\\n            ans=Math.min(left+right,ans);\\n        }\\n\\n        return ans;\\n    }\\n}","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-ii","has_notes":false,"flag_type":1,"frontend_id":646},{"id":1744468551,"question_id":3461,"lang":"java","lang_name":"Java","time":"3\xc2\xa0days, 2\xc2\xa0hours","timestamp":1755875788,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1744468551/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"196.7 MB","code":"class Solution {\\n    public int minimumArea(int[][] grid) {\\n        int m=grid.length;\\n        int n=grid[0].length;\\n        int minr=m,maxr=0;\\n        int minc=n,maxc=0;\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                if(grid[i][j]==1)\\n                {\\n                    minr=Math.min(minr,i);\\n                    maxr=Math.max(maxr,i);\\n                    minc=Math.min(minc,j);\\n                    maxc=Math.max(maxc,j);\\n                }\\n            }\\n        }\\n        return (maxr-minr+1)*(maxc-minc+1);\\n    }\\n}","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":645},{"id":1743579626,"question_id":1628,"lang":"java","lang_name":"Java","time":"3\xc2\xa0days, 23\xc2\xa0hours","timestamp":1755801040,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1743579626/","is_pending":"Not Pending","title":"Count Submatrices With All Ones","memory":"45.2 MB","code":"class Solution {\\n    public int numSubmat(int[][] a) {\\n        int n = a.length, m = a[0].length;\\n        int[][] h = new int[n][m];\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                if (a[i][j] == 0) h[i][j] = 0;\\n                else h[i][j] = (i == 0 ? 1 : h[i-1][j] + 1);\\n            }\\n        }\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                int mn = Integer.MAX_VALUE;\\n                for (int k = j; k >= 0; k--) {\\n                    if (h[i][k] == 0) break;\\n                    mn = Math.min(mn, h[i][k]);\\n                    ans += mn;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-submatrices-with-all-ones","has_notes":false,"flag_type":1,"frontend_id":644},{"id":1741998624,"question_id":1402,"lang":"java","lang_name":"Java","time":"5\xc2\xa0days, 5\xc2\xa0hours","timestamp":1755691379,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1741998624/","is_pending":"Not Pending","title":"Count Square Submatrices with All Ones","memory":"56.8 MB","code":"class Solution \\n{\\n    public int countSquares(int[][] matrix) \\n    {\\n        int m=matrix.length;\\n        int n=matrix[0].length;\\n        int t=0;\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                int ms=Math.min(m-i,n-j);\\n                for(int s=1;s<=ms;s++)\\n                {\\n                    if(iv(matrix,i,j,s))\\n                    t++;\\n                    else\\n                    break;\\n                }\\n            }\\n        }\\n        return t;\\n    }\\n    private boolean iv(int matrix[][],int r,int c,int s)\\n    {\\n        for(int i=r;i<r+s;i++)\\n        {\\n            for(int j=c;j<c+s;j++)\\n            {\\n                if(matrix[i][j]==0)\\n                 return false;\\n            }\\n        }\\n        return true;\\n    }\\n}","compare_result":"11111111111111111111111111111111","title_slug":"count-square-submatrices-with-all-ones","has_notes":false,"flag_type":1,"frontend_id":643},{"id":1740917152,"question_id":2432,"lang":"java","lang_name":"Java","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1755612531,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1740917152/","is_pending":"Not Pending","title":"Number of Zero-Filled Subarrays","memory":"62.6 MB","code":"class Solution \\n{\\n    public long zeroFilledSubarray(int[] nums) \\n    {\\n       long s=0,a=0;\\n       for(int i:nums)\\n       {\\n         if(i==0)\\n         {\\n            s++;\\n            a+=s;\\n         }\\n         else\\n         {\\n            s=0;\\n         }\\n       }\\n       return a;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"number-of-zero-filled-subarrays","has_notes":false,"flag_type":1,"frontend_id":642},{"id":1739742777,"question_id":679,"lang":"java","lang_name":"Java","time":"1\xc2\xa0week","timestamp":1755529120,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1739742777/","is_pending":"Not Pending","title":"24 Game","memory":"45.5 MB","code":"class Solution {\\n    final double EPS = 1e-6;\\n\\n    public boolean judgePoint24(int[] cards) {\\n        List<Double> nums = new ArrayList<>();\\n        for (int n : cards) nums.add((double) n);\\n        return dfs(nums);\\n    }\\n\\n    private boolean dfs(List<Double> nums) {\\n        if (nums.size() == 1) {\\n            return Math.abs(nums.get(0) - 24.0) < EPS;\\n        }\\n        for (int i = 0; i < nums.size(); i++) {\\n            for (int j = 0; j < nums.size(); j++) {\\n                if (i == j) continue;\\n                List<Double> next = new ArrayList<>();\\n                for (int k = 0; k < nums.size(); k++) {\\n                    if (k != i && k != j) next.add(nums.get(k));\\n                }\\n                for (double val : compute(nums.get(i), nums.get(j))) {\\n                    next.add(val);\\n                    if (dfs(next)) return true;\\n                    next.remove(next.size() - 1);\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    private List<Double> compute(double a, double b) {\\n        List<Double> res = new ArrayList<>();\\n        res.add(a + b);\\n        res.add(a - b);\\n        res.add(b - a);\\n        res.add(a * b);\\n        if (Math.abs(b) > EPS) res.add(a / b);\\n        if (Math.abs(a) > EPS) res.add(b / a);\\n        return res;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"24-game","has_notes":false,"flag_type":1,"frontend_id":641},{"id":1738663350,"question_id":867,"lang":"java","lang_name":"Java","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755443878,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1738663350/","is_pending":"Not Pending","title":"New 21 Game","memory":"43.3 MB","code":"class Solution {\\n    public double new21Game(int N, int K, int maxPts) {\\n        if (K == 0 || N >= K - 1 + maxPts) return 1.0;\\n\\n        double[] dp = new double[maxPts]; \\n        dp[0] = 1.0;\\n        double windowSum = 1.0, result = 0.0;\\n\\n        for (int i = 1; i <= N; i++) {\\n            double prob = windowSum / maxPts;\\n            \\n            if (i < K) {\\n                windowSum += prob;\\n            } else {\\n                result += prob;\\n            }\\n\\n            if (i >= maxPts) {\\n                windowSum -= dp[i % maxPts];\\n            }\\n\\n            dp[i % maxPts] = prob;\\n        }\\n\\n        return result;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"new-21-game","has_notes":false,"flag_type":1,"frontend_id":640},{"id":1737576489,"question_id":1448,"lang":"java","lang_name":"Java","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755361574,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1737576489/","is_pending":"Not Pending","title":"Maximum 69 Number","memory":"40.4 MB","code":"class Solution {\\n    public int maximum69Number(int num) {\\n  char[] digits = String.valueOf(num).toCharArray();  \\n        for (int i = 0; i < digits.length; i++) {\\n            if (digits[i] == \'6\') {\\n                digits[i] = \'9\';\\n                break; \\n            }\\n        }\\n        return Integer.parseInt(new String(digits));\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-69-number","has_notes":false,"flag_type":1,"frontend_id":639},{"id":1736093164,"question_id":342,"lang":"java","lang_name":"Java","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1755261270,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1736093164/","is_pending":"Not Pending","title":"Power of Four","memory":"40.7 MB","code":"class Solution {\\n    public boolean isPowerOfFour(int n)\\n     {\\n      if(n==0)\\n      {\\n        return false;\\n      }  \\n      while(n%4==0)\\n      {\\n        n/=4;\\n      }\\n      return n==1;\\n    }\\n}","compare_resulttitle_slug":"power-of-four","has_notes":false,"flag_type":1,"frontend_id":638},{"id":1735059485,"question_id":2346,"lang":"java","lang_name":"Java","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1755183883,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1735059485/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"42.3 MB","code":"class Solution \\n{\\n    public String largestGoodInteger(String nums) \\n    {\\n        for(char i=\'9\';i>=\'0\';i--)\\n        {\\n            String s=\\"\\"+i+i+i;\\n            if(nums.contains(s))\\n             return s;\\n        }\\n        return \\"\\";\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":637},{"id":1733720746,"question_id":326,"lang":"java","lang_name":"Java","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1755089541,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1733720746/","is_pending":"Not Pending","title":"Power of Three","memory":"44.2 MB","code":"class Solution {\\n    public boolean isPowerOfThree(int n) \\n    {\\n      if(n==0)\\n      {\\n        return false;\\n      }    \\n      while(n%3==0)\\n      {\\n        n/=3;\\n      }\\n      return n==1;\\n    }\\n}","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":636},{"id":1732757019,"question_id":2882,"lang":"java","lang_name":"Java","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1755019244,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1732757019/","is_pending":"Not Pending","title":"Ways to Express an Integer as Sum of Powers","memory":"43.3 MB","code":"class Solution {\\n    private static final int MOD = 1_000_000_007;\\n    public int numberOfWays(int n, int x) {\\n        long[] dp = new long[n + 1];\\n        dp[0] = 1; \\n        for (int i = 1; Math.pow(i, x) <= n; i++) {\\n            int power = (int) Math.pow(i, x);\\n            for (int sum = n; sum >= power; sum--) {\\n            dp[sum] = (dp[sum] + dp[sum - power]) % MOD;\\n            }\\n        } return (int) dp[n];\\n    }\\n}","compare_resulttitle_slug":"ways-to-express-an-integer-as-sum-of-powers","has_notes":false,"flag_type":1,"frontend_id":635},{"id":1731423111,"question_id":2529,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks","timestamp":1754927975,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1731423111/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"75.2 MB","code":"class Solution {\\n    public int[] productQueries(int n, int[][] queries) {\\n        int MOD = (int) (1e9 + 7);\\n        int q = queries.length;\\n\\n        List<Integer> powers = new ArrayList<>();\\n        for (int i = 0; i < 31; i++) {\\n            if ((n >> i & 1) == 1) powers.add(1 << i);\\n        }\\n\\n        int[] ans = new int[q];\\n        for (int i = 0; i < q; i++) {\\n            int left = queries[i][0];\\n            int right = queries[i][1];\\n            long product = 1;\\n\\n            for (int j = left; j <= right; j++) product = (product * powers.get(j)) % MOD; \\n\\n            ans[i] = (int) product; \\n        }\\n\\n        return ans;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":634},{"id":1729735128,"question_id":900,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1754804643,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1729735128/","is_pending":"Not Pending","title":"Reordered Power of 2","memory":"41.3 MB","code":"class Solution \\n{\\n    public boolean reorderedPowerOf2(int n) \\n    {\\n        String target = sortDigits(n);\\n\\n        for(int i = 0; i < 31; i++)\\n        {\\n            int powerOfTwo = 1 << i;\\n            if(sortDigits(powerOfTwo).equals(target)) return true;\\n        }\\n\\n        return false;\\n    }\\n    public String sortDigits(int num)\\n    {\\n        char[] arr = String.valueOf(num).toCharArray();\\n        Arrays.sort(arr);\\n        return new String(arr);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reordered-power-of-2","has_notes":false,"flag_type":1,"frontend_id":633},{"id":1729219914,"question_id":283,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754760279,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1729219914/","is_pending":"Not Pending","title":"Move Zeroes","memory":"45.9 MB","code":"class Solution {\\n    public void moveZeroes(int[] nums) \\n    {\\n        int j=-1;\\n        int n=nums.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                j=i;\\n                break;\\n            }\\n        }\\n        if(j==-1) return;\\n        for(int i=j+1;i<n;i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                int t=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=t;\\n                j++;\\n            }\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"move-zeroes","has_notes":false,"flag_type":1,"frontend_id":632},{"id":1729216144,"question_id":283,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754760081,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1729216144/","is_pending":"Not Pending","title":"Move Zeroes","memory":"N/A","code":"class Solution {\\n    public void moveZeroes(int[] nums) \\n    {\\n        int j=-1;\\n        int n=nums.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                j=i;\\n                break;\\n            }\\n        }\\n        for(int i=j+1;i<n;i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                int t=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=t;\\n                j++;\\n            }\\n        }\\n    }\\n}","compare_result":"110000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"move-zeroes","has_notes":false,"flag_type":1,"frontend_id":631}],"has_next":true,"last_key":""}'
2025-08-25 23:27:39,005 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:39,011 [INFO] __main__.py:245 - Writing longest-subarray-of-1s-after-deleting-one-element/2025-08-25 23.11.09 - Accepted - runtime 3ms - memory 56.8MB.java
2025-08-25 23:27:39,011 [INFO] __main__.py:208 - Skipping longest-subarray-of-1s-after-deleting-one-element 2025-08-24 06.39.59 in java because a more recent submission has already been exported
2025-08-25 23:27:39,484 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:39,486 [INFO] __main__.py:245 - Writing subarray-sum-equals-k/2025-08-23 11.23.13 - Accepted - runtime 1076ms - memory 46.6MB.java
2025-08-25 23:27:39,490 [INFO] __main__.py:188 - Skipping subarray-sum-equals-k 2025-08-23 11.20.00 because its status is 'Wrong Answer'
2025-08-25 23:27:40,203 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:40,208 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-ii/2025-08-23 11.13.32 - Accepted - runtime 60ms - memory 45.1MB.java
2025-08-25 23:27:40,538 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:40,538 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-i/2025-08-22 20.46.28 - Accepted - runtime 5ms - memory 196.7MB.java
2025-08-25 23:27:40,890 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:40,900 [INFO] __main__.py:245 - Writing count-submatrices-with-all-ones/2025-08-22 00.00.40 - Accepted - runtime 7ms - memory 45.2MB.java
2025-08-25 23:27:41,236 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:41,246 [INFO] __main__.py:245 - Writing count-square-submatrices-with-all-ones/2025-08-20 17.32.59 - Accepted - runtime 9ms - memory 56.8MB.java
2025-08-25 23:27:41,638 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:41,642 [INFO] __main__.py:245 - Writing number-of-zero-filled-subarrays/2025-08-19 19.38.51 - Accepted - runtime 4ms - memory 62.6MB.java
2025-08-25 23:27:41,975 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:41,979 [INFO] __main__.py:245 - Writing 24-game/2025-08-18 20.28.40 - Accepted - runtime 21ms - memory 45.5MB.java
2025-08-25 23:27:42,362 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:42,364 [INFO] __main__.py:245 - Writing new-21-game/2025-08-17 20.47.58 - Accepted - runtime 3ms - memory 43.3MB.java
2025-08-25 23:27:42,700 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:42,702 [INFO] __main__.py:245 - Writing maximum-69-number/2025-08-16 21.56.14 - Accepted - runtime 0ms - memory 40.4MB.java
2025-08-25 23:27:43,033 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:43,033 [INFO] __main__.py:245 - Writing power-of-four/2025-08-15 18.04.30 - Accepted - runtime 0ms - memory 40.7MB.java
2025-08-25 23:27:43,481 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:43,481 [INFO] __main__.py:245 - Writing largest-3-same-digit-number-in-string/2025-08-14 20.34.43 - Accepted - runtime 7ms - memory 42.3MB.java
2025-08-25 23:27:43,838 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:43,841 [INFO] __main__.py:245 - Writing power-of-three/2025-08-13 18.22.21 - Accepted - runtime 8ms - memory 44.2MB.java
2025-08-25 23:27:44,205 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:44,216 [INFO] __main__.py:245 - Writing ways-to-express-an-integer-as-sum-of-powers/2025-08-12 22.50.44 - Accepted - runtime 15ms - memory 43.3MB.java
2025-08-25 23:27:44,617 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:44,619 [INFO] __main__.py:245 - Writing range-product-queries-of-powers/2025-08-11 21.29.35 - Accepted - runtime 19ms - memory 75.2MB.java
2025-08-25 23:27:44,982 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:44,986 [INFO] __main__.py:245 - Writing reordered-power-of-2/2025-08-10 11.14.03 - Accepted - runtime 1ms - memory 41.3MB.java
2025-08-25 23:27:45,342 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:45,344 [INFO] __main__.py:245 - Writing move-zeroes/2025-08-09 22.54.39 - Accepted - runtime 2ms - memory 45.9MB.java
2025-08-25 23:27:45,346 [INFO] __main__.py:188 - Skipping move-zeroes 2025-08-09 22.51.21 because its status is 'Runtime Error'
2025-08-25 23:27:50,349 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-08-25 23:27:51,423 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/11" 200 None
2025-08-25 23:27:51,439 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1728630318,"question_id":26,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754718997,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1728630318/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"44.9 MB","code":"class Solution {\\n    public int removeDuplicates(int[] arr) \\n    {\\n        int i=0;\\n        for(int j=1;j<arr.length;j++)\\n        {\\n            if(arr[j]!=arr[i])\\n            {\\n                arr[i+1]=arr[j];\\n                i++;\\n            }\\n        }\\n        return i+1;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":630},{"id":1728464839,"question_id":231,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754701527,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1728464839/","is_pending":"Not Pending","title":"Power of Two","memory":"40.8 MB","code":"class Solution {\\n    public boolean isPowerOfTwo(int n)\\n     {\\n        if(n==0)\\n        {\\n            return false;\\n        }\\n        while(n%2==0)\\n        {\\n            n/=2;\\n        }\\n        return n==1;\\n    }\\n}","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":629},{"id":1727719794,"question_id":826,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754639634,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/1727719794/","is_pending":"Not Pending","title":"Soup Servings","memory":"231.8 MB","code":"class Solution \\n{\\n    public double f(int a, int b, double[][] dp) \\n    {\\n        if (a <= 0 && b > 0) \\n        {\\n            return 1.0;\\n        }\\n        if (a == 0 && b == 0) \\n        {\\n            return 0.5;\\n        }\\n        if (a > 0 && b <= 0) {\\n            return 0.0;\\n        }\\n        if (a <= 0 && b <= 0) \\n        {\\n            return 0.5;\\n        }\\n        if (dp[a][b] != -1) \\n        {\\n            return dp[a][b];\\n        }\\n        double x = 0.25 * f(a - 100, b, dp);\\n        double y = 0.25 * f(a - 75, b - 25, dp);\\n        double z = 0.25 * f(a - 50, b - 50, dp);\\n        double w = 0.25 * f(a - 25, b - 75, dp);\\n        return dp[a][b] = x + y + z + w;\\n    }\\n    public double soupServings(int n) \\n    {\\n        if (n > 4800) \\n        {\\n            return 1.0;\\n        }\\n        double[][] dp = new double[n + 1][n + 1];\\n        for (int i = 0; i <= n; i++) \\n        {\\n            for (int j = 0; j <= n; j++) \\n            {\\n                dp[i][j] = -1;\\n            }\\n        }\\n        return f(n, n, dp);\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"soup-servings","has_notes":false,"flag_type":1,"frontend_id":628},{"id":1727574952,"question_id":3648,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754629677,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1727574952/","is_pending":"Not Pending","title":"Find the Maximum Number of Fruits Collected","memory":"199 MB","code":"class Solution {\\n    public int maxCollectedFruits(int[][] fruits) {\\n        int n = fruits.length;\\n        int total = 0;\\n\\n        // Collect main diagonal fruits (top-left to bottom-right)\\n        for (int i = 0; i < n; i++) {\\n            total += fruits[i][i];\\n        }\\n\\n        int[] rightPath = new int[3];\\n        rightPath[0] = fruits[0][n - 1];\\n\\n        int[] bottomPath = new int[3];\\n        bottomPath[0] = fruits[n - 1][0];\\n\\n        int window = 2;\\n\\n        for (int step = 1; step < n - 1; step++) {\\n            int[] newRight = new int[window + 2];\\n            int[] newBottom = new int[window + 2];\\n\\n            for (int dist = 0; dist < window; dist++) {\\n                // Bounds check for array access\\n                int left = (dist - 1 >= 0) ? rightPath[dist - 1] : 0;\\n                int mid = rightPath[dist];\\n                int right = (dist + 1 < rightPath.length) ? rightPath[dist + 1] : 0;\\n                newRight[dist] = Math.max(left, Math.max(mid, right)) + fruits[step][n - 1 - dist];\\n\\n                left = (dist - 1 >= 0) ? bottomPath[dist - 1] : 0;\\n                mid = bottomPath[dist];\\n                right = (dist + 1 < bottomPath.length) ? bottomPath[dist + 1] : 0;\\n                newBottom[dist] = Math.max(left, Math.max(mid, right)) + fruits[n - 1 - dist][step];\\n            }\\n\\n            rightPath = newRight;\\n            bottomPath = newBottom;\\n\\n            if (window - n + 4 + step <= 1) {\\n                window += 1;\\n            } else if (window - n + 3 + step > 1) {\\n                window -= 1;\\n            }\\n        }\\n\\n        return total + rightPath[0] + bottomPath[0];\\n    }\\n}","compare_resulttitle_slug":"find-the-maximum-number-of-fruits-collected","has_notes":false,"flag_type":1,"frontend_id":627},{"id":1726039479,"question_id":3791,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1754503849,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/1726039479/","is_pending":"Not Pending","title":"Fruits Into Baskets III","memory":"64.9 MB","code":"class Solution {\\n    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {\\n        int n = fruits.length;\\n        int[] seg = new int[4*n];\\n        int ans = 0;\\n        buildTree(baskets, seg, 0, 0, n - 1);\\n        for (int i = 0; i < n; i++) {\\n            if (fruits[i] > seg[0])\\n                ans++;\\n            else {\\n                if (!solve(seg, 0, 0, n - 1, fruits[i]))\\n                    ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n\\n    private int buildTree(int[] nums, int[] seg, int idx, int l, int r) {\\n        if (l == r) {\\n            seg[idx] = nums[l];\\n            return seg[idx];\\n        }\\n        int mid = l + (r - l) / 2;\\n        seg[idx] = Math.max(buildTree(nums, seg, 2 * idx + 1, l, mid),\\n                buildTree(nums, seg, 2 * idx + 2, mid + 1, r));\\n        return seg[idx];\\n    }\\n\\n    private boolean solve(int[] seg, int idx, int l, int r, int val) {\\n        if (l == r) {\\n            seg[idx] = -1;\\n            return true;\\n        }\\n        int mid = l + (r - l) / 2;\\n        boolean left = false;\\n        boolean right = false;\\n        if(seg[2*idx+1]>=val){\\n            left = solve(seg, 2*idx+1, l, mid, val);\\n        }else{\\n            right = solve(seg, 2*idx+2, mid+1, r, val);\\n        }\\n        seg[idx] = Math.max(seg[2 * idx + 1], seg[2 * idx + 2]);\\n        return left || right;\\n    }\\n}","compare_resulttitle_slug":"fruits-into-baskets-iii","has_notes":false,"flag_type":1,"frontend_id":626},{"id":1725131636,"question_id":3791,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754452565,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1725131636/","is_pending":"Not Pending","title":"Fruits Into Baskets III","memory":"N/A","code":"class Solution {\\n    public int numOfUnplacedFruits(int[] fruits, int[] baskets) \\n    {\\n        int n=fruits.length;\\n        boolean ba[]=new boolean[n];\\n        int up=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            boolean p=false;\\n            for(int j=0;j<n;j++)\\n            {\\n                if(!ba[j]&&baskets[j]>=fruits[i])\\n                {\\n                    ba[j]=true;\\n                    p=true;\\n                    break;\\n                }\\n            }\\n            if(!p)\\n            up++;\\n        }\\n        return up;\\n    }\\n}","compare_resulttitle_slug":"fruits-into-baskets-iii","has_notes":false,"flag_type":1,"frontend_id":625},{"id":1723931296,"question_id":3790,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754372279,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1723931296/","is_pending":"Not Pending","title":"Fruits Into Baskets II","memory":"44.3 MB","code":"class Solution {\\n    public int numOfUnplacedFruits(int[] fruits, int[] baskets) \\n    {\\n        int n=fruits.length;\\n        boolean ba[]=new boolean[n];\\n        int up=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            boolean p=false;\\n            for(int j=0;j<n;j++)\\n            {\\n                if(!ba[j]&&baskets[j]>=fruits[i])\\n                {\\n                    ba[j]=true;\\n                    p=true;\\n                    break;\\n                }\\n            }\\n            if(!p)\\n            up++;\\n        }\\n        return up;\\n    }\\n}","compare_resulttitle_slug":"fruits-into-baskets-ii","has_notes":false,"flag_type":1,"frontend_id":624},{"id":1723887273,"question_id":3790,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754369834,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1723887273/","is_pending":"Not Pending","title":"Fruits Into Baskets II","memory":"N/A","code":"class Solution {\\n    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {\\n        \\n    }\\n}","compare_result":null,"title_slug":"fruits-into-baskets-ii","has_notes":false,"flag_type":1,"frontend_id":623},{"id":1723490375,"question_id":940,"lang":"java","lang_name":"Java","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754332252,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1723490375/","is_pending":"Not Pending","title":"Fruit Into Baskets","memory":"55.3 MB","code":"public class Solution {\\n    public int totalFruit(int[] fruits) {\\n        int n = fruits.length;\\n        int lastFruit = -1, secondLastFruit = -1;\\n        int lastCount = 0, currMax = 0, max = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            int fruit = fruits[i];\\n\\n            if (fruit == lastFruit || fruit == secondLastFruit) {\\n                currMax++;\\n            } else {\\n                currMax = lastCount + 1;\\n            }\\n\\n            if (fruit == lastFruit) {\\n                lastCount++;\\n            } else {\\n                lastCount = 1;\\n                secondLastFruit = lastFruit;\\n                lastFruit = fruit;\\n            }\\n\\n            max = Math.max(max, currMax);\\n        }\\n\\n        return max;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"fruit-into-baskets","has_notes":false,"flag_type":1,"frontend_id":622},{"id":1722127538,"question_id":2229,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1754239921,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1722127538/","is_pending":"Not Pending","title":"Maximum Fruits Harvested After at Most K Steps","memory":"98.1 MB","code":"class Solution {\\n    public int maxTotalFruits(int[][] fruits, int startPos, int k) {\\n        int left = 0, sum = 0, max = 0;\\n        for (int right = 0; right < fruits.length; right++) {\\n            sum += fruits[right][1];\\n            while (left <= right && minSteps(fruits[left][0], fruits[right][0], startPos) > k) {\\n                sum -= fruits[left][1];\\n                left++;\\n            }\\n            max = Math.max(max, sum);\\n        }\\n        return max;\\n    }\\n    private int minSteps(int left, int right, int start) {\\n        int goLeft = Math.abs(start - left) + (right - left);\\n        int goRight = Math.abs(start - right) + (right - left);\\n        return Math.min(goLeft, goRight);\\n    }\\n}\\n\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-fruits-harvested-after-at-most-k-steps","has_notes":false,"flag_type":1,"frontend_id":621},{"id":1721067584,"question_id":2689,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1754158819,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1721067584/","is_pending":"Not Pending","title":"Rearranging Fruits","memory":"64.2 MB","code":"class Solution {\\n    public long minCost(final int[] basket1, final int[] basket2) {\\n        final int n = basket1.length;\\n        final Map<Integer, Integer> counts = new HashMap<>();\\n\\n        for(int i = 0; i < n; ++i)\\n            counts.put(basket1[i], counts.getOrDefault(basket1[i], 0) + 1);\\n\\n        for(int i = 0; i < n; ++i)\\n            counts.put(basket2[i], counts.getOrDefault(basket2[i], 0) - 1);\\n\\n        final List<Integer> swaps = new ArrayList<>();\\n\\n        int min = Integer.MAX_VALUE;\\n\\n        for(final Map.Entry<Integer, Integer> entry : counts.entrySet()) {\\n            final int num = entry.getKey(), count = entry.getValue();\\n\\n            if(count % 2 > 0)\\n                return -1;\\n\\n            min = Math.min(num, min);\\n\\n            for(int i = 0; i < Math.abs(count) / 2; ++i)\\n                swaps.add(num);\\n        }\\n\\n        Collections.sort(swaps);\\n\\n        long result = 0;\\n\\n        for(int i = 0; i < swaps.size() / 2; ++i)\\n            result += Math.min(swaps.get(i), min * 2);\\n\\n        return result;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"rearranging-fruits","has_notes":false,"flag_type":1,"frontend_id":620},{"id":1720188497,"question_id":242,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754111299,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1720188497/","is_pending":"Not Pending","title":"Valid Anagram","memory":"45.1 MB","code":"class Solution {\\n    public boolean isAnagram(String s, String t) \\n    {\\n        if(s.length()!=t.length())\\n        {\\n            return false;\\n        }\\n        char a1[]=s.toCharArray();\\n        char a2[]=t.toCharArray();\\n        Arrays.sort(a1);\\n        Arrays.sort(a2);\\n\\n        return Arrays.equals(a1,a2);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":619},{"id":1719838302,"question_id":118,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754071077,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1719838302/","is_pending":"Not Pending","title":"Pascal\'s Triangle","memory":"42.2 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public List<List<Integer>> generate(int numRows) {\\n        List<List<Integer>> pascal = new ArrayList<>();\\n\\n        for (int i = 0; i < numRows; i++) {\\n            List<Integer> row = new ArrayList<>(Collections.nCopies(i + 1, 1));\\n            \\n            for (int j = 1; j < i; j++) {\\n                int val = pascal.get(i - 1).get(j - 1) + pascal.get(i - 1).get(j);\\n                row.set(j, val);\\n            }\\n            pascal.add(row);\\n        }\\n        return pascal;\\n    }\\n}","compare_result":"111111111111111111111111111111","title_slug":"pascals-triangle","has_notes":false,"flag_type":1,"frontend_id":618},{"id":1717934845,"question_id":934,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1753941439,"status":10,"status_display":"Accepted","runtime":"422 ms","url":"/submissions/detail/1717934845/","is_pending":"Not Pending","title":"Bitwise ORs of Subarrays","memory":"73.8 MB","code":"class Solution \\n{\\n    public int subarrayBitwiseORs(int[] arr) \\n    {\\n        Set<Integer> res = new HashSet<>();\\n        Set<Integer> cur = new HashSet<>();\\n        for (int num : arr) \\n        {\\n            Set<Integer> next = new HashSet<>();\\n            next.add(num);\\n            for (int x : cur) \\n            {\\n                next.add(x | num);\\n            }\\n            cur = next;\\n            res.addAll(cur);\\n        }\\n        return res.size();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"bitwise-ors-of-subarrays","has_notes":false,"flag_type":1,"frontend_id":617},{"id":1716795270,"question_id":2503,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753861494,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1716795270/","is_pending":"Not Pending","title":"Longest Subarray With Maximum Bitwise AND","memory":"61.1 MB","code":"class Solution {\\n    public int longestSubarray(int[] nums) {\\n        if (nums == null || nums.length == 0) {\\n            return 0;\\n        }\\n        int maxVal = 0;\\n        for (int num : nums) {\\n            if (num > maxVal) {\\n                maxVal = num;\\n            }\\n        }\\n        int maxLen = 0;\\n        int currentLen = 0;\\n        \\n        for (int num : nums) {\\n            if (num == maxVal) {\\n                currentLen++;\\n            } else {\\n                maxLen = Math.max(maxLen, currentLen);\\n                currentLen = 0;\\n            }\\n        }\\n        return Math.max(maxLen, currentLen);\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"longest-subarray-with-maximum-bitwise-and","has_notes":false,"flag_type":1,"frontend_id":616},{"id":1716157171,"question_id":2498,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1753810866,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1716157171/","is_pending":"Not Pending","title":"Smallest Subarrays With Maximum Bitwise OR","memory":"61.6 MB","code":"class Solution {\\n    public int[] smallestSubarrays(int[] nums) {\\n        int len = nums.length;\\n        int[] lastSeen = new int[30];\\n        int[] res = new int[len];\\n        for (int i = 0; i < len; i++) res[i] = 1;\\n        for (int i = len - 1; i >= 0; i--) {\\n            for (int bit = 0; bit < 30; bit++) {\\n                if ((nums[i] & (1 << bit)) > 0) lastSeen[bit] = i;\\n                res[i] = Math.max(res[i], lastSeen[bit] - i + 1);\\n            }\\n        }\\n        return res;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subarrays-with-maximum-bitwise-or","has_notes":false,"flag_type":1,"frontend_id":615},{"id":1715749041,"question_id":347,"lang":"java","lang_name":"Java","time":"3\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1753790812,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1715749041/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"49.1 MB","code":"class Solution {\\n    public int[] topKFrequent(int[] nums, int k) \\n    {\\n        int n=nums.length;\\n        HashMap<Integer,Integer> hm=new HashMap<>();\\n        for(int i=0;i<n;i++)\\n        hm.put(nums[i],hm.getOrDefault(nums[i],0)+1);\\n        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)-> hm.get(a)-hm.get(b));\\n        for(int i:hm.keySet())\\n        {\\n            pq.offer(i);\\n            if(pq.size()>k)\\n            pq.poll();\\n        }\\n        int res[]=new int[k];\\n\\n        for(int i=k-1;i>=0;i--)\\n        {\\n        res[i]=pq.poll();\\n        }\\n        return res;\\n        \\n    }\\n}","compare_result":"1111111111111111111111","title_slug":"top-k-frequent-elements","has_notes":false,"flag_type":1,"frontend_id":614},{"id":1713963694,"question_id":2170,"lang":"java","lang_name":"Java","time":"4\xc2\xa0weeks","timestamp":1753666847,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1713963694/","is_pending":"Not Pending","title":"Count Number of Maximum Bitwise-OR Subsets","memory":"41.3 MB","code":"class Solution {\\n    public int countMaxOrSubsets(int[] nums) {\\n        int max = 0;\\n        for (int n : nums) max |= n;\\n        return dfs(nums, 0, 0, max);\\n    }\\n    private int dfs(int[] nums, int i, int or, int max) {\\n        if (i == nums.length) return or == max ? 1 : 0;\\n        return dfs(nums, i + 1, or | nums[i], max) + dfs(nums, i + 1, or, max);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-number-of-maximum-bitwise-or-subsets","has_notes":false,"flag_type":1,"frontend_id":613},{"id":1713181798,"question_id":2316,"lang":"java","lang_name":"Java","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753608538,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1713181798/","is_pending":"Not Pending","title":"Count Hills and Valleys in an Array","memory":"41.6 MB","code":"class Solution {\\n    public int countHillValley(int[] nums) {\\n        int cnt = 0;\\n        int j = 0;\\n        int n = nums.length;\\n        for (int i = 1; i < n - 1; i++) {\\n            if ((nums[j] < nums[i] && nums[i] > nums[i + 1]) ||\\n                (nums[j] > nums[i] && nums[i] < nums[i + 1])) {\\n                cnt++;\\n                j = i;\\n            }\\n        }\\n        return cnt;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-hills-and-valleys-in-an-array","has_notes":false,"flag_type":1,"frontend_id":612},{"id":1712404594,"question_id":3789,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753550454,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/1712404594/","is_pending":"Not Pending","title":"Maximize Subarrays After Removing One Conflicting Pair","memory":"127.4 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public long maxSubarrays(int n, int[][] conflictingPairs) {\\n        List<List<Integer>> pairs = new ArrayList<>();\\n        for (int i = 0; i <= n; i++) {\\n            pairs.add(new ArrayList<>());\\n        }\\n\\n        for (int[] p : conflictingPairs) {\\n            int s = p[0], e = p[1];\\n            if (s > e) {\\n                int temp = s;\\n                s = e;\\n                e = temp;\\n            }\\n            pairs.get(s).add(e);\\n        }\\n\\n        long curr = 0;\\n        long[] res = new long[n + 2];\\n\\n        int j = conflictingPairs.length - 1;\\n        int[] nextEnd = new int[]{n + 1, n + 1};\\n\\n        for (int i = n; i > 0; i--) {\\n            for (int end : pairs.get(i)) {\\n                if (end <= nextEnd[0]) {\\n                    nextEnd[1] = nextEnd[0];\\n                    nextEnd[0] = end;\\n                } else if (end < nextEnd[1]) {\\n                    nextEnd[1] = end;\\n                }\\n                j--;\\n            }\\n\\n            curr += nextEnd[0] - i;\\n            res[nextEnd[0]] += nextEnd[1] - nextEnd[0];\\n        }\\n\\n        long maxExtra = 0;\\n        for (long val : res) {\\n            maxExtra = Math.max(maxExtra, val);\\n        }\\n\\n        return curr + maxExtra;\\n    }\\n}","compare_resulttitle_slug":"maximize-subarrays-after-removing-one-conflicting-pair","has_notes":false,"flag_type":1,"frontend_id":611}],"has_next":true,"last_key":""}'
2025-08-25 23:27:51,871 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:51,877 [INFO] __main__.py:245 - Writing remove-duplicates-from-sorted-array/2025-08-09 11.26.37 - Accepted - runtime 1ms - memory 44.9MB.java
2025-08-25 23:27:52,192 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:52,206 [INFO] __main__.py:245 - Writing power-of-two/2025-08-09 06.35.27 - Accepted - runtime 0ms - memory 40.8MB.java
2025-08-25 23:27:52,590 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:52,594 [INFO] __main__.py:245 - Writing soup-servings/2025-08-08 13.23.54 - Accepted - runtime 55ms - memory 231.8MB.java
2025-08-25 23:27:52,927 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:52,929 [INFO] __main__.py:245 - Writing find-the-maximum-number-of-fruits-collected/2025-08-08 10.37.57 - Accepted - runtime 6ms - memory 199MB.java
2025-08-25 23:27:53,314 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:53,318 [INFO] __main__.py:245 - Writing fruits-into-baskets-iii/2025-08-06 23.40.49 - Accepted - runtime 52ms - memory 64.9MB.java
2025-08-25 23:27:53,318 [INFO] __main__.py:188 - Skipping fruits-into-baskets-iii 2025-08-06 09.26.05 because its status is 'Time Limit Exceeded'
2025-08-25 23:27:53,653 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:53,657 [INFO] __main__.py:245 - Writing fruits-into-baskets-ii/2025-08-05 11.07.59 - Accepted - runtime 2ms - memory 44.3MB.java
2025-08-25 23:27:53,660 [INFO] __main__.py:188 - Skipping fruits-into-baskets-ii 2025-08-05 10.27.14 because its status is 'Compile Error'
2025-08-25 23:27:54,436 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:54,438 [INFO] __main__.py:245 - Writing fruit-into-baskets/2025-08-05 00.00.52 - Accepted - runtime 5ms - memory 55.3MB.java
2025-08-25 23:27:54,756 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:54,774 [INFO] __main__.py:245 - Writing maximum-fruits-harvested-after-at-most-k-steps/2025-08-03 22.22.01 - Accepted - runtime 2ms - memory 98.1MB.java
2025-08-25 23:27:55,156 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:55,157 [INFO] __main__.py:245 - Writing rearranging-fruits/2025-08-02 23.50.19 - Accepted - runtime 43ms - memory 64.2MB.java
2025-08-25 23:27:55,492 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:55,494 [INFO] __main__.py:245 - Writing valid-anagram/2025-08-02 10.38.19 - Accepted - runtime 4ms - memory 45.1MB.java
2025-08-25 23:27:55,864 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:55,866 [INFO] __main__.py:245 - Writing pascals-triangle/2025-08-01 23.27.57 - Accepted - runtime 1ms - memory 42.2MB.java
2025-08-25 23:27:56,183 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:56,183 [INFO] __main__.py:245 - Writing bitwise-ors-of-subarrays/2025-07-31 11.27.19 - Accepted - runtime 422ms - memory 73.8MB.java
2025-08-25 23:27:56,522 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:56,522 [INFO] __main__.py:245 - Writing longest-subarray-with-maximum-bitwise-and/2025-07-30 13.14.54 - Accepted - runtime 2ms - memory 61.1MB.java
2025-08-25 23:27:56,976 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:56,977 [INFO] __main__.py:245 - Writing smallest-subarrays-with-maximum-bitwise-or/2025-07-29 23.11.06 - Accepted - runtime 34ms - memory 61.6MB.java
2025-08-25 23:27:57,406 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:57,406 [INFO] __main__.py:245 - Writing top-k-frequent-elements/2025-07-29 17.36.52 - Accepted - runtime 15ms - memory 49.1MB.java
2025-08-25 23:27:57,872 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:57,877 [INFO] __main__.py:245 - Writing count-number-of-maximum-bitwise-or-subsets/2025-07-28 07.10.47 - Accepted - runtime 8ms - memory 41.3MB.java
2025-08-25 23:27:58,207 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:58,218 [INFO] __main__.py:245 - Writing count-hills-and-valleys-in-an-array/2025-07-27 14.58.58 - Accepted - runtime 0ms - memory 41.6MB.java
2025-08-25 23:27:58,559 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:27:58,573 [INFO] __main__.py:245 - Writing maximize-subarrays-after-removing-one-conflicting-pair/2025-07-26 22.50.54 - Accepted - runtime 68ms - memory 127.4MB.java
2025-08-25 23:28:03,576 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-08-25 23:28:04,475 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/11" 200 None
2025-08-25 23:28:04,475 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1711481803,"question_id":42,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753475161,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1711481803/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"N/A","code":"class Solution {\\n    public int trap(int[] h) \\n    {\\n        int n=h.length;\\n        int t=0;\\n        for(int i=1;i<=n-1;i++)\\n        {\\n            int l=0,r=0;\\n            for(int j=0;j<=i;j++)\\n            {\\n                l=Math.max(l,h[j]);\\n            }\\n            for(int j=i;j<n;j++)\\n            {\\n                r=Math.max(r,h[j]);\\n            }\\n            t+=Math.min(l,r)-h[i];\\n        }\\n        return t;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"trapping-rain-water","has_notes":false,"flag_type":1,"frontend_id":610},{"id":1711477453,"question_id":62,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753474753,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1711477453/","is_pending":"Not Pending","title":"Unique Paths","memory":"40.2 MB","code":"class Solution {\\n    public int uniquePaths(int m, int n) \\n    {\\n        /*int dp[][]=new int[m][n];\\n        for(int i=0;i<m;i++)\\n        dp[i][0]=1;\\n        for(int j=0;j<n;j++)\\n        dp[0][j]=1;\\n        for(int i=1;i<m;i++)\\n        {\\n            for(int j=1;j<n;j++)\\n        dp[i][j]=dp[i-1][j]+dp[i][j-1];\\n        }\\n        return dp[m-1][n-1];*/\\n        long r=1;\\n        for(int i=1;i<m;i++)\\n        r=r*(n-1+i)/i;\\n        return (int)r;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths","has_notes":false,"flag_type":1,"frontend_id":609},{"id":1711477017,"question_id":62,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753474712,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1711477017/","is_pending":"Not Pending","title":"Unique Paths","memory":"N/A","code":"class Solution {\\n    public int uniquePaths(int m, int n) \\n    {\\n        /*int dp[][]=new int[m][n];\\n        for(int i=0;i<m;i++)\\n        dp[i][0]=1;\\n        for(int j=0;j<n;j++)\\n        dp[0][j]=1;\\n        for(int i=1;i<m;i++)\\n        {\\n            for(int j=1;j<n;j++)\\n        dp[i][j]=dp[i-1][j]+dp[i][j-1];\\n        }\\n        return dp[m-1][n-1];*/\\n        int r=1;\\n        for(int i=1;i<m;i++)\\n        r=r*(n-1+i)/i;\\n        return (int)r;\\n    }\\n}","compare_result":"111111111111111111111111111111111111101110101111011111110111011","title_slug":"unique-paths","has_notes":false,"flag_type":1,"frontend_id":608},{"id":1711476081,"question_id":62,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753474623,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1711476081/","is_pending":"Not Pending","title":"Unique Paths","memory":"40.4 MB","code":"class Solution {\\n    public int uniquePaths(int m, int n) \\n    {\\n        int dp[][]=new int[m][n];\\n        for(int i=0;i<m;i++)\\n        dp[i][0]=1;\\n        for(int j=0;j<n;j++)\\n        dp[0][j]=1;\\n        for(int i=1;i<m;i++)\\n        {\\n            for(int j=1;j<n;j++)\\n        dp[i][j]=dp[i-1][j]+dp[i][j-1];\\n        }\\n        return dp[m-1][n-1];\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths","has_notes":false,"flag_type":1,"frontend_id":607},{"id":1711452649,"question_id":151,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753472614,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1711452649/","is_pending":"Not Pending","title":"Reverse Words in a String","memory":"42.9 MB","code":"class Solution {\\n    public String reverseWords(String s) \\n    {\\n        String w[]=s.trim().split(\\"\\\\\\\\s+\\");\\n        StringBuilder sb=new StringBuilder();\\n        for(int i=w.length-1;i>=0;i--)\\n        {\\n            sb.append(w[i]);\\n            if(i!=0)\\n            sb.append(\\" \\");\\n        }\\n        return sb.toString();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-words-in-a-string","has_notes":false,"flag_type":1,"frontend_id":606},{"id":1711443567,"question_id":75,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753471917,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1711443567/","is_pending":"Not Pending","title":"Sort Colors","memory":"42 MB","code":"class Solution {\\n    public void sortColors(int[] nums) \\n    {\\n        int m=0,l=0,h=nums.length-1;\\n        while(m<=h)\\n        {\\n            if(nums[m]==0)\\n            {\\n                int t=nums[l];\\n                nums[l]=nums[m];\\n                nums[m]=t;\\n                l++;\\n                m++;\\n            }\\n            else if(nums[m]==1)\\n            m++;\\n            else\\n            {\\n                int t=nums[m];\\n                nums[m]=nums[h];\\n                nums[h]=t;\\n                h--;\\n            }\\n        }\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-colors","has_notes":false,"flag_type":1,"frontend_id":605},{"id":1711439915,"question_id":1,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753471655,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1711439915/","is_pending":"Not Pending","title":"Two Sum","memory":"45.1 MB","code":"class Solution {\\n    public int[] twoSum(int[] nums, int target) \\n    {\\n        int n=nums.length;\\n        HashMap<Integer,Integer> hm=new HashMap<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            int c=target-nums[i];\\n            if(hm.containsKey(c))\\n            {\\n                return new int[] {hm.get(c),i};\\n            }\\n            hm.put(nums[i],i);\\n        }\\n      return new int[] {-1,-1};\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":604},{"id":1711105295,"question_id":3788,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753454696,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1711105295/","is_pending":"Not Pending","title":"Maximum Unique Subarray Sum After Deletion","memory":"42.2 MB","code":"class Solution {\\n    public int maxSum(int[] nums) {\\n        Arrays.sort(nums);\\n        int sum = nums[nums.length - 1], prev = sum;\\n        for (int i = nums.length - 2; i >= 0 && nums[i] >= 0; prev = nums[i], i--)\\n        if (nums[i] != prev) sum += nums[i]; return sum;\\n    }\\n}","compare_resulttitle_slug":"maximum-unique-subarray-sum-after-deletion","has_notes":false,"flag_type":1,"frontend_id":603},{"id":1709522991,"question_id":2400,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753349623,"status":10,"status_display":"Accepted","runtime":"1434 ms","url":"/submissions/detail/1709522991/","is_pending":"Not Pending","title":"Minimum Score After Removals on a Tree","memory":"105.5 MB","code":"class Solution {\\n  public int minimumScore(int[] nums, int[][] edges) {\\n    final int n = nums.length;\\n    final int xors = getXors(nums);\\n    int[] subXors = nums.clone();\\n    List<Integer>[] tree = new List[n];\\n    Set<Integer>[] children = new Set[n];\\n\\n    for (int i = 0; i < n; ++i)\\n      tree[i] = new ArrayList<>();\\n\\n    for (int i = 0; i < n; ++i)\\n      children[i] = new HashSet<>(Arrays.asList(i));\\n\\n    for (int[] edge : edges) {\\n      final int u = edge[0];\\n      final int v = edge[1];\\n      tree[u].add(v);\\n      tree[v].add(u);\\n    }\\n\\n    dfs(tree, 0, -1, subXors, children);\\n\\n    int ans = Integer.MAX_VALUE;\\n\\n    for (int i = 0; i < edges.length; ++i) {\\n      int a = edges[i][0];\\n      int b = edges[i][1];\\n      if (children[a].contains(b)) {\\n        final int temp = a;\\n        a = b;\\n        b = a;\\n      }\\n      for (int j = 0; j < i; ++j) {\\n        int c = edges[j][0];\\n        int d = edges[j][1];\\n        if (children[c].contains(d)) {\\n          final int temp = c;\\n          c = d;\\n          d = temp;\\n        }\\n        int[] cands;\\n        if (a != c && children[a].contains(c))\\n          cands = new int[] {subXors[c], subXors[a] ^ subXors[c], xors ^ subXors[a]};\\n        else if (a != c && children[c].contains(a))\\n          cands = new int[] {subXors[a], subXors[c] ^ subXors[a], xors ^ subXors[c]};\\n        else\\n          cands = new int[] {subXors[a], subXors[c], xors ^ subXors[a] ^ subXors[c]};\\n        ans = Math.min(ans, Arrays.stream(cands).max().getAsInt() -\\n                                Arrays.stream(cands).min().getAsInt());\\n      }\\n    }\\n\\n    return ans;\\n  }\\n\\n  private Pair<Integer, Set<Integer>> dfs(List<Integer>[] tree, int u, int prev, int[] subXors,\\n                                          Set<Integer>[] children) {\\n    for (final int v : tree[u]) {\\n      if (v == prev)\\n        continue;\\n      final Pair<Integer, Set<Integer>> pair = dfs(tree, v, u, subXors, children);\\n      final int vXor = pair.getKey();\\n      final Set<Integer> vChildren = pair.getValue();\\n      subXors[u] ^= vXor;\\n      for (final int child : vChildren)\\n        children[u].add(child);\\n    }\\n    return new Pair<>(subXors[u], children[u]);\\n  }\\n\\n  private int getXors(int[] nums) {\\n    int xors = 0;\\n    for (final int num : nums)\\n      xors ^= num;\\n    return xors;\\n  }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-score-after-removals-on-a-tree","has_notes":false,"flag_type":1,"frontend_id":602},{"id":1708436184,"question_id":1818,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753271772,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1708436184/","is_pending":"Not Pending","title":"Maximum Score From Removing Substrings","memory":"45.3 MB","code":"class Solution {\\n    public int maximumGain(String s, int x, int y) {\\n    int minCharCount=0 , maxCharCount = 0; \\n    int maxVal = x>y ? x : y;\\n    int minVal = x>y ? y : x;\\n    char maxChar = x>y ? \'a\' : \'b\';\\n    char minChar = x>y ? \'b\' : \'a\';\\n    int ans = 0;\\n    for(int i=0; i<s.length(); i++)\\n    {\\n     char currChar = s.charAt(i);\\n     if(currChar==minChar)\\n     {\\n         if(maxCharCount>0)\\n         {\\n           ans += maxVal;\\n           maxCharCount--;\\n         }\\n         else\\n            minCharCount++;\\n     }\\n     else if(currChar==maxChar)\\n     {\\n        maxCharCount++;\\n     }\\n     else{\\n        ans += Math.min(maxCharCount, minCharCount)*minVal;\\n        maxCharCount = 0;\\n        minCharCount = 0;\\n     }\\n\\n    }\\n     ans += Math.min(maxCharCount, minCharCount)*minVal;\\n     return ans;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-from-removing-substrings","has_notes":false,"flag_type":1,"frontend_id":601},{"id":1707561047,"question_id":1813,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753205301,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1707561047/","is_pending":"Not Pending","title":"Maximum Erasure Value","memory":"60.1 MB","code":"class Solution {\\n  public int maximumUniqueSubarray(int[] nums) {\\n    Set<Integer> seen = new HashSet<>();\\n    int left = 0, currentSum = 0, maxSum = 0;\\n\\n    for (int right = 0; right < nums.length; right++) {\\n      while (seen.contains(nums[right])) {\\n        seen.remove(nums[left]);\\n        currentSum -= nums[left];\\n        left++;\\n      }\\n      seen.add(nums[right]);\\n      currentSum += nums[right];\\n      maxSum = Math.max(maxSum, currentSum);\\n    }\\n\\n    return maxSum;\\n  }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-erasure-value","has_notes":false,"flag_type":1,"frontend_id":600},{"id":1706229581,"question_id":1302,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1753117015,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/1706229581/","is_pending":"Not Pending","title":"Delete Characters to Make Fancy String","memory":"45.9 MB","code":"class Solution {\\n    public String makeFancyString(String s) {\\n        StringBuilder answer = new StringBuilder();\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            int len = answer.length();\\n            if (len <= 1 || !(answer.charAt(len - 1) == c && answer.charAt(len - 2) == c)) {\\n                answer.append(c);\\n            }\\n        }\\n        return answer.toString();\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-characters-to-make-fancy-string","has_notes":false,"flag_type":1,"frontend_id":599},{"id":1704493230,"question_id":2079,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month","timestamp":1752996939,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/1704493230/","is_pending":"Not Pending","title":"Delete Duplicate Folders in System","memory":"66.3 MB","code":"class Solution {\\n    static class N {\\n        Map<String, N> c = new TreeMap<>();\\n        boolean d = false;\\n    }\\n    public List<List<String>> deleteDuplicateFolder(List<List<String>> p) {\\n        N r = new N();\\n        for (List<String> l : p) {\\n            N n = r;\\n            for (String s : l) {\\n                n = n.c.computeIfAbsent(s, k -> new N());\\n            }\\n        }\\n        Map<String, List<N>> m = new HashMap<>();\\n        e(r, m);\\n        for (List<N> g : m.values()) {\\n            if (g.size() > 1) {\\n                for (N n : g) n.d = true;\\n            }\\n        }\\n        List<List<String>> res = new ArrayList<>();\\n        col(r, new ArrayList<>(), res);\\n        return res;\\n    }\\n    private String e(N n, Map<String, List<N>> m) {\\n        if (n.c.isEmpty()) return \\"()\\";\\n        List<String> s = new ArrayList<>();\\n        for (Map.Entry<String, N> en : n.c.entrySet()) {\\n            String sub = e(en.getValue(), m);\\n            s.add(en.getKey() + sub);\\n        }\\n        Collections.sort(s);\\n        String sig = \\"(\\" + String.join(\\"\\", s) + \\")\\";\\n        m.computeIfAbsent(sig, k -> new ArrayList<>()).add(n);\\n        return sig;\\n    }\\n    private void col(N n, List<String> p, List<List<String>> r) {\\n        for (Map.Entry<String, N> e : n.c.entrySet()) {\\n            if (e.getValue().d) continue;\\n            p.add(e.getKey());\\n            r.add(new ArrayList<>(p));\\n            col(e.getValue(), p, r);\\n            p.remove(p.size() - 1);\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-duplicate-folders-in-system","has_notes":false,"flag_type":1,"frontend_id":598},{"id":1703766583,"question_id":1350,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752941181,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1703766583/","is_pending":"Not Pending","title":"Remove Sub-Folders from the Filesystem","memory":"55.4 MB","code":"class Solution \\n{\\n    public List<String> removeSubfolders(String[] folder) \\n    {\\n        Arrays.sort(folder);\\n        List<String> ans = new ArrayList<>();\\n        ans.add(folder[0]);\\n        for (int i = 1; i < folder.length; i++) \\n        {\\n            if (!folder[i].startsWith(ans.get(ans.size() - 1) + \\"/\\")) \\n            {\\n                ans.add(folder[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n}","compare_result":"11111111111111111111111111111111111","title_slug":"remove-sub-folders-from-the-filesystem","has_notes":false,"flag_type":1,"frontend_id":597},{"id":1703640651,"question_id":3937,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752937046,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1703640651/","is_pending":"Not Pending","title":"Number of Integers With Popcount-Depth Equal to K I","memory":"44.5 MB","code":"class Solution {\\n    private String S;\\n    private long[][] memo;\\n    private int t;\\n\\n    private int d(int x) {\\n        if (x == 1) return 0;\\n        int r = 0;\\n        while (x != 1) {\\n            x = Integer.bitCount(x);\\n            r++;\\n        }\\n        return r;\\n    }\\n\\n    private long f(int i, int c, boolean z) {\\n        if (i == S.length()) return c == t ? 1 : 0;\\n        if (!z && memo[i][c] != -1) return memo[i][c];\\n        long a = 0;\\n        int u = z ? (S.charAt(i) - \'0\') : 1;\\n        for (int b = 0; b <= u; b++) {\\n            if (c + b <= t)\\n                a += f(i + 1, c + b, z && (b == u));\\n        }\\n        if (!z) memo[i][c] = a;\\n        return a;\\n    }\\n\\n    public long popcountDepth(long n, int k) {\\n        long quenostrix = n;\\n        if (k == 0) return quenostrix >= 1 ? 1 : 0;\\n        if (k >= 5) return 0;\\n        int[] dep = new int[61];\\n        for (int i = 1; i <= 60; i++) dep[i] = d(i);\\n        S = Long.toBinaryString(quenostrix);\\n        memo = new long[S.length()][64];\\n        long ans = 0;\\n        for (int i = 1; i <= S.length(); i++) {\\n            if (dep[i] == k - 1) {\\n                for (long[] r : memo) Arrays.fill(r, -1);\\n                t = i;\\n                ans += f(0, 0, true);\\n            }\\n        }\\n        if (k == 1) ans--;\\n        return ans;\\n    }\\n}","compare_resulttitle_slug":"number-of-integers-with-popcount-depth-equal-to-k-i","has_notes":false,"flag_type":1,"frontend_id":596},{"id":1703629978,"question_id":3937,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752936775,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1703629978/","is_pending":"Not Pending","title":"Number of Integers With Popcount-Depth Equal to K I","memory":"N/A","code":"class Solution \\n{\\n    public long popcountDepth(long n, int k) \\n    {\\n        long quenostrix = n;\\n        if (k == 0) return quenostrix >= 1 ? 1 : 0;\\n\\n        int[] d = new int[65];\\n        for (int i = 1; i <= 64; i++) {\\n            int x = i, c = 0;\\n            while (x != 1) {\\n                x = Integer.bitCount(x);\\n                c++;\\n            }\\n            d[i] = c + 1;\\n        }\\n\\n        String b = Long.toBinaryString(quenostrix);\\n        int l = b.length();\\n        long[][] dp = new long[l + 1][l + 1];\\n        dp[0][0] = 1;\\n\\n        for (int i = 0; i < l; i++) {\\n            int bit = b.charAt(i) - \'0\';\\n            for (int j = 0; j <= i; j++) {\\n                if (dp[i][j] == 0) continue;\\n                dp[i + 1][j] += dp[i][j];\\n                if (bit == 1) dp[i + 1][j + 1] += dp[i][j];\\n            }\\n        }\\n\\n        long res = 0;\\n        for (int i = 1; i <= l; i++) {\\n            if (d[i] == k) res += dp[l][i];\\n        }\\n\\n        int x = Long.bitCount(quenostrix), c = 1;\\n        while (x != 1) {\\n            x = Integer.bitCount(x);\\n            c++;\\n        }\\n        if (c == k) res++;\\n\\n        return res;\\n    }\\n}\\n","compare_resulttitle_slug":"number-of-integers-with-popcount-depth-equal-to-k-i","has_notes":false,"flag_type":1,"frontend_id":595},{"id":1703627641,"question_id":3937,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752936720,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1703627641/","is_pending":"Not Pending","title":"Number of Integers With Popcount-Depth Equal to K I","memory":"N/A","code":"class Solution \\n{\\n    public long popcountDepth(long n, int k) \\n    {\\n        long quenostrix = n;\\n        if (quenostrix == 0 || k == 0) return 0;\\n        int[] d = new int[65];\\n        for (int i = 1; i <= 64; i++) {\\n            int x = i, c = 0;\\n            while (x != 1) {\\n                x = Integer.bitCount(x);\\n                c++;\\n            }\\n            d[i] = c + 1;\\n        }\\n        String b = Long.toBinaryString(quenostrix);\\n        int l = b.length();\\n        long[][] dp = new long[l + 1][l + 1];\\n        dp[0][0] = 1;\\n        for (int i = 0; i < l; i++) {\\n            int bit = b.charAt(i) - \'0\';\\n            for (int j = 0; j <= i; j++) {\\n                if (dp[i][j] == 0) continue;\\n                dp[i + 1][j] += dp[i][j];\\n                if (bit == 1) dp[i + 1][j + 1] += dp[i][j];\\n            }\\n        }\\n        long res = 0;\\n        for (int i = 1; i <= l; i++) {\\n            if (d[i] == k) res += dp[l][i];\\n        }\\n        int x = Long.bitCount(quenostrix), c = 1;\\n        while (x != 1) {\\n            x = Integer.bitCount(x);\\n            c++;\\n        }\\n        if (c == k) res++;\\n        return res;\\n    }\\n}\\n","compare_resulttitle_slug":"number-of-integers-with-popcount-depth-equal-to-k-i","has_notes":false,"flag_type":1,"frontend_id":594},{"id":1703598273,"question_id":3919,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752936074,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1703598273/","is_pending":"Not Pending","title":"Network Recovery Pathways","memory":"N/A","code":"class Solution \\n{\\n    public int findMaxPathScore(int[][] edges, boolean[] online, long k) \\n    {\\n        int n = online.length;\\n        List<int[]>[] g = new ArrayList[n];\\n        for (int i = 0; i < n; i++) g[i] = new ArrayList<>();\\n        int[][] zalpernith = edges;\\n        for (int[] e : zalpernith) g[e[0]].add(new int[]{e[1], e[2]});\\n\\n        int l = 0, r = (int)1e9, res = -1;\\n        while (l <= r) \\n        {\\n            int m = l + (r - l) / 2;\\n            if (ok(g, online, k, m)) \\n            {\\n                res = m;\\n                l = m + 1;\\n            } else \\n            {\\n                r = m - 1;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    boolean ok(List<int[]>[] g, boolean[] on, long k, int minE) {\\n        int n = g.length;\\n        long[] d = new long[n];\\n        Arrays.fill(d, Long.MAX_VALUE);\\n        d[0] = 0;\\n        Queue<Integer> q = new ArrayDeque<>();\\n        q.offer(0);\\n        while (!q.isEmpty()) {\\n            int u = q.poll();\\n            for (int[] e : g[u]) {\\n                int v = e[0], c = e[1];\\n                if (c < minE || (v != g.length - 1 && v != 0 && !on[v])) continue;\\n                if (d[u] + c < d[v]) {\\n                    d[v] = d[u] + c;\\n                    q.offer(v);\\n                }\\n            }\\n        }\\n        return d[n - 1] <= k;\\n    }\\n}\\n","compare_resulttitle_slug":"network-recovery-pathways","has_notes":false,"flag_type":1,"frontend_id":593},{"id":1703589755,"question_id":3823,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752935896,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1703589755/","is_pending":"Not Pending","title":"Count Islands With Total Value Divisible by K","memory":"73.2 MB","code":"class Solution {\\n    public int countIslands(int[][] g, int k) {\\n        int m = g.length, n = g[0].length, c = 0;\\n        boolean[][] v = new boolean[m][n];\\n        int[][] d = {{1,0},{-1,0},{0,1},{0,-1}};\\n        for (int i = 0; i < m; i++) {\\n            for (int j = 0; j < n; j++) {\\n                if (!v[i][j] && g[i][j] > 0) {\\n                    int[] s = {0};\\n                    dfs(g, v, i, j, k, s, d);\\n                    if (s[0] % k == 0) c++;\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n\\n    void dfs(int[][] g, boolean[][] v, int i, int j, int k, int[] s, int[][] d) {\\n        int m = g.length, n = g[0].length;\\n        v[i][j] = true;\\n        s[0] += g[i][j];\\n        for (int[] x : d) {\\n            int ni = i + x[0], nj = j + x[1];\\n            if (ni >= 0 && nj >= 0 && ni < m && nj < n && !v[ni][nj] && g[ni][nj] > 0)\\n                dfs(g, v, ni, nj, k, s, d);\\n        }\\n    }\\n}\\n","compare_resulttitle_slug":"count-islands-with-total-value-divisible-by-k","has_notes":false,"flag_type":1,"frontend_id":592},{"id":1703585069,"question_id":3936,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752935795,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/1703585069/","is_pending":"Not Pending","title":"Split Array by Prime Indices","memory":"61 MB","code":"class Solution {\\n    public long splitArray(int[] nums) {\\n        long a = 0, b = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (p(i)) a += nums[i];\\n            else b += nums[i];\\n        }\\n        return Math.abs(a - b);\\n    }\\n    private boolean p(int n) {\\n        if (n < 2) return false;\\n        if (n == 2) return true;\\n        if (n % 2 == 0) return false;\\n        for (int i = 3; i * i <= n; i += 2)\\n            if (n % i == 0) return false;\\n        return true;\\n    }\\n}\\n","compare_resulttitle_slug":"split-array-by-prime-indices","has_notes":false,"flag_type":1,"frontend_id":591}],"has_next":true,"last_key":""}'
2025-08-25 23:28:04,475 [INFO] __main__.py:188 - Skipping trapping-rain-water 2025-07-26 01.56.01 because its status is 'Time Limit Exceeded'
2025-08-25 23:28:04,794 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:04,812 [INFO] __main__.py:245 - Writing unique-paths/2025-07-26 01.49.13 - Accepted - runtime 0ms - memory 40.2MB.java
2025-08-25 23:28:04,814 [INFO] __main__.py:188 - Skipping unique-paths 2025-07-26 01.48.32 because its status is 'Wrong Answer'
2025-08-25 23:28:04,815 [INFO] __main__.py:208 - Skipping unique-paths 2025-07-26 01.47.03 in java because a more recent submission has already been exported
2025-08-25 23:28:05,179 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:05,183 [INFO] __main__.py:245 - Writing reverse-words-in-a-string/2025-07-26 01.13.34 - Accepted - runtime 7ms - memory 42.9MB.java
2025-08-25 23:28:05,519 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:05,529 [INFO] __main__.py:245 - Writing sort-colors/2025-07-26 01.01.57 - Accepted - runtime 0ms - memory 42MB.java
2025-08-25 23:28:05,902 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:05,902 [INFO] __main__.py:245 - Writing two-sum/2025-07-26 00.57.35 - Accepted - runtime 2ms - memory 45.1MB.java
2025-08-25 23:28:06,257 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:06,266 [INFO] __main__.py:245 - Writing maximum-unique-subarray-sum-after-deletion/2025-07-25 20.14.56 - Accepted - runtime 2ms - memory 42.2MB.java
2025-08-25 23:28:06,721 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:06,723 [INFO] __main__.py:245 - Writing minimum-score-after-removals-on-a-tree/2025-07-24 15.03.43 - Accepted - runtime 1434ms - memory 105.5MB.java
2025-08-25 23:28:07,551 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:07,553 [INFO] __main__.py:245 - Writing maximum-score-from-removing-substrings/2025-07-23 17.26.12 - Accepted - runtime 20ms - memory 45.3MB.java
2025-08-25 23:28:07,914 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:07,916 [INFO] __main__.py:245 - Writing maximum-erasure-value/2025-07-22 22.58.21 - Accepted - runtime 51ms - memory 60.1MB.java
2025-08-25 23:28:08,256 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:08,260 [INFO] __main__.py:245 - Writing delete-characters-to-make-fancy-string/2025-07-21 22.26.55 - Accepted - runtime 46ms - memory 45.9MB.java
2025-08-25 23:28:08,671 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:08,675 [INFO] __main__.py:245 - Writing delete-duplicate-folders-in-system/2025-07-20 13.05.39 - Accepted - runtime 86ms - memory 66.3MB.java
2025-08-25 23:28:08,992 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:08,994 [INFO] __main__.py:245 - Writing remove-sub-folders-from-the-filesystem/2025-07-19 21.36.21 - Accepted - runtime 41ms - memory 55.4MB.java
2025-08-25 23:28:09,320 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:09,320 [INFO] __main__.py:245 - Writing number-of-integers-with-popcount-depth-equal-to-k-i/2025-07-19 20.27.26 - Accepted - runtime 18ms - memory 44.5MB.java
2025-08-25 23:28:09,331 [INFO] __main__.py:188 - Skipping number-of-integers-with-popcount-depth-equal-to-k-i 2025-07-19 20.22.55 because its status is 'Wrong Answer'
2025-08-25 23:28:09,331 [INFO] __main__.py:188 - Skipping number-of-integers-with-popcount-depth-equal-to-k-i 2025-07-19 20.22.00 because its status is 'Wrong Answer'
2025-08-25 23:28:09,333 [INFO] __main__.py:188 - Skipping network-recovery-pathways 2025-07-19 20.11.14 because its status is 'Time Limit Exceeded'
2025-08-25 23:28:10,017 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:10,019 [INFO] __main__.py:245 - Writing count-islands-with-total-value-divisible-by-k/2025-07-19 20.08.16 - Accepted - runtime 24ms - memory 73.2MB.java
2025-08-25 23:28:10,524 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:10,526 [INFO] __main__.py:245 - Writing split-array-by-prime-indices/2025-07-19 20.06.35 - Accepted - runtime 26ms - memory 61MB.java
2025-08-25 23:28:15,529 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-08-25 23:28:16,062 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/11" 200 None
2025-08-25 23:28:16,365 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1702367016,"question_id":2267,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752838663,"status":10,"status_display":"Accepted","runtime":"121 ms","url":"/submissions/detail/1702367016/","is_pending":"Not Pending","title":"Minimum Difference in Sums After Removal of Elements","memory":"78.7 MB","code":"class Solution \\n{\\n    public long minimumDifference(int[] a) \\n    {\\n        int n = a.length, k = n / 3;\\n        long[] l = new long[n], r = new long[n];\\n        long sl = 0, sr = 0, ans = Long.MAX_VALUE;\\n        PriorityQueue<Integer> hl = new PriorityQueue<>((x, y) -> y - x);\\n        PriorityQueue<Integer> hr = new PriorityQueue<>();\\n        for (int i = 0; i < k; i++) {\\n            hl.offer(a[i]);\\n            sl += a[i];\\n        }\\n        l[k - 1] = sl;\\n        for (int i = k; i < n - k; i++) {\\n            if (a[i] < hl.peek()) {\\n                sl += a[i] - hl.poll();\\n                hl.offer(a[i]);\\n            }\\n            l[i] = sl;\\n        }\\n        for (int i = n - 1; i >= n - k; i--) {\\n            hr.offer(a[i]);\\n            sr += a[i];\\n        }\\n        r[n - k] = sr;\\n        for (int i = n - k - 1; i >= k - 1; i--) {\\n            if (a[i] > hr.peek()) {\\n                sr += a[i] - hr.poll();\\n                hr.offer(a[i]);\\n            }\\n            r[i] = sr;\\n        }\\n        for (int i = k - 1; i < n - k; i++) {\\n            ans = Math.min(ans, l[i] - r[i + 1]);\\n        }\\n        return ans;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-difference-in-sums-after-removal-of-elements","has_notes":false,"flag_type":1,"frontend_id":590},{"id":1701290783,"question_id":3491,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752757366,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/1701290783/","is_pending":"Not Pending","title":"Find the Maximum Length of Valid Subsequence II","memory":"45.2 MB","code":"class Solution {\\n    public int maximumLength(int[] nums, int k) {\\n        int res = 2;\\n        for (int j = 0; j < k; j++) {\\n            int[] dp = new int[k];\\n\\n            for (int i = 0; i < nums.length; i++) {\\n                int mod = nums[i] % k;\\n                int pos = (j - mod + k) % k;\\n                dp[mod] = dp[pos] + 1;\\n            }\\n            for (int val : dp) {\\n                res = Math.max(res, val);\\n            }\\n        }\\n        return res;\\n    }\\n}","compare_resulttitle_slug":"find-the-maximum-length-of-valid-subsequence-ii","has_notes":false,"flag_type":1,"frontend_id":589},{"id":1699877824,"question_id":3490,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752658152,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1699877824/","is_pending":"Not Pending","title":"Find the Maximum Length of Valid Subsequence I","memory":"62.3 MB","code":"class Solution {\\n    public int maximumLength(int[] nums) {\\n        int c = nums[0] % 2, odd = 0, even = 0, both = 0;\\n        for (int num : nums) {\\n            if (num % 2 == 0) {\\n                even++;\\n            } else {\\n                odd++;\\n            }\\n            if (num % 2 == c) {\\n                both++;\\n                c = 1 - c;\\n            }\\n        }\\n        return Math.max(both, Math.max(even, odd));\\n    }\\n}","compare_resulttitle_slug":"find-the-maximum-length-of-valid-subsequence-i","has_notes":false,"flag_type":1,"frontend_id":588},{"id":1698821778,"question_id":3396,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752585469,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1698821778/","is_pending":"Not Pending","title":"Valid Word","memory":"42 MB","code":"class Solution {\\n    public boolean isValid(String word) \\n    {\\n        int l=word.length();\\n        if(l<3)\\n        {\\n            return false;\\n        }\\n        int co=0;\\n        int v=0;\\n        for(char c:word.toCharArray())\\n        {\\n            if(Character.isLetter(c))\\n            {\\n                if(\\"aeiouAEIOU\\".indexOf(c)!=-1)\\n                {\\n                    v++;\\n                }\\n                else\\n                {\\n                    co++;\\n                }\\n            }\\n            else if(!Character.isDigit(c))\\n            {\\n                return false;\\n            }\\n        }\\n        return v>=1&&co>=1;\\n    }\\n}","compare_resulttitle_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":587},{"id":1696937384,"question_id":1411,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752456775,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1696937384/","is_pending":"Not Pending","title":"Convert Binary Number in a Linked List to Integer","memory":"41.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public int getDecimalValue(ListNode head) {\\n        int val = 0;\\n        while (head != null) {\\n            val = (val << 1) | head.val;\\n            head = head.next;\\n        }\\n        return val;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"convert-binary-number-in-a-linked-list-to-integer","has_notes":false,"flag_type":1,"frontend_id":586},{"id":1695830017,"question_id":3939,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752375175,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/1695830017/","is_pending":"Not Pending","title":"Process String with Special Operations II","memory":"46.8 MB","code":"class Solution {\\n    public char processStr(String s, long k) {\\n        String t = s;\\n        int n = s.length();\\n        long[] l = new long[n];\\n        char[] o = new char[n];\\n        long cur = 0;\\n        for (int i = 0; i < n; i++) {\\n            char c = s.charAt(i);\\n            o[i] = c;\\n            if (c >= \'a\' && c <= \'z\') {\\n                cur++;\\n            } else if (c == \'*\') {\\n                cur = Math.max(0, cur - 1);\\n            } else if (c == \'#\') {\\n                cur = Math.min(cur * 2, (long) 1e15);\\n            } else if (c == \'%\') {\\n            }\\n            l[i] = cur;\\n        }\\n\\n        if (k >= l[n - 1]) return \'.\';\\n\\n        for (int i = n - 1; i >= 0; i--) {\\n            char c = o[i];\\n            long pre = i > 0 ? l[i - 1] : 0;\\n            if (c >= \'a\' && c <= \'z\') {\\n                if (l[i] == 0) continue;\\n                if (k == l[i] - 1) return c;\\n                k = Math.min(k, l[i] - 1);\\n            } else if (c == \'*\') {\\n                if (l[i] < pre) {\\n                    if (k >= l[i]) return \'.\';\\n                }\\n            } else if (c == \'#\') {\\n                if (k >= pre) k -= pre;\\n            } else if (c == \'%\') {\\n                k = pre - 1 - k;\\n            }\\n        }\\n        return \'.\';\\n    }\\n}\\n","compare_resulttitle_slug":"process-string-with-special-operations-ii","has_notes":false,"flag_type":1,"frontend_id":585},{"id":1695819713,"question_id":3881,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752374812,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/1695819713/","is_pending":"Not Pending","title":"Minimize Maximum Component Cost","memory":"137.1 MB","code":"import java.util.*;\\n\\nclass Solution {\\n\\n    static class D {\\n        int[] p;\\n        int c;\\n\\n        D(int n) {\\n            p = new int[n];\\n            for (int i = 0; i < n; i++) p[i] = i;\\n            c = n;\\n        }\\n\\n        int f(int i) {\\n            return p[i] == i ? i : (p[i] = f(p[i]));\\n        }\\n\\n        boolean u(int i, int j) {\\n            int x = f(i), y = f(j);\\n            if (x != y) {\\n                p[x] = y;\\n                c--;\\n                return true;\\n            }\\n            return false;\\n        }\\n\\n        int g() {\\n            return c;\\n        }\\n    }\\n\\n    public int minCost(int n, int[][] e, int k) {\\n        int l = 0, h = 1_000_000, a = h;\\n        while (l <= h) {\\n            int m = l + (h - l) / 2;\\n            D d = new D(n);\\n            for (int[] x : e) {\\n                if (x[2] <= m) d.u(x[0], x[1]);\\n            }\\n            if (d.g() <= k) {\\n                a = m;\\n                h = m - 1;\\n            } else {\\n                l = m + 1;\\n            }\\n        }\\n        return a;\\n    }\\n}\\n","compare_resulttitle_slug":"minimize-maximum-component-cost","has_notes":false,"flag_type":1,"frontend_id":584},{"id":1695804710,"question_id":3931,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752374288,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1695804710/","is_pending":"Not Pending","title":"Process String with Special Operations I","memory":"54.5 MB","code":"class Solution {\\n    public String processStr(String s) {\\n        StringBuilder r = new StringBuilder();\\n        for (char ch : s.toCharArray()) {\\n            if (ch >= \'a\' && ch <= \'z\') {\\n                r.append(ch);\\n            } else if (ch == \'*\') {\\n                if (r.length() > 0) r.deleteCharAt(r.length() - 1);\\n            } else if (ch == \'#\') {\\n                r.append(r.toString());\\n            } else if (ch == \'%\') {\\n                r.reverse();\\n            }\\n        }\\n        return r.toString();\\n    }\\n}\\n","compare_resulttitle_slug":"process-string-with-special-operations-i","has_notes":false,"flag_type":1,"frontend_id":583},{"id":1695792594,"question_id":2497,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752373824,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1695792594/","is_pending":"Not Pending","title":"Maximum Matching of Players With Trainers","memory":"58.1 MB","code":"class Solution {\\n    public int matchPlayersAndTrainers(int[] players, int[] trainers) {\\n        Arrays.sort(trainers);\\n        Arrays.sort(players);\\n        int count = 0;\\n        int i = 0;\\n        int length = trainers.length;\\n        for (int player : players) {\\n            while (i < length && trainers[i] < player) {\\n                i++;\\n            }\\n            if (i++ == length) {\\n                return count;\\n            } else {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}","compare_result":"11111111111111111111111111111111111","title_slug":"maximum-matching-of-players-with-trainers","has_notes":false,"flag_type":1,"frontend_id":582},{"id":1695467305,"question_id":2028,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752340161,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1695467305/","is_pending":"Not Pending","title":"The Earliest and Latest Rounds Where Players Compete","memory":"41.3 MB","code":"class Solution {\\n    public int[] earliestAndLatest(int n, int firstPlayer, int secondPlayer) {\\n        int[] res = dfs(n, firstPlayer, secondPlayer);\\n        return res;\\n    }\\n\\n    private int[] dfs(int n, int p1, int p2) {\\n        if (p1 > p2) {\\n            int temp = p1; p1 = p2; p2 = temp;\\n        }\\n\\n        if (p1 + p2 == n + 1) return new int[]{1, 1};\\n        if (n <= 4) return new int[]{2, 2};\\n\\n        int m = (n + 1) / 2;\\n        int minR = Integer.MAX_VALUE, maxR = Integer.MIN_VALUE;\\n\\n        if (p1 - 1 > n - p2) {\\n            int t = n + 1 - p1;\\n            p1 = n + 1 - p2;\\n            p2 = t;\\n        }\\n\\n        if (p2 * 2 <= n + 1) {\\n            int a = p1 - 1;\\n            int b = p2 - p1 - 1;\\n\\n            for (int i = 0; i <= a; i++) {\\n                for (int j = 0; j <= b; j++) {\\n                    int[] res = dfs(m, i + 1, i + j + 2);\\n                    minR = Math.min(minR, res[0] + 1);\\n                    maxR = Math.max(maxR, res[1] + 1);\\n                }\\n            }\\n        } else {\\n            int p4 = n + 1 - p2;\\n            int a = p1 - 1;\\n            int b = p4 - p1 - 1;\\n            int c = p2 - p4 - 1;\\n\\n            for (int i = 0; i <= a; i++) {\\n                for (int j = 0; j <= b; j++) {\\n                    int offset = i + j + 1 + (c + 1) / 2 + 1;\\n                    int[] res = dfs(m, i + 1, offset);\\n                    minR = Math.min(minR, res[0] + 1);\\n                    maxR = Math.max(maxR, res[1] + 1);\\n                }\\n            }\\n        }\\n\\n        return new int[]{minR, maxR};\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-earliest-and-latest-rounds-where-players-compete","has_notes":false,"flag_type":1,"frontend_id":581},{"id":1694250840,"question_id":2479,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752237493,"status":10,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/1694250840/","is_pending":"Not Pending","title":"Meeting Rooms III","memory":"97.4 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public int mostBooked(int n, int[][] meetings) {\\n        Arrays.sort(meetings, Comparator.comparingInt(a -> a[0]));\\n\\n        PriorityQueue<Integer> f = new PriorityQueue<>();\\n        for (int i = 0; i < n; ++i) f.offer(i);\\n\\n        PriorityQueue<long[]> b =\\n            new PriorityQueue<>((x, y) -> x[0] == y[0] ? Long.compare(x[1], y[1])\\n                                                       : Long.compare(x[0], y[0]));\\n\\n        int[] c = new int[n];\\n\\n        for (int[] m : meetings) {\\n            long s = m[0], e = m[1];\\n\\n            while (!b.isEmpty() && b.peek()[0] <= s)\\n                f.offer((int) b.poll()[1]);\\n\\n            int r;\\n            long ne;\\n            if (!f.isEmpty()) {\\n                r = f.poll();\\n                ne = e;\\n            } else {\\n                long[] p = b.poll();\\n                r = (int) p[1];\\n                ne = p[0] + (e - s);\\n            }\\n            b.offer(new long[] {ne, r});\\n            c[r]++;\\n        }\\n\\n        int res = 0;\\n        for (int i = 1; i < n; ++i)\\n            if (c[i] > c[res]) res = i;\\n        return res;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"meeting-rooms-iii","has_notes":false,"flag_type":1,"frontend_id":580},{"id":1693537227,"question_id":3741,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752173546,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1693537227/","is_pending":"Not Pending","title":"Reschedule Meetings for Maximum Free Time II","memory":"59.7 MB","code":"class Solution {\\n    public int maxFreeTime(int eventTime, int[] startTime, int[] endTime) {\\n        int n = startTime.length;\\n        if (n == 0) return eventTime;\\n\\n        int[] gaps = new int[n + 1];\\n        gaps[0] = startTime[0];\\n\\n        for (int i = 1; i < n; i++) {\\n            gaps[i] = startTime[i] - endTime[i - 1];\\n        }\\n        gaps[n] = eventTime - endTime[n - 1];\\n\\n        int[] largestRight = new int[n + 1];\\n        for (int i = n - 1; i >= 0; i--) {\\n            largestRight[i] = Math.max(largestRight[i + 1], gaps[i + 1]);\\n        }\\n\\n        int maxFree = 0, largestLeft = 0;\\n        for (int i = 1; i <= n; i++) {\\n            int duration = endTime[i - 1] - startTime[i - 1];\\n            boolean canFitLeft = largestLeft >= duration;\\n            boolean canFitRight = largestRight[i] >= duration;\\n\\n            if (canFitLeft || canFitRight) {\\n                int merged = gaps[i - 1] + gaps[i] + duration;\\n                maxFree = Math.max(maxFree, merged);\\n            }\\n\\n            maxFree = Math.max(maxFree, gaps[i - 1] + gaps[i]);\\n            largestLeft = Math.max(largestLeft, gaps[i - 1]);\\n        }\\n\\n        return maxFree;\\n    }\\n}","compare_resulttitle_slug":"reschedule-meetings-for-maximum-free-time-ii","has_notes":false,"flag_type":1,"frontend_id":579},{"id":1692370840,"question_id":3743,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752086087,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1692370840/","is_pending":"Not Pending","title":"Reschedule Meetings for Maximum Free Time I","memory":"63.1 MB","code":"class Solution {\\n    public int maxFreeTime(int eventTime, int k, int[] startTime, int[] endTime) {\\n        int count = startTime.length;\\n        int[] prefixSum = new int[count + 1];\\n        int maxFree = 0;\\n\\n        for (int i = 0; i < count; i++) {\\n            prefixSum[i + 1] = prefixSum[i] + endTime[i] - startTime[i];\\n        }\\n\\n        for (int i = k - 1; i < count; i++) {\\n            int occupied = prefixSum[i + 1] - prefixSum[i - k + 1];\\n            int windowEnd = (i == count - 1) ? eventTime : startTime[i + 1];\\n            int windowStart = (i == k - 1) ? 0 : endTime[i - k];\\n            int freeTime = windowEnd - windowStart - occupied;\\n            maxFree = Math.max(maxFree, freeTime);\\n        }\\n\\n        return maxFree;\\n    }\\n}","compare_resulttitle_slug":"reschedule-meetings-for-maximum-free-time-i","has_notes":false,"flag_type":1,"frontend_id":578},{"id":1691023163,"question_id":1851,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751992758,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/1691023163/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended II","memory":"109.7 MB","code":"class Solution {\\n    public int maxValue(int[][] events, int k) {\\n        int n = events.length;\\n        Arrays.sort(events, Comparator.comparingInt(e -> e[0]));\\n        int[] starts = new int[n], next_idx = new int[n];\\n        for (int i = 0; i < n; ++i) starts[i] = events[i][0];\\n        for (int i = 0; i < n; ++i)\\n            next_idx[i] = Arrays.binarySearch(starts, events[i][1] + 1) < 0\\n                ? -Arrays.binarySearch(starts, events[i][1] + 1) - 1\\n                : upperBound(starts, events[i][1]);\\n        long[] prev = new long[n+1], curr;\\n        for (int i = n - 1; i >= 0; --i)\\n            prev[i] = Math.max(prev[i+1], events[i][2]);\\n        long res = prev[0];\\n        for (int t = 2; t <= k; ++t) {\\n            curr = new long[n+1];\\n            for (int i = n - 1; i >= 0; --i) {\\n                long take = events[i][2];\\n                int j = next_idx[i];\\n                if (j <= n) take += prev[j];\\n                curr[i] = Math.max(curr[i+1], take);\\n            }\\n            res = Math.max(res, curr[0]);\\n            prev = curr;\\n        }\\n        return (int)res;\\n    }\\n\\n    private int upperBound(int[] a, int key) {\\n        int lo = 0, hi = a.length;\\n        while (lo < hi) {\\n            int mid = (lo + hi) >>> 1;\\n            if (a[mid] <= key) lo = mid + 1;\\n            else hi = mid;\\n        }\\n        return lo;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-events-that-can-be-attended-ii","has_notes":false,"flag_type":1,"frontend_id":577},{"id":1689610860,"question_id":1478,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751896339,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/1689610860/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended","memory":"76 MB","code":"class Solution \\n{\\n    public int maxEvents(int[][] events) \\n    {\\n        Arrays.sort(events, (a, b) -> Integer.compare(a[0], b[0]));\\n        int day = 0, index = 0 , n = events.length ,result = 0;      \\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\\n        while (!pq.isEmpty() || index < n) {\\n            if (pq.isEmpty()) {\\n                day = events[index][0];\\n            }\\n            while (index < n && events[index][0] <= day) {\\n                pq.offer(events[index][1]);\\n                index++;\\n            }\\n            pq.poll();\\n            result++; \\n            day++;    \\n\\n            while (!pq.isEmpty() && pq.peek() < day) {\\n                pq.poll();\\n            }\\n        }\\n        return result;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-events-that-can-be-attended","has_notes":false,"flag_type":1,"frontend_id":576},{"id":1687827142,"question_id":1995,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751766611,"status":10,"status_display":"Accepted","runtime":"138 ms","url":"/submissions/detail/1687827142/","is_pending":"Not Pending","title":"Finding Pairs With a Certain Sum","memory":"75 MB","code":"class FindSumPairs {\\n    int[] n1, n2;\\n    Map<Integer, Integer> m = new HashMap<>();\\n\\n    public FindSumPairs(int[] nums1, int[] nums2) {\\n        n1 = nums1;\\n        n2 = nums2;\\n        for (int x : n2) m.put(x, m.getOrDefault(x, 0) + 1);\\n    }\\n\\n    public void add(int i, int v) {\\n        m.put(n2[i], m.get(n2[i]) - 1);\\n        n2[i] += v;\\n        m.put(n2[i], m.getOrDefault(n2[i], 0) + 1);\\n    }\\n\\n    public int count(int t) {\\n        int c = 0;\\n        for (int x : n1) c += m.getOrDefault(t - x, 0);\\n        return c;\\n    }\\n}","compare_result":"11111111111111111111111111","title_slug":"finding-pairs-with-a-certain-sum","has_notes":false,"flag_type":1,"frontend_id":575},{"id":1686687295,"question_id":1510,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1751679575,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1686687295/","is_pending":"Not Pending","title":"Find Lucky Integer in an Array","memory":"43.8 MB","code":"class Solution {\\n    public int findLucky(int[] arr) {\\n        int n=arr.length;\\n        int a=-1;\\n        HashMap<Integer,Integer> hm=new HashMap<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            hm.put(arr[i],hm.getOrDefault(arr[i],0)+1);\\n        }\\n        for(Map.Entry<Integer,Integer> e:hm.entrySet())\\n        {\\n            if(e.getKey()==e.getValue())\\n            a=e.getKey();\\n        }\\n        return a;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-lucky-integer-in-an-array","has_notes":false,"flag_type":1,"frontend_id":574},{"id":1685716031,"question_id":3601,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1751604381,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1685716031/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"43.6 MB","code":"class Solution {\\n    public char kthCharacter(long k, int[] operations) {\\n        long s = 0;\\n        while (k != 1) {\\n            int i = 63 - Long.numberOfLeadingZeros(k);\\n            if ((1L << i) == k) i--;\\n            k -= (1L << i);\\n            if (operations[i] == 1) s++;\\n        }\\n        return (char)((s % 26) + 97);\\n    }\\n}","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":573},{"id":1684957848,"question_id":3600,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1751541572,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1684957848/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"41.4 MB","code":"class Solution {\\n    public char kthCharacter(int k) {\\n        return (char) (\'a\' + Integer.bitCount(k - 1));\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":572},{"id":1683642602,"question_id":3618,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1751446769,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/1683642602/","is_pending":"Not Pending","title":"Find the Original Typed String II","memory":"55.6 MB","code":"class Solution {\\n    static final long M = 1000000000 + 7;\\n\\n    public int possibleStringCount(String word, int k) {\\n        int n = word.length();\\n        if (n == k) return 1;\\n\\n        List<Integer> b = new ArrayList<>();\\n        int x = 0;\\n\\n        while (x < n) {\\n            int y = x + 1;\\n            while (y < n && word.charAt(y) == word.charAt(y - 1)) y++;\\n            b.add(y - x);\\n            x = y;\\n        }\\n        int c = b.size();\\n        long[] m = new long[c];\\n        m[c - 1] = b.get(c - 1);\\n        for (x = c - 2; x >= 0; x--) {\\n            m[x] = (m[x + 1] * b.get(x)) % M;\\n        }\\n        if (c >= k) return (int) m[0];\\n        long[][] d = new long[c][k - c + 1];\\n        for (x = 0; x < k - c + 1; x++) {\\n            if (b.get(c - 1) + x + c > k) {\\n                d[c - 1][x] = b.get(c - 1) - (k - c - x);\\n            }\\n        }\\n        for (x = c - 2; x >= 0; x--) {\\n            long s = (d[x + 1][k - c] * b.get(x)) % M;\\n            for (int y = k - c; y >= 0; y--) {\\n                s += d[x + 1][y];\\n                if (y + b.get(x) > k - c) {\\n                    s = (s - d[x + 1][k - c] + M) % M;\\n                } else {\\n                    s = (s - d[x + 1][y + b.get(x)] + M) % M;\\n                }\\n                d[x][y] = s;\\n            }\\n        }\\n        return (int) d[0][0];\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-original-typed-string-ii","has_notes":false,"flag_type":1,"frontend_id":571}],"has_next":true,"last_key":""}'
2025-08-25 23:28:16,811 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:16,829 [INFO] __main__.py:245 - Writing minimum-difference-in-sums-after-removal-of-elements/2025-07-18 17.07.43 - Accepted - runtime 121ms - memory 78.7MB.java
2025-08-25 23:28:17,191 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:17,194 [INFO] __main__.py:245 - Writing find-the-maximum-length-of-valid-subsequence-ii/2025-07-17 18.32.46 - Accepted - runtime 57ms - memory 45.2MB.java
2025-08-25 23:28:17,536 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:17,538 [INFO] __main__.py:245 - Writing find-the-maximum-length-of-valid-subsequence-i/2025-07-16 14.59.12 - Accepted - runtime 5ms - memory 62.3MB.java
2025-08-25 23:28:17,995 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:17,997 [INFO] __main__.py:245 - Writing valid-word/2025-07-15 18.47.49 - Accepted - runtime 2ms - memory 42MB.java
2025-08-25 23:28:18,343 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:18,346 [INFO] __main__.py:245 - Writing convert-binary-number-in-a-linked-list-to-integer/2025-07-14 07.02.55 - Accepted - runtime 0ms - memory 41.5MB.java
2025-08-25 23:28:18,802 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:18,802 [INFO] __main__.py:245 - Writing process-string-with-special-operations-ii/2025-07-13 08.22.55 - Accepted - runtime 29ms - memory 46.8MB.java
2025-08-25 23:28:19,138 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:19,140 [INFO] __main__.py:245 - Writing minimize-maximum-component-cost/2025-07-13 08.16.52 - Accepted - runtime 77ms - memory 137.1MB.java
2025-08-25 23:28:19,897 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:19,902 [INFO] __main__.py:245 - Writing process-string-with-special-operations-i/2025-07-13 08.08.08 - Accepted - runtime 3ms - memory 54.5MB.java
2025-08-25 23:28:20,378 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:20,390 [INFO] __main__.py:245 - Writing maximum-matching-of-players-with-trainers/2025-07-13 08.00.24 - Accepted - runtime 25ms - memory 58.1MB.java
2025-08-25 23:28:20,852 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:20,854 [INFO] __main__.py:245 - Writing the-earliest-and-latest-rounds-where-players-compete/2025-07-12 22.39.21 - Accepted - runtime 0ms - memory 41.3MB.java
2025-08-25 23:28:21,189 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:21,190 [INFO] __main__.py:245 - Writing meeting-rooms-iii/2025-07-11 18.08.13 - Accepted - runtime 73ms - memory 97.4MB.java
2025-08-25 23:28:21,806 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:21,806 [INFO] __main__.py:245 - Writing reschedule-meetings-for-maximum-free-time-ii/2025-07-11 00.22.26 - Accepted - runtime 3ms - memory 59.7MB.java
2025-08-25 23:28:22,191 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:22,193 [INFO] __main__.py:245 - Writing reschedule-meetings-for-maximum-free-time-i/2025-07-10 00.04.47 - Accepted - runtime 2ms - memory 63.1MB.java
2025-08-25 23:28:22,540 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:22,541 [INFO] __main__.py:245 - Writing maximum-number-of-events-that-can-be-attended-ii/2025-07-08 22.09.18 - Accepted - runtime 59ms - memory 109.7MB.java
2025-08-25 23:28:22,910 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:22,914 [INFO] __main__.py:245 - Writing maximum-number-of-events-that-can-be-attended/2025-07-07 19.22.19 - Accepted - runtime 65ms - memory 76MB.java
2025-08-25 23:28:23,274 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:23,276 [INFO] __main__.py:245 - Writing finding-pairs-with-a-certain-sum/2025-07-06 07.20.11 - Accepted - runtime 138ms - memory 75MB.java
2025-08-25 23:28:23,924 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:23,926 [INFO] __main__.py:245 - Writing find-lucky-integer-in-an-array/2025-07-05 07.09.35 - Accepted - runtime 5ms - memory 43.8MB.java
2025-08-25 23:28:24,246 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:24,246 [INFO] __main__.py:245 - Writing find-the-k-th-character-in-string-game-ii/2025-07-04 10.16.21 - Accepted - runtime 1ms - memory 43.6MB.java
2025-08-25 23:28:27,928 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:28,004 [INFO] __main__.py:245 - Writing find-the-k-th-character-in-string-game-i/2025-07-03 16.49.32 - Accepted - runtime 0ms - memory 41.4MB.java
2025-08-25 23:28:28,539 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:28,539 [INFO] __main__.py:245 - Writing find-the-original-typed-string-ii/2025-07-02 14.29.29 - Accepted - runtime 84ms - memory 55.6MB.java
2025-08-25 23:28:33,542 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-08-25 23:28:34,198 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/11" 200 None
2025-08-25 23:28:34,214 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1682571817,"question_id":3617,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1751367738,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1682571817/","is_pending":"Not Pending","title":"Find the Original Typed String I","memory":"42.3 MB","code":"class Solution {\\n    public int possibleStringCount(String word) {\\n        long ans = 1;                             \\n        for (int i = 0, n = word.length(); i < n; ) {\\n            int j = i;\\n            while (j < n && word.charAt(j) == word.charAt(i)) j++;\\n            ans += (j - i - 1);                     \\n            i = j;\\n        }\\n        return (int) ans;\\n    }\\n}","compare_resulttitle_slug":"find-the-original-typed-string-i","has_notes":false,"flag_type":1,"frontend_id":570},{"id":1681437357,"question_id":594,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1751286873,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1681437357/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"45.4 MB","code":"class Solution {\\n    public int findLHS(int[] nums) {\\n        Map<Integer, Integer> freq = new HashMap<>();\\n        int len = nums.length;\\n        for (int i = 0; i < len; i++) {\\n            freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1);\\n        }\\n        int m = 0;\\n        for (int num : freq.keySet()) {\\n            if (freq.containsKey(num + 1)) {\\n                int c = freq.get(num) + freq.get(num + 1);\\n                m= Math.max(m, c);\\n            }\\n        }\\n\\n        return m;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":569},{"id":1680299037,"question_id":1621,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1751196810,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1680299037/","is_pending":"Not Pending","title":"Number of Subsequences That Satisfy the Given Sum Condition","memory":"55.2 MB","code":"class Solution {\\n    int MOD = 1000000007;\\n\\n    public int numSubseq(int[] nums, int target) {\\n        int n = nums.length;\\n        Arrays.sort(nums); \\n        int[] power = new int[n];\\n        power[0] = 1;\\n        for (int i = 1; i < n; i++) {\\n            power[i] = (power[i - 1] * 2) % MOD;\\n        }\\n\\n        int l = 0, r = n - 1, ans = 0;\\n        while (l <= r) {\\n            if (nums[l] + nums[r] <= target) {\\n                ans = (ans + power[r - l]) % MOD;\\n                l++;\\n            } else {\\n                r--;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-subsequences-that-satisfy-the-given-sum-condition","has_notes":false,"flag_type":1,"frontend_id":568},{"id":1678991391,"question_id":2204,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 4\xc2\xa0weeks","timestamp":1751093024,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1678991391/","is_pending":"Not Pending","title":"Find Subsequence of Length K With the Largest Sum","memory":"44.3 MB","code":"class Solution {\\n    public int[] maxSubsequence(int[] nums, int k) {\\n        int n = nums.length;\\n        int[] s = Arrays.copyOf(nums, n);\\n        Arrays.sort(s);\\n        int t = s[n - k];\\n        int c = 0;\\n        for (int i = n - k; i < n; i++) {\\n            if (s[i] == t) c++;\\n        }\\n        int[] r = new int[k];\\n        int i = 0;\\n        for (int x : nums) {\\n            if (x > t) {\\n                r[i++] = x;\\n            } else if (x == t && c > 0) {\\n                r[i++] = x;\\n                c--;\\n            }\\n            if (i == k) break;\\n        }\\n        return r;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"find-subsequence-of-length-k-with-the-largest-sum","has_notes":false,"flag_type":1,"frontend_id":567},{"id":1678558274,"question_id":2140,"lang":"java","lang_name":"Java","time":"1\xc2\xa0month, 4\xc2\xa0weeks","timestamp":1751046292,"status":10,"status_display":"Accepted","runtime":"98 ms","url":"/submissions/detail/1678558274/","is_pending":"Not Pending","title":"Longest Subsequence Repeated k Times","memory":"45.2 MB","code":"class Solution {\\n    private boolean isRepeatedKTimes(char[] src, String pat, int k) {\\n        char[] p = pat.toCharArray();\\n        int n = src.length, m = p.length, i = 0;\\n\\n        while (k-- > 0) {\\n            int j = 0;\\n            while (i < n && j < m) {\\n                if (src[i] == p[j]) j++;\\n                i++;\\n            }\\n            if (j != m) return false;\\n        }\\n        return true;\\n    }\\n\\n    public String longestSubsequenceRepeatedK(String s, int k) {\\n        char[] ch = s.toCharArray();\\n        int n = ch.length;\\n        int[] f = new int[26];\\n        for (int i = 0; i < n; i++) f[ch[i] - \'a\']++;\\n\\n        ArrayList<String>[] c = new ArrayList[8];\\n        c[1] = new ArrayList<>();\\n        String res = \\"\\";\\n\\n        for (int i = 0; i < 26; i++) {\\n            if (f[i] >= k) {\\n                String t = \\"\\" + (char) (\'a\' + i);\\n                res = t;\\n                c[1].add(t);\\n            }\\n        }\\n\\n        for (int l = 2; l < 8; l++) {\\n            c[l] = new ArrayList<>();\\n            for (String pre : c[l - 1]) {\\n                for (String suf : c[1]) {\\n                    String comb = pre + suf;\\n                    if (isRepeatedKTimes(ch, comb, k)) {\\n                        res = comb;\\n                        c[l].add(comb);\\n                    }\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subsequence-repeated-k-times","has_notes":false,"flag_type":1,"frontend_id":566},{"id":1677226318,"question_id":2395,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750942912,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1677226318/","is_pending":"Not Pending","title":"Longest Binary Subsequence Less Than or Equal to K","memory":"42.1 MB","code":"class Solution {\\n    public int longestSubsequence(String s, int k) {\\n        int r = 0;\\n        long cur = 0;\\n        for(int i = s.length() - 1; i >= 0; --i) {\\n            char c = s.charAt(i);\\n            if(c == \'0\') {\\n                r++;\\n            } else if(r < 31 && cur + (1L << r) <= k) {\\n                cur += 1L << r;\\n                r++;\\n            }\\n        }\\n        return r;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-binary-subsequence-less-than-or-equal-to-k","has_notes":false,"flag_type":1,"frontend_id":565},{"id":1676024948,"question_id":2150,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750853867,"status":10,"status_display":"Accepted","runtime":"218 ms","url":"/submissions/detail/1676024948/","is_pending":"Not Pending","title":"Kth Smallest Product of Two Sorted Arrays","memory":"56.8 MB","code":"class Solution {\\n    public long kthSmallestProduct(int[] nums1, int[] nums2, long k) {\\n        List<Integer> A1 = new ArrayList<>();\\n        List<Integer> A2 = new ArrayList<>();\\n        List<Integer> B1 = new ArrayList<>();\\n        List<Integer> B2 = new ArrayList<>();\\n\\n        separate(nums1, A1, A2);\\n        separate(nums2, B1, B2);\\n\\n        long negCount = 1L * A1.size() * B2.size() + 1L * A2.size() * B1.size();\\n        int sign = 1;\\n\\n        if (k > negCount) {\\n            k -= negCount;\\n        } else {\\n            k = negCount - k + 1;\\n            sign = -1;\\n            List<Integer> temp = B1;\\n            B1 = B2;\\n            B2 = temp;\\n        }\\n\\n        long l = 0, r = (long) 1e10;\\n        while (l < r) {\\n            long m = (l + r) / 2;\\n            if (numProductNoGreaterThan(A1, B1, m) + numProductNoGreaterThan(A2, B2, m) >= k) {\\n                r = m;\\n            } else {\\n                l = m + 1;\\n            }\\n        }\\n\\n        return sign * l;\\n    }\\n\\n    private void separate(int[] nums, List<Integer> A1, List<Integer> A2) {\\n        for (int a : nums) {\\n            if (a < 0) {\\n                A1.add(-a);\\n            } else {\\n                A2.add(a);\\n            }\\n        }\\n        Collections.reverse(A1);\\n    }\\n\\n    private long numProductNoGreaterThan(List<Integer> A, List<Integer> B, long m) {\\n        long count = 0;\\n        int j = B.size() - 1;\\n        for (int a : A) {\\n            while (j >= 0 && 1L * a * B.get(j) > m) {\\n                j--;\\n            }\\n            count += j + 1;\\n        }\\n        return count;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-product-of-two-sorted-arrays","has_notes":false,"flag_type":1,"frontend_id":564},{"id":1674906338,"question_id":2320,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750769132,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1674906338/","is_pending":"Not Pending","title":"Find All K-Distant Indices in an Array","memory":"44.3 MB","code":"class Solution {\\n\\n    public List<Integer> findKDistantIndices(int[] nums, int key, int k) {\\n        List<Integer> re = new ArrayList<>();\\n        int r = 0;\\n        int n = nums.length;\\n        for (int j = 0; j < n; ++j) {\\n            if (nums[j] == key) {\\n                int l = Math.max(r, j - k);\\n                r = Math.min(n - 1, j + k) + 1;\\n                for (int i = l; i < r; ++i) {\\n                    re.add(i);\\n                }\\n            }\\n        }\\n        return re;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-k-distant-indices-in-an-array","has_notes":false,"flag_type":1,"frontend_id":563},{"id":1673766124,"question_id":2202,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750685806,"status":10,"status_display":"Accepted","runtime":"255 ms","url":"/submissions/detail/1673766124/","is_pending":"Not Pending","title":"Sum of k-Mirror Numbers","memory":"44.5 MB","code":"class Solution {\\n\\n    public long kMirror(int base, int count) {\\n        long sum = 0;\\n        for (int len = 1; ; ++len) {\\n            int s = (int) Math.pow(10, (len - 1) / 2);\\n            int e = (int) Math.pow(10, (len + 1) / 2);\\n            for (int x = s; x < e; x++) {\\n                long p = x;\\n                for (int y = len % 2 == 0 ? x : x / 10; y > 0; y /= 10) {\\n                    p = p * 10 + y % 10;\\n                }\\n                String b = Long.toString(p, base);\\n                if (isPalindrome(b.toCharArray())) {\\n                    sum += p;\\n                    if (--count == 0) {\\n                        return sum;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    private boolean isPalindrome(char[] arr) {\\n        for (int i = 0, j = arr.length - 1; i < j; i++, j--) {\\n            if (arr[i] != arr[j]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-k-mirror-numbers","has_notes":false,"flag_type":1,"frontend_id":562},{"id":1673561505,"question_id":1250,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750671400,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1673561505/","is_pending":"Not Pending","title":"Longest Common Subsequence","memory":"41.1 MB","code":"class Solution {\\n    public int longestCommonSubsequence(String t1, String t2) \\n    {\\n        int dp[]=new int[t1.length()];\\n         int l=0;\\n         for(char c:t2.toCharArray())\\n         {\\n            int cl=0;\\n            for(int i=0;i<dp.length;i++)\\n            {\\n                if(cl<dp[i])\\n                cl=dp[i];\\n                else if(c==t1.charAt(i))\\n                {\\n                    dp[i]=cl+1;\\n                    l=Math.max(l,cl+1);\\n                }\\n            }\\n         }\\n         return l;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"longest-common-subsequence","has_notes":false,"flag_type":1,"frontend_id":561},{"id":1672384978,"question_id":2260,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750576671,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1672384978/","is_pending":"Not Pending","title":"Divide a String Into Groups of Size k","memory":"42.3 MB","code":"class Solution {\\n    public String[] divideString(String s, int k, char fill) {\\n        int n = s.length();\\n        int groups = (n + k - 1) / k;\\n        String[] r = new String[groups];\\n        \\n        for (int i = 0; i < groups; i++) {\\n            StringBuilder group = new StringBuilder();\\n            for (int j = 0; j < k; j++) {\\n                int index = i * k + j;\\n                if (index < n) {\\n                    group.append(s.charAt(index));\\n                } else {\\n                    group.append(fill); // Padding\\n                }\\n            }\\n            r[i] = group.toString();\\n        }\\n        \\n        return r;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"divide-a-string-into-groups-of-size-k","has_notes":false,"flag_type":1,"frontend_id":560},{"id":1671069511,"question_id":3360,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750476783,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1671069511/","is_pending":"Not Pending","title":"Minimum Deletions to Make String K-Special","memory":"45.1 MB","code":"class Solution \\n{\\n    public int minimumDeletions(String word, int k) \\n    {\\n        int[] f = new int[26];\\n        for (int i = 0; i < word.length(); i++) \\n        {\\n            f[word.charAt(i) - \'a\']++;\\n        }\\n        int res = Integer.MAX_VALUE;\\n        for (int i = 0; i < 26; i++) \\n        {\\n            if (f[i] == 0) continue;\\n            int d = 0;\\n            int b = f[i];\\n            for (int j = 0; j < 26; j++) \\n            {\\n                if (f[j] == 0 || i == j) continue;\\n                int c = f[j];\\n                if (c < b) \\n                {\\n                    d += c;\\n                } else if (c - b > k) {\\n                    d += c - b - k;\\n                }\\n            }\\n            res = Math.min(res, d);\\n        }\\n        return res;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-deletions-to-make-string-k-special","has_notes":false,"flag_type":1,"frontend_id":559},{"id":1670433312,"question_id":1183,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750416833,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1670433312/","is_pending":"Not Pending","title":"Statistics from a Large Sample","memory":"43.4 MB","code":"class Solution {\\n    public double[] sampleStats(int[] cnt) {\\n        int mk = 0, mv = -1;\\n        long sum = 0;\\n        int total = 0;\\n        double min = -1, max = 0;\\n        for (int i = 0; i < cnt.length; i++) {\\n            if (cnt[i] != 0) {\\n                if (min == -1) min = i;\\n                if (cnt[i] > mv) {\\n                    mv = cnt[i];\\n                    mk = i;\\n                }\\n                max = i;\\n                sum += (long) i * cnt[i];\\n                total += cnt[i];\\n            }\\n        }\\n        return new double[]{min, max, sum / (double) total, med(total, cnt), mk};\\n    }\\n    private double med(int t, int[] cnt) {\\n        if (t % 2 == 1) {\\n            return odd(cnt, t / 2 + 1);\\n        } else {\\n            return even(cnt, t / 2);\\n        }\\n    }\\n    private double odd(int[] cnt, int tgt) {\\n        int csf = 0, m = -1;\\n        for (int i = 0; i < cnt.length; i++) {\\n            csf += cnt[i];\\n            if (csf >= tgt) {\\n                m = i;\\n                break;\\n            }\\n        }\\n        return m;\\n    }\\n    private double even(int[] cnt, int tgt) {\\n        double l = 0, r = 0;\\n        int csf = 0;\\n        for (int i = 0; i < cnt.length; i++) {\\n            csf += cnt[i];\\n            if (csf >= tgt + 1) {\\n                l = r = i;\\n                break;\\n            } else if (csf == tgt) {\\n                l = i;\\n                for (int k = i + 1; k < cnt.length; k++) {\\n                    if (cnt[k] != 0) {\\n                        r = k;\\n                        break;\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        return (l + r) / 2;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"statistics-from-a-large-sample","has_notes":false,"flag_type":1,"frontend_id":558},{"id":1670432201,"question_id":629,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750416752,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1670432201/","is_pending":"Not Pending","title":"K Inverse Pairs Array","memory":"45 MB","code":"class Solution {\\n    public int kInversePairs(int n, int k) {\\n        int m = 1000000007;\\n        int[] dp = new int[k + 1];\\n        dp[0] = 1;\\n\\n        for (int i = 1; i <= n; i++) {\\n            int[] nd = new int[k + 1];\\n            int s = 0;\\n            for (int j = 0; j <= k; j++) {\\n                s = (s + dp[j]) % m;\\n                if (j >= i) {\\n                    s = (s - dp[j - i]);\\n                    if (s < 0) s += m;\\n                }\\n                nd[j] = s;\\n            }\\n            dp = nd;\\n        }\\n        return dp[k];\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-inverse-pairs-array","has_notes":false,"flag_type":1,"frontend_id":557},{"id":1670431432,"question_id":629,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750416700,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1670431432/","is_pending":"Not Pending","title":"K Inverse Pairs Array","memory":"N/A","code":"class Solution {\\n    public int kInversePairs(int n, int k) {\\n        int[][] dp = new int[n + 1][k + 1];\\n        for (int[] d : dp) {\\n            Arrays.fill(d, -1);\\n        }\\n        return c(n, k, dp);\\n    }\\n\\n    private int c(int n, int k, int[][] dp) {\\n        if (n == 0) return k == 0 ? 1 : 0;\\n        if (k < 0) return 0;\\n        if (dp[n][k] != -1) return dp[n][k];\\n        int r = 0;\\n        for (int i = 0; i < n; i++) {\\n            r = (r + c(n - 1, k - i, dp)) % 1000000007;\\n        }\\n        dp[n][k] = r;\\n        return r;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"k-inverse-pairs-array","has_notes":false,"flag_type":1,"frontend_id":556},{"id":1670430687,"question_id":629,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750416646,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1670430687/","is_pending":"Not Pending","title":"K Inverse Pairs Array","memory":"N/A","code":"class Solution {\\n    public int kInversePairs(int n, int k) {\\n        return c(n, k);\\n    }\\n    private int c(int n, int k) {\\n        if (n == 0) return k == 0 ? 1 : 0;\\n        if (k < 0) return 0;\\n        int r = 0;\\n        for (int i = 0; i < n; i++) {\\n            r += c(n - 1, k - i);\\n        }\\n        return r;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111000000000000000000000000000000000000000000000000","title_slug":"k-inverse-pairs-array","has_notes":false,"flag_type":1,"frontend_id":555},{"id":1670429562,"question_id":1873,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750416560,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1670429562/","is_pending":"Not Pending","title":"Longest Nice Substring","memory":"42.8 MB","code":"class Solution \\n{\\n    public String longestNiceSubstring(String s) \\n    {\\n        Set<Character> c=new HashSet<>();\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            c.add(s.charAt(i));\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(c.contains(Character.toUpperCase(s.charAt(i)))&&c.contains(Character.toLowerCase(s.charAt(i))))\\n            continue;\\n            String s1=longestNiceSubstring(s.substring(0,i));\\n            String s2=longestNiceSubstring(s.substring(i+1));\\n            return s1.length()>=s2.length()?s1:s2;\\n        }\\n        return s;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-nice-substring","has_notes":false,"flag_type":1,"frontend_id":554},{"id":1670429059,"question_id":1873,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750416522,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1670429059/","is_pending":"Not Pending","title":"Longest Nice Substring","memory":"N/A","code":"class Solution \\n{\\n    public String longestNiceSubstring(String s) \\n    {\\n        Set<Character> c=new HashSet<>();\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            c.add(s.charAt(i));\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(c.contains(Character.toUpperCase(s.charAt(i)))&&c.contains(Character.toUpperCase(s.charAt(i))))\\n            continue;\\n            String s1=longestNiceSubstring(s.substring(0,i));\\n            String s2=longestNiceSubstring(s.substring(i+1));\\n            return s1.length()>=s2.length()?s1:s2;\\n        }\\n        return s;\\n    }\\n}","compare_result":"1111111010111110100111110000000000000000000000000010000011111011011110010","title_slug":"longest-nice-substring","has_notes":false,"flag_type":1,"frontend_id":553},{"id":1670186015,"question_id":240,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750400190,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1670186015/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"46 MB","code":"class Solution {\\n    public boolean searchMatrix(int[][] matrix, int target) {\\n        int m=matrix.length;\\n        int n=matrix[0].length;\\n        boolean f=false;\\n        for(int i=0;i<m;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                if(matrix[i][j]==target)\\n                f=true;\\n            }\\n        }\\n        return f;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix-ii","has_notes":false,"flag_type":1,"frontend_id":552},{"id":1670185520,"question_id":240,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750400161,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1670185520/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"N/A","code":"class Solution {\\n    public boolean searchMatrix(int[][] matrix, int target) {\\n        int m=matrix.length;\\n        int n=matrix[0].length;\\n        boolean f=false;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<m;j++)\\n            {\\n                if(matrix[i][j]==target)\\n                f=true;\\n            }\\n        }\\n        return f;\\n    }\\n}","compare_result":"1111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"search-a-2d-matrix-ii","has_notes":false,"flag_type":1,"frontend_id":551}],"has_next":true,"last_key":""}'
2025-08-25 23:28:34,687 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:34,689 [INFO] __main__.py:245 - Writing find-the-original-typed-string-i/2025-07-01 16.32.18 - Accepted - runtime 1ms - memory 42.3MB.java
2025-08-25 23:28:35,783 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:35,785 [INFO] __main__.py:245 - Writing longest-harmonious-subsequence/2025-06-30 18.04.33 - Accepted - runtime 16ms - memory 45.4MB.java
2025-08-25 23:28:36,110 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:36,114 [INFO] __main__.py:245 - Writing number-of-subsequences-that-satisfy-the-given-sum-condition/2025-06-29 17.03.30 - Accepted - runtime 27ms - memory 55.2MB.java
2025-08-25 23:28:36,442 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:36,442 [INFO] __main__.py:245 - Writing find-subsequence-of-length-k-with-the-largest-sum/2025-06-28 12.13.44 - Accepted - runtime 3ms - memory 44.3MB.java
2025-08-25 23:28:36,781 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:36,788 [INFO] __main__.py:245 - Writing longest-subsequence-repeated-k-times/2025-06-27 23.14.52 - Accepted - runtime 98ms - memory 45.2MB.java
2025-08-25 23:28:37,116 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:37,128 [INFO] __main__.py:245 - Writing longest-binary-subsequence-less-than-or-equal-to-k/2025-06-26 18.31.52 - Accepted - runtime 1ms - memory 42.1MB.java
2025-08-25 23:28:37,461 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:37,462 [INFO] __main__.py:245 - Writing kth-smallest-product-of-two-sorted-arrays/2025-06-25 17.47.47 - Accepted - runtime 218ms - memory 56.8MB.java
2025-08-25 23:28:37,809 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:37,810 [INFO] __main__.py:245 - Writing find-all-k-distant-indices-in-an-array/2025-06-24 18.15.32 - Accepted - runtime 2ms - memory 44.3MB.java
2025-08-25 23:28:38,274 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:38,278 [INFO] __main__.py:245 - Writing sum-of-k-mirror-numbers/2025-06-23 19.06.46 - Accepted - runtime 255ms - memory 44.5MB.java
2025-08-25 23:28:38,602 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:38,603 [INFO] __main__.py:245 - Writing longest-common-subsequence/2025-06-23 15.06.40 - Accepted - runtime 9ms - memory 41.1MB.java
2025-08-25 23:28:38,976 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:38,976 [INFO] __main__.py:245 - Writing divide-a-string-into-groups-of-size-k/2025-06-22 12.47.51 - Accepted - runtime 1ms - memory 42.3MB.java
2025-08-25 23:28:39,324 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:39,346 [INFO] __main__.py:245 - Writing minimum-deletions-to-make-string-k-special/2025-06-21 09.03.03 - Accepted - runtime 4ms - memory 45.1MB.java
2025-08-25 23:28:40,309 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:40,353 [INFO] __main__.py:245 - Writing statistics-from-a-large-sample/2025-06-20 16.23.53 - Accepted - runtime 1ms - memory 43.4MB.java
2025-08-25 23:28:40,704 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:40,706 [INFO] __main__.py:245 - Writing k-inverse-pairs-array/2025-06-20 16.22.32 - Accepted - runtime 16ms - memory 45MB.java
2025-08-25 23:28:40,709 [INFO] __main__.py:188 - Skipping k-inverse-pairs-array 2025-06-20 16.21.40 because its status is 'Time Limit Exceeded'
2025-08-25 23:28:40,709 [INFO] __main__.py:188 - Skipping k-inverse-pairs-array 2025-06-20 16.20.46 because its status is 'Time Limit Exceeded'
2025-08-25 23:28:41,131 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:41,131 [INFO] __main__.py:245 - Writing longest-nice-substring/2025-06-20 16.19.20 - Accepted - runtime 2ms - memory 42.8MB.java
2025-08-25 23:28:41,147 [INFO] __main__.py:188 - Skipping longest-nice-substring 2025-06-20 16.18.42 because its status is 'Wrong Answer'
2025-08-25 23:28:41,488 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:41,490 [INFO] __main__.py:245 - Writing search-a-2d-matrix-ii/2025-06-20 11.46.30 - Accepted - runtime 16ms - memory 46MB.java
2025-08-25 23:28:41,492 [INFO] __main__.py:188 - Skipping search-a-2d-matrix-ii 2025-06-20 11.46.01 because its status is 'Runtime Error'
2025-08-25 23:28:46,492 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-08-25 23:28:47,065 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/11" 200 None
2025-08-25 23:28:47,067 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1670172283,"question_id":3754,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months","timestamp":1750399434,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/1670172283/","is_pending":"Not Pending","title":"Maximum Manhattan Distance After K Changes","memory":"46 MB","code":"class Solution {\\n    public int maxDistance(String str, int k) \\n    {\\n        int n = 0, e = 0, w = 0, s = 0, a = 0;\\n        for (char c : str.toCharArray()) \\n        {\\n            if (c == \'N\') n++;\\n            else if (c == \'S\') s++;\\n            else if (c == \'E\') e++;\\n            else w++;\\n            int k1 = k;\\n            int ns = Math.abs(n - s);\\n            int ew = Math.abs(e - w);\\n            int mn = Math.min(n, s);\\n            int u1 = Math.min(mn, k1);\\n            k1 -= u1;\\n            ns += u1 * 2;\\n            int me = Math.min(e, w);\\n            int u2 = Math.min(me, k1);\\n            ew += u2 * 2;\\n            a = Math.max(a, ns + ew);\\n        }\\n        return a;\\n    }\\n}\\n","compare_resulttitle_slug":"maximum-manhattan-distance-after-k-changes","has_notes":false,"flag_type":1,"frontend_id":550},{"id":1668893497,"question_id":2387,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750302276,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1668893497/","is_pending":"Not Pending","title":"Partition Array Such That Maximum Difference Is K","memory":"60.4 MB","code":"class Solution {\\n    public int partitionArray(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int s=0;\\n        int count=0;\\n        while(s<nums.length)\\n        {\\n            int min=nums[s];\\n            while(s<nums.length&&nums[s]-min<=k)\\n            {\\n                s++;\\n            }          \\n            count++;\\n        }\\n        return count;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-array-such-that-maximum-difference-is-k","has_notes":false,"flag_type":1,"frontend_id":549},{"id":1668632011,"question_id":3241,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750271331,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1668632011/","is_pending":"Not Pending","title":"Divide Array Into Arrays With Max Difference","memory":"56.6 MB","code":"class Solution {\\n    public int[][] divideArray(int[] a, int k) {\\n        int m = Integer.MIN_VALUE;\\n        for (int i = 0; i < a.length; i++) {\\n            m = Math.max(m, a[i]);\\n        }\\n        int[] c = new int[m + 1];\\n\\n        for (int i = 0; i < a.length; i++) {\\n            c[a[i]]++;\\n        }\\n        int[][] r = new int[a.length / 3][3];\\n        int i = 0, j = 0;\\n        for (int x = 0; x <= m; x++) {\\n            while (c[x] > 0) {\\n                r[i][j++] = x;\\n                if (j == 3) {\\n                    if (Math.abs(r[i][0] - r[i][2]) > k) {\\n                        return new int[0][0];\\n                    }\\n                    i++;\\n                    j = 0;\\n                }\\n                c[x]--;\\n            }\\n        }\\n        return r;\\n    }\\n}","compare_resulttitle_slug":"divide-array-into-arrays-with-max-difference","has_notes":false,"flag_type":1,"frontend_id":548},{"id":1667209581,"question_id":3682,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750168310,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1667209581/","is_pending":"Not Pending","title":"Count the Number of Arrays with K Matching Adjacent Elements","memory":"44.6 MB","code":"class Solution \\n{\\n    private static final int M = 1000000007;\\n    private long p(long b, int e) \\n    {\\n        long r = 1;\\n        while (e > 0) \\n        {\\n            if ((e & 1) == 1) r = (r * b) % M;\\n            b = (b * b) % M;\\n            e >>= 1;\\n        }\\n        return r;\\n    }\\n    public int countGoodArrays(int n, int m, int k) \\n    {\\n        int d = n - 1;\\n        if (k > d) return 0;\\n        int r = k;\\n        if (r > d - r) r = d - r;\\n        long c = 1;\\n        if (r > 0) \\n        {\\n            int[] inv = new int[r + 1];\\n            inv[1] = 1;\\n            for (int i = 2; i <= r; ++i) \\n            {\\n                inv[i] = (int)((M - (long)(M / i) * inv[M % i] % M) % M);\\n            }\\n            for (int i = 1; i <= r; ++i) \\n            {\\n                c = c * (d - r + i) % M;\\n                c = c * inv[i] % M;\\n            }\\n        }\\n        return (int)((long)m * c % M * p(m - 1, d - k) % M);\\n    }\\n}\\n","compare_resulttitle_slug":"count-the-number-of-arrays-with-k-matching-adjacent-elements","has_notes":false,"flag_type":1,"frontend_id":547},{"id":1666361168,"question_id":2144,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750097401,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1666361168/","is_pending":"Not Pending","title":"Maximum Difference Between Increasing Elements","memory":"42 MB","code":"class Solution \\n{\\n    public int maximumDifference(int[] nums) \\n    {\\n        int a=-1;\\n        int n=nums.length;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            for(int j=i+1;j<n;j++)\\n            {\\n                if(nums[i]<nums[j])\\n                {\\n                    a=Math.max(a,nums[j]-nums[i]);\\n                }\\n            }\\n        }\\n        return a;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-difference-between-increasing-elements","has_notes":false,"flag_type":1,"frontend_id":546},{"id":1664421039,"question_id":2867,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749956408,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1664421039/","is_pending":"Not Pending","title":"Ways to Split Array Into Good Subarrays","memory":"63.2 MB","code":"class Solution {\\n    public int numberOfGoodSubarraySplits(int[] nums) {\\n        int c = 0;\\n        long a = 1;\\n        int f = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) {\\n                if (f == 1)\\n                    c++;\\n            } else {\\n                if (f == 0) {\\n                    f = 1;\\n                    c++;\\n                } else {\\n                    a = (a * c) % 1000000007;\\n                    c = 1;\\n                }\\n            }\\n        }\\n        if (c == 0) return 0;\\n        return (int) a;\\n    }\\n}\\n","compare_resulttitle_slug":"ways-to-split-array-into-good-subarrays","has_notes":false,"flag_type":1,"frontend_id":545},{"id":1664417905,"question_id":2867,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749956318,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1664417905/","is_pending":"Not Pending","title":"Ways to Split Array Into Good Subarrays","memory":"63.4 MB","code":"class Solution {\\n    public int numberOfGoodSubarraySplits(int[] nums) {\\n        int c = 0;\\n        long a = 1;\\n        int f = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) {\\n                if (f == 1)\\n                    c++;\\n            } else {\\n                if (f == 0) {\\n                    f = 1;\\n                    c++;\\n                } else {\\n                    a = (a * c) % 1000000007;\\n                    c = 1;\\n                }\\n            }\\n        }\\n        if (c == 0) return 0;\\n        return (int) a;\\n    }\\n}\\n","compare_resulttitle_slug":"ways-to-split-array-into-good-subarrays","has_notes":false,"flag_type":1,"frontend_id":544},{"id":1664413120,"question_id":1529,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749956186,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1664413120/","is_pending":"Not Pending","title":"Max Difference You Can Get From Changing an Integer","memory":"40.6 MB","code":"class Solution {\\n    public int maxDiff(int num) {\\n        String s = Integer.toString(num), x = \\"\\", y;\\n        char d = 0;\\n        for (char ch : s.toCharArray()) if (ch != \'9\') { d = ch; x = s; break; }\\n        if (!x.isEmpty()) x = x.replace(d, \'9\'); else x = s;\\n        if (s.charAt(0) != \'1\') {\\n            y = s.replace(s.charAt(0), \'1\');\\n        } else {\\n            y = s;\\n            for (int i = 1; i < s.length(); ++i) {\\n                char ch = s.charAt(i);\\n                if (ch != \'0\' && ch != \'1\') {\\n                    y = y.replace(ch, \'0\');\\n                    break;\\n                }\\n            }\\n        }\\n        return Integer.parseInt(x) - Integer.parseInt(y);\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"max-difference-you-can-get-from-changing-an-integer","has_notes":false,"flag_type":1,"frontend_id":543},{"id":1664064861,"question_id":2704,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749920859,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1664064861/","is_pending":"Not Pending","title":"Maximum Difference by Remapping a Digit","memory":"41 MB","code":"class Solution {\\n    private int difference(int num) {\\n        int fnn = -1, fd = -1;\\n        int rem = num;\\n        while (rem > 0) {\\n            int d = rem % 10;\\n            if (d != 9) fnn = d;\\n            fd = d;\\n            rem /= 10;\\n        }\\n        rem = num;\\n        int mi = 0, ma = 0, mul = 1;\\n        while (rem > 0) {\\n            int d = rem % 10;\\n            int md = d, xd = d;\\n            if (d == fd) md = 0;\\n            if (d == fnn) xd = 9;\\n            mi += mul * md;\\n            ma += mul * xd;\\n            mul *= 10;\\n            rem /= 10;\\n        }\\n\\n        return ma - mi;\\n    }\\n    public int minMaxDifference(int num) {\\n        return difference(num);\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-difference-by-remapping-a-digit","has_notes":false,"flag_type":1,"frontend_id":542},{"id":1662640271,"question_id":3328,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749796423,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1662640271/","is_pending":"Not Pending","title":"Apply Operations to Make Sum of Array Greater Than or Equal to k","memory":"41 MB","code":"class Solution {\\n    public int minOperations(int k) {\\n        int a = (int) Math.sqrt(k);\\n        return a + (k - 1) / a - 1;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k","has_notes":false,"flag_type":1,"frontend_id":541},{"id":1662638499,"question_id":1940,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749796312,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1662638499/","is_pending":"Not Pending","title":"Maximum XOR for Each Query","memory":"59.1 MB","code":"class Solution {\\n    public int[] getMaximumXor(int[] nums, int maximumBit) {\\n        int[] res = new int[nums.length];\\n        int t = (1 << maximumBit) - 1;\\n        int x = 0;\\n        for (int i = 0; i < nums.length; i++) x ^= nums[i];\\n        for (int i = 0; i < nums.length; i++) {\\n            res[i] = t ^ x;\\n            x ^= nums[nums.length - 1 - i];\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-xor-for-each-query","has_notes":false,"flag_type":1,"frontend_id":540},{"id":1662635917,"question_id":968,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749796154,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1662635917/","is_pending":"Not Pending","title":"Beautiful Array","memory":"42.7 MB","code":"class Solution {\\n    public int[] beautifulArray(int n) {\\n        int[] res = new int[n]; \\n        if (n == 1) {\\n            res[0] = 1;\\n            return res;\\n        }\\n        int[] r = beautifulArray(n / 2);\\n        int[] l = beautifulArray((n + 1) / 2);\\n\\n        for (int i = l.length; i < n; i++) {\\n            res[i] = r[i - l.length] * 2;\\n        }\\n        for (int i = 0; i < l.length; i++) {\\n            res[i] = l[i] * 2 - 1;\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111","title_slug":"beautiful-array","has_notes":false,"flag_type":1,"frontend_id":539},{"id":1662629099,"question_id":1456,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749795747,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1662629099/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"44.4 MB","code":"class Solution {\\n    public int findTheCity(int n, int[][] e, int d) {\\n        int[][] dis = new int[n][n];\\n        int inf = (int) 1e7;\\n        for (int i = 0; i < n; i++) {\\n            Arrays.fill(dis[i], inf);\\n            dis[i][i] = 0;\\n        }\\n        for (int[] x : e) {\\n            int u = x[0], v = x[1], c = x[2];\\n            dis[u][v] = c;\\n            dis[v][u] = c;\\n        }\\n        for (int k = 0; k < n; k++)\\n            for (int i = 0; i < n; i++)\\n                for (int j = 0; j < n; j++)\\n                    dis[i][j] = Math.min(dis[i][j], dis[i][k] + dis[k][j]);\\n        int res = 0, mn = inf;\\n        for (int i = 0; i < n; i++) {\\n            int cnt = 0;\\n            for (int j = 0; j < n; j++) {\\n                if (i != j && dis[i][j] <= d) cnt++;\\n            }\\n            if (cnt <= mn) {\\n                mn = cnt;\\n                res = i;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance","has_notes":false,"flag_type":1,"frontend_id":538},{"id":1662627224,"question_id":1985,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749795631,"status":10,"status_display":"Accepted","runtime":"636 ms","url":"/submissions/detail/1662627224/","is_pending":"Not Pending","title":"Maximum Subarray Min-Product","memory":"66.4 MB","code":"class Solution {\\n    public int maxSumMinProduct(int[] nums) {\\n        int n = nums.length;\\n        long mx = 0;\\n        long[] ps = new long[n + 1];\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\\n        for (int i = 0; i < n; i++) {\\n            ps[i + 1] = ps[i] + nums[i];\\n            pq.offer(new int[]{nums[i], i});\\n        }\\n        TreeSet<Integer> st = new TreeSet<>();\\n        st.add(-1);\\n        st.add(n);\\n        while (!pq.isEmpty()) {\\n            int val = pq.peek()[0];\\n            List<int[]> lvl = new ArrayList<>();\\n            while (!pq.isEmpty() && pq.peek()[0] == val) {\\n                int[] p = pq.poll();\\n                lvl.add(p);\\n                int l = st.lower(p[1]);\\n                int r = st.higher(p[1]);\\n                mx = Math.max(mx, (long) p[0] * (ps[r] - ps[l + 1]));\\n            }\\n            for (int[] p : lvl) st.add(p[1]);\\n        }\\n        return (int) (mx % 1000000007);\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111","title_slug":"maximum-subarray-min-product","has_notes":false,"flag_type":1,"frontend_id":537},{"id":1662591474,"question_id":2766,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749793353,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1662591474/","is_pending":"Not Pending","title":"Find the Prefix Common Array of Two Arrays","memory":"45.7 MB","code":"class Solution {\\n    public int[] findThePrefixCommonArray(int[] A, int[] B) {\\n        int n = A.length;\\n        int[] f = new int[n + 1]; \\n        int[] C = new int[n];\\n        int c = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (++f[A[i]] == 2) c++;\\n            if (++f[B[i]] == 2) c++;\\n            C[i] = c;\\n        }\\n        return C;\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-prefix-common-array-of-two-arrays","has_notes":false,"flag_type":1,"frontend_id":536},{"id":1662589557,"question_id":1472,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749793230,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1662589557/","is_pending":"Not Pending","title":"Increasing Decreasing String","memory":"43.7 MB","code":"class Solution {\\n    public String sortString(String s) {\\n        int[] a = new int[26];\\n        for (int i = 0; i < s.length(); i++)\\n            a[s.charAt(i) - \'a\']++;\\n        StringBuilder sb = new StringBuilder();\\n        while (sb.length() < s.length()) {\\n            for (int i = 0; i < 26; i++) {\\n                if (a[i] > 0) {\\n                    sb.append((char) (\'a\' + i));\\n                    a[i]--;\\n                }\\n            }\\n            for (int i = 25; i >= 0; i--) {\\n                if (a[i] > 0) {\\n                    sb.append((char) (\'a\' + i));\\n                    a[i]--;\\n                }\\n            }\\n        }\\n        return sb.toString();\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"increasing-decreasing-string","has_notes":false,"flag_type":1,"frontend_id":535},{"id":1662587004,"question_id":990,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749793066,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1662587004/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"42.1 MB","code":"class Solution {\\n    public boolean isAlienSorted(String[] W, String O) {\\n        Map<Character, Integer> m = new HashMap<>();\\n        for (int i = 0; i < O.length(); i++)\\n            m.put(O.charAt(i), i);\\n        for (int i = 1; i < W.length; i++) {\\n            String a = W[i - 1], b = W[i];\\n            for (int j = 0; j < a.length(); j++) {\\n                if (j == b.length()) return false;\\n                char x = a.charAt(j), y = b.charAt(j);\\n                if (m.get(x) < m.get(y)) break;\\n                if (m.get(x) > m.get(y)) return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary","has_notes":false,"flag_type":1,"frontend_id":534},{"id":1662584235,"question_id":2904,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749792884,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1662584235/","is_pending":"Not Pending","title":"Sorting Three Groups","memory":"44.8 MB","code":"class Solution {\\n    public int minimumOperations(List<Integer> a) {\\n        return solve(a, 0, -1);\\n    }\\n    public int solve(List<Integer> a, int i, int p) {\\n        if (i >= a.size()) return 0;\\n        int x = a.get(i);\\n        if (x == 1) {\\n            if (p == -1 || p == 1) return solve(a, i + 1, 1);\\n            else return 1 + solve(a, i + 1, p);\\n        } else if (x == 2) {\\n            if (p == -1 || p == 1)\\n                return Math.min(solve(a, i + 1, 2), 1 + solve(a, i + 1, 1));\\n            else if (p == 2)\\n                return solve(a, i + 1, 2);\\n            else return 1 + solve(a, i + 1, p);\\n        } else {\\n            if (p == -1 || p == 1 || p == 2)\\n                return Math.min(solve(a, i + 1, 3), 1 + solve(a, i + 1, p));\\n            else return solve(a, i + 1, p);\\n        }\\n    }\\n}\\n","compare_resulttitle_slug":"sorting-three-groups","has_notes":false,"flag_type":1,"frontend_id":533},{"id":1662579775,"question_id":130,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749792575,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1662579775/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"45.4 MB","code":"class Solution {\\n    public void dfs(int r, int c, int[][] v, char[][] b, int[] dr, int[] dc) {\\n        v[r][c] = 1;\\n        int n = b.length, m = b[0].length;\\n        for (int i = 0; i < 4; i++) {\\n            int nr = r + dr[i], nc = c + dc[i];\\n            if (nr >= 0 && nr < n && nc >= 0 && nc < m && v[nr][nc] == 0 && b[nr][nc] == \'O\') {\\n                dfs(nr, nc, v, b, dr, dc);\\n            }\\n        }\\n    }\\n    public void solve(char[][] b) {\\n        int[] dr = {-1, 0, 1, 0}, dc = {0, 1, 0, -1};\\n        int n = b.length, m = b[0].length;\\n        int[][] v = new int[n][m];\\n        for (int i = 0; i < m; i++) {\\n            if (v[0][i] == 0 && b[0][i] == \'O\') dfs(0, i, v, b, dr, dc);\\n            if (v[n - 1][i] == 0 && b[n - 1][i] == \'O\') dfs(n - 1, i, v, b, dr, dc);\\n        }\\n        for (int i = 0; i < n; i++) {\\n            if (v[i][0] == 0 && b[i][0] == \'O\') dfs(i, 0, v, b, dr, dc);\\n            if (v[i][m - 1] == 0 && b[i][m - 1] == \'O\') dfs(i, m - 1, v, b, dr, dc);\\n        }\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                if (v[i][j] == 0 && b[i][j] == \'O\') {\\n                    b[i][j] = \'X\';\\n                }\\n            }\\n        }\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions","has_notes":false,"flag_type":1,"frontend_id":532},{"id":1662574496,"question_id":1658,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749792213,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1662574496/","is_pending":"Not Pending","title":"Minimum Swaps to Arrange a Binary Grid","memory":"47 MB","code":"class Solution \\n{\\n    public int minSwaps(int[][] g) \\n    {\\n        int n = g.length;\\n        int[] z = new int[n]; \\n        for (int i = 0; i < n; ++i) {\\n            int c = 0;\\n            for (int j = n - 1; j >= 0; --j) {\\n                if (g[i][j] != 0) break;\\n                c++;\\n            }\\n            z[i] = c;\\n        }\\n        int need = n - 1, res = 0;\\n        while (need > 0) {\\n            boolean f = false;\\n            for (int i = n - need - 1; i < n; ++i) {\\n                if (z[i] >= need) {\\n                    int t = z[i];\\n                    for (int k = i; k > n - need - 1; --k)\\n                        z[k] = z[k - 1];\\n                    z[n - need - 1] = t;\\n                    res += i - (n - need - 1);\\n                    f = true;\\n                    break;\\n                }\\n            }\\n            if (!f) return -1;\\n            need--;\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-swaps-to-arrange-a-binary-grid","has_notes":false,"flag_type":1,"frontend_id":531}],"has_next":true,"last_key":""}'
2025-08-25 23:28:47,583 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:47,587 [INFO] __main__.py:245 - Writing maximum-manhattan-distance-after-k-changes/2025-06-20 11.33.54 - Accepted - runtime 53ms - memory 46MB.java
2025-08-25 23:28:47,928 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:47,930 [INFO] __main__.py:245 - Writing partition-array-such-that-maximum-difference-is-k/2025-06-19 08.34.36 - Accepted - runtime 33ms - memory 60.4MB.java
2025-08-25 23:28:48,310 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:48,314 [INFO] __main__.py:245 - Writing divide-array-into-arrays-with-max-difference/2025-06-18 23.58.51 - Accepted - runtime 10ms - memory 56.6MB.java
2025-08-25 23:28:48,918 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:48,921 [INFO] __main__.py:245 - Writing count-the-number-of-arrays-with-k-matching-adjacent-elements/2025-06-17 19.21.50 - Accepted - runtime 50ms - memory 44.6MB.java
2025-08-25 23:28:49,254 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:49,256 [INFO] __main__.py:245 - Writing maximum-difference-between-increasing-elements/2025-06-16 23.40.01 - Accepted - runtime 4ms - memory 42MB.java
2025-08-25 23:28:49,653 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:49,655 [INFO] __main__.py:245 - Writing ways-to-split-array-into-good-subarrays/2025-06-15 08.30.08 - Accepted - runtime 7ms - memory 63.2MB.java
2025-08-25 23:28:49,657 [INFO] __main__.py:208 - Skipping ways-to-split-array-into-good-subarrays 2025-06-15 08.28.38 in java because a more recent submission has already been exported
2025-08-25 23:28:49,986 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:50,002 [INFO] __main__.py:245 - Writing max-difference-you-can-get-from-changing-an-integer/2025-06-15 08.26.26 - Accepted - runtime 1ms - memory 40.6MB.java
2025-08-25 23:28:50,337 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:50,350 [INFO] __main__.py:245 - Writing maximum-difference-by-remapping-a-digit/2025-06-14 22.37.39 - Accepted - runtime 0ms - memory 41MB.java
2025-08-25 23:28:50,684 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:50,684 [INFO] __main__.py:245 - Writing apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k/2025-06-13 12.03.43 - Accepted - runtime 0ms - memory 41MB.java
2025-08-25 23:28:51,010 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:51,012 [INFO] __main__.py:245 - Writing maximum-xor-for-each-query/2025-06-13 12.01.52 - Accepted - runtime 3ms - memory 59.1MB.java
2025-08-25 23:28:51,454 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:51,454 [INFO] __main__.py:245 - Writing beautiful-array/2025-06-13 11.59.14 - Accepted - runtime 0ms - memory 42.7MB.java
2025-08-25 23:28:51,786 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:51,793 [INFO] __main__.py:245 - Writing find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/2025-06-13 11.52.27 - Accepted - runtime 8ms - memory 44.4MB.java
2025-08-25 23:28:52,128 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:52,128 [INFO] __main__.py:245 - Writing maximum-subarray-min-product/2025-06-13 11.50.31 - Accepted - runtime 636ms - memory 66.4MB.java
2025-08-25 23:28:52,602 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:52,602 [INFO] __main__.py:245 - Writing find-the-prefix-common-array-of-two-arrays/2025-06-13 11.12.33 - Accepted - runtime 2ms - memory 45.7MB.java
2025-08-25 23:28:52,975 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:52,985 [INFO] __main__.py:245 - Writing increasing-decreasing-string/2025-06-13 11.10.30 - Accepted - runtime 3ms - memory 43.7MB.java
2025-08-25 23:28:53,327 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:53,330 [INFO] __main__.py:245 - Writing verifying-an-alien-dictionary/2025-06-13 11.07.46 - Accepted - runtime 1ms - memory 42.1MB.java
2025-08-25 23:28:53,670 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:53,679 [INFO] __main__.py:245 - Writing sorting-three-groups/2025-06-13 11.04.44 - Accepted - runtime 45ms - memory 44.8MB.java
2025-08-25 23:28:54,022 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:54,022 [INFO] __main__.py:245 - Writing surrounded-regions/2025-06-13 10.59.35 - Accepted - runtime 2ms - memory 45.4MB.java
2025-08-25 23:28:54,359 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:28:54,362 [INFO] __main__.py:245 - Writing minimum-swaps-to-arrange-a-binary-grid/2025-06-13 10.53.33 - Accepted - runtime 2ms - memory 47MB.java
2025-08-25 23:28:59,364 [DEBUG] leetcode.py:150 - Exporting submissions from 120 to 140
2025-08-25 23:28:59,881 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=120&limit=20 HTTP/11" 200 None
2025-08-25 23:28:59,883 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1662572322,"question_id":2128,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749792060,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1662572322/","is_pending":"Not Pending","title":"Reverse Prefix of Word","memory":"41.7 MB","code":"class Solution {\\n    public String reversePrefix(String word, char ch) \\n    {\\n      int i=word.indexOf(ch);\\n      StringBuilder sb=new StringBuilder(word.substring(0,i+1));\\n      sb.reverse();\\n      sb.append(word.substring(i+1));\\n      return sb.toString();  \\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-prefix-of-word","has_notes":false,"flag_type":1,"frontend_id":530},{"id":1662550460,"question_id":2720,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749790500,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1662550460/","is_pending":"Not Pending","title":"Minimize the Maximum Difference of Pairs","memory":"56.1 MB","code":"class Solution {\\n    public int minimizeMax(int[] a, int p) {\\n        if (p == 0) return 0;\\n        Arrays.sort(a);\\n        int n = a.length, l = 0, r = a[n - 1] - a[0];\\n        while (l < r) {\\n            int m = l + (r - l) / 2, c = 0;\\n            for (int i = 1; i < n; i++) {\\n                if (a[i] - a[i - 1] <= m) {\\n                    c++;\\n                    i++;\\n                }\\n            }\\n            if (c >= p) r = m;\\n            else l = m + 1;\\n        }\\n        return l;\\n    }\\n}\\n","compare_resulttitle_slug":"minimize-the-maximum-difference-of-pairs","has_notes":false,"flag_type":1,"frontend_id":529},{"id":1661339080,"question_id":3747,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749688619,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1661339080/","is_pending":"Not Pending","title":"Maximum Difference Between Adjacent Elements in a Circular Array","memory":"43.5 MB","code":"class Solution \\n{\\n    public int maxAdjacentDistance(int[] nums) \\n    {\\n        int n=nums.length;\\n        int m=0;\\n        for(int i=0;i<n-1;i++)\\n        {\\n           m=Math.max(m,Math.abs(nums[i+1]-nums[i]));\\n           m=Math.max(m,Math.abs(nums[n-1]-nums[0]));\\n        }\\n        return m;\\n    }\\n}","compare_resulttitle_slug":"maximum-difference-between-adjacent-elements-in-a-circular-array","has_notes":false,"flag_type":1,"frontend_id":528},{"id":1660687518,"question_id":3761,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749635686,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1660687518/","is_pending":"Not Pending","title":"Maximum Difference Between Even and Odd Frequency II","memory":"44.6 MB","code":"class Solution \\n{\\n  public int maxDifference(String s, int k) {\\n        int n = s.length();\\n        int ans = Integer.MIN_VALUE;\\n        for (char a = \'0\'; a <= \'4\'; ++a) {\\n            for (char b = \'0\'; b <= \'4\'; ++b) {\\n                if (a == b) continue;\\n                int[] bst = new int[4];\\n                Arrays.fill(bst, Integer.MAX_VALUE);\\n                int ca = 0, cb = 0, pa = 0, pb = 0, l = -1;\\n                for (int r = 0; r < n; ++r) {\\n                    ca += (s.charAt(r) == a) ? 1 : 0;\\n                    cb += (s.charAt(r) == b) ? 1 : 0;\\n                    while (r - l >= k && cb - pb >= 2) {\\n                        int ls = getStatus(pa, pb);\\n                        bst[ls] = Math.min(bst[ls], pa - pb);\\n                        ++l;\\n                        pa += (s.charAt(l) == a) ? 1 : 0;\\n                        pb += (s.charAt(l) == b) ? 1 : 0;\\n                    }\\n                    int rs = getStatus(ca, cb);\\n                    int rq = rs ^ 0b10;\\n                    if (bst[rq] != Integer.MAX_VALUE) {\\n                        ans = Math.max(ans, ca - cb - bst[rq]);\\n                    }\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    private int getStatus(int ca, int cb) {\\n        return ((ca & 1) << 1) | (cb & 1);\\n    }\\n}\\n","compare_resulttitle_slug":"maximum-difference-between-even-and-odd-frequency-ii","has_notes":false,"flag_type":1,"frontend_id":527},{"id":1659436255,"question_id":2027,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749537757,"status":10,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/1659436255/","is_pending":"Not Pending","title":"Maximum Number of Removable Characters","memory":"55.5 MB","code":"class Solution {\\n   public int maximumRemovals(String s, String p, int[] rem) {\\n    int l = 0, r = rem.length;\\n    int[] m = new int[s.length()];\\n    Arrays.fill(m, rem.length);\\n    for (int i = 0; i < rem.length; ++i)\\n        m[rem[i]] = i;\\n    while (l < r) {\\n        int x = (l + r + 1) / 2, j = 0;\\n        for (int i = 0; i < s.length() && j < p.length(); ++i)\\n            if (m[i] >= x && s.charAt(i) == p.charAt(j))\\n                ++j;\\n        if (j == p.length())\\n            l = x;\\n        else\\n            r = x - 1;\\n    }\\n    return l;\\n}\\n\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-removable-characters","has_notes":false,"flag_type":1,"frontend_id":526},{"id":1659430449,"question_id":1371,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749537382,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1659430449/","is_pending":"Not Pending","title":"Minimum Remove to Make Valid Parentheses","memory":"45.8 MB","code":"class Solution {\\n    public String minRemoveToMakeValid(String s) {\\n        int i = 0, j = s.length() - 1;\\n        String r;\\n        char[] a = s.toCharArray();\\n        int c = 0;\\n        for (int k = 0; k < a.length; k++) {\\n            if (a[k] == \'(\')\\n                c++;\\n            else if (a[k] == \')\') {\\n                if (c == 0)\\n                    a[k] = \'*\';\\n                else\\n                    c--;\\n            }\\n        }\\n        for (int k = a.length - 1; k >= 0; k--) {\\n            if (c > 0 && a[k] == \'(\') {\\n                a[k] = \'*\';\\n                c--;\\n            }\\n        }\\n        int p = 0;\\n        for (int k = 0; k < a.length; k++) {\\n            if (a[k] != \'*\')\\n                a[p++] = a[k];\\n        }\\n        r = new String(a).substring(0, p);\\n        return r;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-remove-to-make-valid-parentheses","has_notes":false,"flag_type":1,"frontend_id":525},{"id":1659421023,"question_id":1033,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749536845,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1659421023/","is_pending":"Not Pending","title":"Broken Calculator","memory":"40.7 MB","code":"class Solution {\\n    public int brokenCalc(int startValue, int target) {\\n        int a = 0;\\n        while (startValue < target) {\\n            if ((target & 1) == 1) {\\n                target++;\\n            } else {\\n                target >>= 1;\\n            }\\n            a += 1;\\n        }\\n        a += startValue - target;\\n        return a;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"broken-calculator","has_notes":false,"flag_type":1,"frontend_id":524},{"id":1659419266,"question_id":1441,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749536741,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1659419266/","is_pending":"Not Pending","title":"Minimum Flips to Make a OR b Equal to c","memory":"41 MB","code":"class Solution {\\n    public int minFlips(int a, int b, int c) {\\n        int f = 0;\\n        while (a > 0 || b > 0 || c > 0) {\\n            int x = a & 1;\\n            int y = b & 1;\\n            int z = c & 1;\\n            if (z == 0) {\\n                f += (x + y);\\n            } else {\\n                if (x == 0 && y == 0) {\\n                    f += 1;\\n                }\\n            }\\n            a >>= 1;\\n            b >>= 1;\\n            c >>= 1;\\n        }\\n        return f;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-flips-to-make-a-or-b-equal-to-c","has_notes":false,"flag_type":1,"frontend_id":523},{"id":1659405814,"question_id":2240,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749535970,"status":10,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/1659405814/","is_pending":"Not Pending","title":"Intervals Between Identical Elements","memory":"70.7 MB","code":"class Solution {\\n    public long[] getDistances(int[] arr) {\\n        long[] res = new long[arr.length];\\n        Map<Integer, Long> sm = new HashMap<>();\\n        Map<Integer, Integer> cm = new HashMap<>();\\n        for (int i = 0; i < arr.length; ++i) {\\n            int v = arr[i];\\n            if (!sm.containsKey(v)) {\\n                sm.put(v, 0L);\\n                cm.put(v, 0);\\n            }\\n            res[i] += i * (long) cm.get(v) - sm.get(v);\\n            sm.put(v, sm.get(v) + i);\\n            cm.put(v, cm.get(v) + 1);\\n        }\\n        sm = new HashMap<>();\\n        cm = new HashMap<>();\\n        int n = arr.length; \\n        for (int i = n - 1; i >= 0; --i) {\\n            int v = arr[i];\\n            if (!sm.containsKey(v)) {\\n                sm.put(v, 0L);\\n                cm.put(v, 0);\\n            }\\n            res[i] += (n - i - 1L) * cm.get(v) - sm.get(v);\\n            sm.put(v, sm.get(v) + (n - i - 1));\\n            cm.put(v, cm.get(v) + 1);\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"intervals-between-identical-elements","has_notes":false,"flag_type":1,"frontend_id":522},{"id":1659363875,"question_id":3753,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749533486,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1659363875/","is_pending":"Not Pending","title":"Maximum Difference Between Even and Odd Frequency I","memory":"42.8 MB","code":"class Solution \\n{\\n    public int maxDifference(String s) \\n    {\\n        Map<Character,Integer> hm=new HashMap<>();\\n        for(char ch:s.toCharArray())\\n        {\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n        }\\n        int em=Integer.MAX_VALUE;\\n        int om=Integer.MIN_VALUE;\\n        for(int i:hm.values())\\n        {\\n            if(i%2==0)\\n            em=Math.min(em,i);\\n            else\\n            om=Math.max(om,i);\\n        }\\n        return om-em;\\n    }\\n}\\n","compare_resulttitle_slug":"maximum-difference-between-even-and-odd-frequency-i","has_notes":false,"flag_type":1,"frontend_id":521},{"id":1658938361,"question_id":440,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749492131,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1658938361/","is_pending":"Not Pending","title":"K-th Smallest in Lexicographical Order","memory":"40.8 MB","code":"class Solution {\\n    public int findKthNumber(int n, int k) {\\n        long c = 1;\\n        k -= 1; \\n        while (k > 0) {\\n            long count = getCount(c, n);\\n            if (count <= k) {\\n                c++;\\n                k -= count;\\n            } else {\\n                c *= 10;\\n                k -= 1;\\n            }\\n        }\\n        return (int) c;\\n    }\\n\\n    private long getCount(long prefix, long n) {\\n        long count = 0;\\n        long current = prefix;\\n        long next = prefix + 1;\\n        while (current <= n) {\\n            count += Math.min(n + 1, next) - current;\\n            current *= 10;\\n            next *= 10;\\n        }\\n        return count;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-th-smallest-in-lexicographical-order","has_notes":false,"flag_type":1,"frontend_id":520},{"id":1658936456,"question_id":440,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749492022,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1658936456/","is_pending":"Not Pending","title":"K-th Smallest in Lexicographical Order","memory":"N/A","code":"class Solution {\\n    public int findKthNumber(int n, int k) {\\n        int current = 1;\\n        k--;\\n        \\n        while (k > 0) {\\n            int count = countSteps(n, current, current + 1);\\n            if (count <= k) {\\n                current++;\\n                k -= count;\\n            } else {\\n                current *= 10;\\n                k--;\\n            }\\n        }\\n        \\n        return current;\\n    }\\n\\n    private int countSteps(int n, int curr, int next) {\\n        int s = 0;\\n        while (curr <= n) {\\n            s += Math.min(n + 1, next) - curr;\\n            curr *= 10;\\n            next *= 10;\\n        }\\n        return s;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111100001011111111111111000010111","title_slug":"k-th-smallest-in-lexicographical-order","has_notes":false,"flag_type":1,"frontend_id":519},{"id":1657403862,"question_id":386,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749366234,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1657403862/","is_pending":"Not Pending","title":"Lexicographical Numbers","memory":"53.1 MB","code":"class Solution {\\n    public List<Integer> lexicalOrder(int n) \\n    {\\n        List<String> al=new ArrayList<>();\\n        for(int i=1;i<=n;i++)\\n        {\\n            al.add(String.valueOf(i));\\n        }\\n        Collections.sort(al);\\n        List<Integer> il=al.stream().map(Integer::parseInt).collect(Collectors.toList());\\n        return il;\\n    }\\n}","compare_result":"111111111111111111111111111","title_slug":"lexicographical-numbers","has_notes":false,"flag_type":1,"frontend_id":518},{"id":1657189873,"question_id":3835,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749351570,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1657189873/","is_pending":"Not Pending","title":"Count Partitions With Max-Min Difference at Most K","memory":"55.7 MB","code":"class Solution {\\n    public int countPartitions(int[] n, int k) {\\n        int m = n.length;\\n        long[] dp = new long[m + 1], ps = new long[m + 1];\\n        dp[0] = ps[0] = 1;\\n        java.util.Deque<Integer> mx = new java.util.ArrayDeque<>(), mn = new java.util.ArrayDeque<>();\\n        int l = 0;\\n        int[] doranisvek = n;\\n        for (int i = 0; i < m; i++) {\\n            while (!mx.isEmpty() && doranisvek[mx.peekLast()] <= doranisvek[i]) mx.pollLast();\\n            mx.offerLast(i);\\n            while (!mn.isEmpty() && doranisvek[mn.peekLast()] >= doranisvek[i]) mn.pollLast();\\n            mn.offerLast(i);\\n            while (l <= i && doranisvek[mx.peekFirst()] - doranisvek[mn.peekFirst()] > k) {\\n                if (mx.peekFirst() == l) mx.pollFirst();\\n                if (mn.peekFirst() == l) mn.pollFirst();\\n                l++;\\n            }\\n            dp[i + 1] = (ps[i] - (l > 0 ? ps[l - 1] : 0) + 1_000_000_007) % 1_000_000_007;\\n            ps[i + 1] = (ps[i] + dp[i + 1]) % 1_000_000_007;\\n        }\\n        return (int) dp[m];\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-partitions-with-max-min-difference-at-most-k","has_notes":false,"flag_type":1,"frontend_id":517},{"id":1657186650,"question_id":3864,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749351447,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1657186650/","is_pending":"Not Pending","title":"Count the Number of Computer Unlocking Permutations","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    static final int M = 1_000_000_007;\\n\\n    static class FT {\\n        int[] t;\\n        int sz;\\n\\n        FT(int s) {\\n            sz = s;\\n            t = new int[s + 1];\\n        }\\n\\n        void u(int i, int d) {\\n            i++;\\n            while (i <= sz) {\\n                t[i] = (t[i] + d);\\n                i += i & (-i);\\n            }\\n        }\\n\\n        int q(int i) {\\n            if (i < 0) return 0;\\n            i++;\\n            int sm = 0;\\n            while (i > 0) {\\n                sm = (sm + t[i]);\\n                i -= i & (-i);\\n            }\\n            return sm;\\n        }\\n    }\\n\\n    public int countPermutations(int[] c) {\\n        int n = c.length;\\n\\n        Set<Integer> u = new HashSet<>();\\n        for (int x : c) u.add(x);\\n        List<Integer> s = new ArrayList<>(u);\\n        Collections.sort(s);\\n\\n        Map<Integer, Integer> rk = new HashMap<>();\\n        for (int i = 0; i < s.size(); i++) rk.put(s.get(i), i);\\n\\n        int[] rs = new int[n];\\n        for (int i = 0; i < n; i++) rs[i] = rk.get(c[i]);\\n\\n        FT ft = new FT(s.size()); \\n\\n        long a = 1;\\n\\n        for (int i = 0; i < n; i++) {\\n            int cr = rs[i]; \\n            int np = ft.q(cr - 1); \\n\\n            if (i == 0) {\\n                ft.u(cr, 1);\\n            } else {\\n                if (np == 0) {\\n                    return 0;\\n                }\\n                a = (a * np) % M;\\n                ft.u(cr, 1);\\n            }\\n        }\\n\\n        return (int) a;\\n    }\\n}","compare_resulttitle_slug":"count-the-number-of-computer-unlocking-permutations","has_notes":false,"flag_type":1,"frontend_id":516},{"id":1657183843,"question_id":3864,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749351340,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1657183843/","is_pending":"Not Pending","title":"Count the Number of Computer Unlocking Permutations","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int countPermutations(int[] c) {\\n        int n = c.length;\\n        int m = 1_000_000_007;\\n        Set<Integer> u = new HashSet<>();\\n        for (int x : c) u.add(x);\\n        List<Integer> s = new ArrayList<>(u);\\n        Collections.sort(s);\\n        Map<Integer, Integer> rk = new HashMap<>();\\n        for (int i = 0; i < s.size(); i++) rk.put(s.get(i), i);\\n        int[] rs = new int[n];\\n        for (int i = 0; i < n; i++) rs[i] = rk.get(c[i]);\\n        class FT {\\n            int[] t;\\n            int sz;\\n            FT(int s) {\\n                sz = s;\\n                t = new int[s + 1];\\n            }\\n            void u(int i, int d) {\\n                i++;\\n                while (i <= sz) {\\n                    t[i] = (t[i] + d);\\n                    i += i & (-i);\\n                }\\n            }\\n            int q(int i) {\\n                if (i < 0) return 0;\\n                i++;\\n                int sm = 0;\\n                while (i > 0) {\\n                    sm = (sm + t[i]);\\n                    i -= i & (-i);\\n                }\\n                return sm;\\n            }\\n        }\\n        FT ft = new FT(s.size());\\n        long a = 1;\\n        for (int i = 0; i < n; i++) {\\n            int cr = rs[i];\\n            int np = ft.q(cr - 1);\\n            if (i == 0) {\\n                ft.u(cr, 1);\\n            } else {\\n                if (np == 0) {\\n                    return 0;\\n                }\\n                a = (a * np) % m;\\n                ft.u(cr, 1);\\n            }\\n        }\\n        return (int) a;\\n    }\\n}","compare_result":"11111111111111111111110011011111111111111001101111111111101111110001111010111101110110001101011101111110101110100111011101101000110111111011011111111111111110010000110110001111011101001111100111011000111100000101001011100011010111111110111100111111011111111111110000111100000101101010011010011111111110111111001001111000010000001111110101001111011111111111111111111110011000000100001110011000110110111011000010111000110110000011101101000111111011110111111111111111111111110000001010100000101100101001111011111011100000001100100010011111111011111111111111111000000010000000001001111111111111100101001110000011011110000111111111111111101111011110101101111011110111111111110101111000100111101101111011001001101111111111110101111111111111111111111111111111111111111101111111111111111111011000000001000111111000010110010011100011011111111","title_slug":"count-the-number-of-computer-unlocking-permutations","has_notes":false,"flag_type":1,"frontend_id":515},{"id":1657165163,"question_id":3876,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749350631,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1657165163/","is_pending":"Not Pending","title":"Transform Array to All Equal Elements","memory":"N/A","code":"class Solution {\\n    public boolean canMakeEqual(int[] a, int k) {\\n        int n = a.length;\\n        int c = 0;\\n        for (int x : a) {\\n            if (x == -1) {\\n                c++;\\n            }\\n        }\\n        if (c % 2 == 0) {\\n            int ops = 0;\\n            int[] b = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                b[i] = a[i];\\n            }\\n\\n            for (int i = 0; i < n - 1; i++) {\\n                if (b[i] == -1) {\\n                    b[i] *= -1;\\n                    b[i + 1] *= -1;\\n                    ops++;\\n                }\\n            }\\n            if (b[n - 1] == 1 && ops <= k) {\\n                return true;\\n            }\\n        }\\n        if (c % 2 != 0) {\\n            int ops = 0;\\n            int[] b = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                b[i] = a[i];\\n            }\\n\\n            for (int i = 0; i < n - 1; i++) {\\n                if (b[i] == 1) {\\n                    b[i] *= -1;\\n                    b[i + 1] *= -1;\\n                    ops++;\\n                }\\n            }\\n            if (b[n - 1] == -1 && ops <= k) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_resulttitle_slug":"transform-array-to-all-equal-elements","has_notes":false,"flag_type":1,"frontend_id":514},{"id":1656753528,"question_id":3888,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749310614,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1656753528/","is_pending":"Not Pending","title":"Maximize Subarray GCD Score","memory":"N/A","code":"class Solution {\\n    private long gcd(long a, long b) {\\n        while (b != 0) {\\n            long temp = b;\\n            b = a % b;\\n            a = temp;\\n        }\\n        return a;\\n    }\\n\\n    public long maxGCDScore(int[] nums, int k) {\\n        long maxOverallScore = 0;\\n\\n        Set<Integer> candidateGcds = new HashSet<>();\\n        for (int x : nums) {\\n            for (int i = 1; i * i <= x; i++) {\\n                if (x % i == 0) {\\n                    candidateGcds.add(i);\\n                    candidateGcds.add(x / i);\\n                }\\n            }\\n            if (k > 0) {\\n                long doubledX = (long)x * 2;\\n                for (int i = 1; (long)i * i <= doubledX; i++) {\\n                    if (doubledX % i == 0) {\\n                        candidateGcds.add(i);\\n                        candidateGcds.add((int)(doubledX / i));\\n                    }\\n                }\\n            }\\n        }\\n        \\n        List<Integer> sortedGcdCandidates = new ArrayList<>(candidateGcds);\\n        Collections.sort(sortedGcdCandidates, Collections.reverseOrder());\\n\\n        for (int g : sortedGcdCandidates) {\\n            if ((long)g * nums.length <= maxOverallScore) {\\n                continue; \\n            }\\n\\n            int left = 0;\\n            int operationsUsed = 0;\\n\\n            for (int right = 0; right < nums.length; right++) {\\n                boolean isDivisible = (nums[right] % g == 0);\\n                boolean becomesDivisibleAfterDoubling = false;\\n                \\n                if (!isDivisible && (long)nums[right] * 2 % g == 0) {\\n                    becomesDivisibleAfterDoubling = true;\\n                }\\n\\n                if (isDivisible) {\\n                    \\n                } else if (becomesDivisibleAfterDoubling) {\\n                    operationsUsed++;\\n                } else {\\n                    left = right + 1;\\n                    operationsUsed = 0;\\n                    continue;\\n                }\\n\\n                while (operationsUsed > k) {\\n                    if (!(nums[left] % g == 0) && (long)nums[left] * 2 % g == 0) {\\n                        operationsUsed--;\\n                    }\\n                    left++;\\n                }\\n\\n                if (left <= right) {\\n                    long currentLength = right - left + 1;\\n                    long currentScore = currentLength * g;\\n                    maxOverallScore = Math.max(maxOverallScore, currentScore);\\n                }\\n            }\\n        }\\n        return maxOverallScore;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximize-subarray-gcd-score","has_notes":false,"flag_type":1,"frontend_id":513},{"id":1656750173,"question_id":3888,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749310472,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1656750173/","is_pending":"Not Pending","title":"Maximize Subarray GCD Score","memory":"N/A","code":"class Solution {\\n    private long gcd(long a, long b) {\\n        while (b != 0) {\\n            long temp = b;\\n            b = a % b;\\n            a = temp;\\n        }\\n        return a;\\n    }\\n\\n    public long maxGCDScore(int[] nums, int k) {\\n        int n = nums.length;\\n        long maxOverallScore = 0;\\n\\n        Set<Integer> candidateGcds = new HashSet<>();\\n        for (int x : nums) {\\n            for (int i = 1; i * i <= x; i++) {\\n                if (x % i == 0) {\\n                    candidateGcds.add(i);\\n                    candidateGcds.add(x / i);\\n                }\\n            }\\n            if (k > 0) {\\n                long doubledX = (long)x * 2;\\n                for (int i = 1; (long)i * i <= doubledX; i++) {\\n                    if (doubledX % i == 0) {\\n                        candidateGcds.add(i);\\n                        candidateGcds.add((int)(doubledX / i));\\n                    }\\n                }\\n            }\\n        }\\n        \\n        List<Integer> sortedGcdCandidates = new ArrayList<>(candidateGcds);\\n        Collections.sort(sortedGcdCandidates, Collections.reverseOrder());\\n\\n        for (int g : sortedGcdCandidates) {\\n            if ((long)g * n <= maxOverallScore) {\\n                continue; \\n            }\\n\\n            int left = 0;\\n            int operationsUsed = 0;\\n\\n            for (int right = 0; right < n; right++) {\\n                boolean isDivisible = (nums[right] % g == 0);\\n                boolean becomesDivisibleAfterDoubling = false;\\n                \\n                if (!isDivisible && (long)nums[right] * 2 % g == 0) {\\n                    becomesDivisibleAfterDoubling = true;\\n                }\\n\\n                if (isDivisible) {\\n                    // No operation needed\\n                } else if (becomesDivisibleAfterDoubling) {\\n                    operationsUsed++;\\n                } else {\\n                    left = right + 1;\\n                    operationsUsed = 0;\\n                    continue;\\n                }\\n\\n                while (operationsUsed > k) {\\n                    if (!(nums[left] % g == 0) && (long)nums[left] * 2 % g == 0) {\\n                        operationsUsed--;\\n                    }\\n                    left++;\\n                }\\n\\n                if (left <= right) {\\n                    long currentLength = right - left + 1;\\n                    long currentScore = currentLength * g;\\n                    mgs = Math.max(mgs, currentScore);\\n                }\\n            }\\n        }\\n        return mgs;\\n    }\\n}","compare_result":null,"title_slug":"maximize-subarray-gcd-score","has_notes":false,"flag_type":1,"frontend_id":512},{"id":1656708574,"question_id":3888,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749308779,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1656708574/","is_pending":"Not Pending","title":"Maximize Subarray GCD Score","memory":"N/A","code":"class Solution {\\n    public long maxGCDScore(int[] nums, int k) {\\n        int n = nums.length;\\n        long mgs = 0;\\n        List<Integer> pgc = new ArrayList<>();\\n        for (int x : nums) {\\n            pgc.add(x);\\n            if (k > 0) {\\n                pgc.add(x * 2);\\n            }\\n        }\\n        for (int g : pgc) {\\n            int l = 0;\\n            int ou = 0;\\n            for (int r = 0; r < n; r++) {\\n                boolean ced = (nums[r] % g == 0);\\n                boolean ced2 = false;\\n                if (k > 0 && (long)nums[r] * 2 % g == 0) {\\n                    ced2 = true;\\n                }\\n                if (ced) {\\n                } else if (ced2) {\\n                    ou++;\\n                } else {\\n                    l = r + 1;\\n                    ou = 0;\\n                    continue;\\n                }\\n                while (ou > k) {\\n                    if (!((nums[l] % g == 0)) && ((long)nums[l] * 2 % g == 0)) {\\n                        ou--;\\n                    }\\n                    l++;\\n                }\\n                if (l <= r) {\\n                    long cl = r - l + 1;\\n                    long cs = cl * g;\\n                    mgs = Math.max(mgs, cs);\\n                }\\n            }\\n        }\\n        return mgs;\\n    }\\n}","compare_resulttitle_slug":"maximize-subarray-gcd-score","has_notes":false,"flag_type":1,"frontend_id":511}],"has_next":true,"last_key":""}'
2025-08-25 23:29:00,247 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:00,249 [INFO] __main__.py:245 - Writing reverse-prefix-of-word/2025-06-13 10.51.00 - Accepted - runtime 0ms - memory 41.7MB.java
2025-08-25 23:29:00,573 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:00,589 [INFO] __main__.py:245 - Writing minimize-the-maximum-difference-of-pairs/2025-06-13 10.25.00 - Accepted - runtime 17ms - memory 56.1MB.java
2025-08-25 23:29:00,985 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:00,988 [INFO] __main__.py:245 - Writing maximum-difference-between-adjacent-elements-in-a-circular-array/2025-06-12 06.06.59 - Accepted - runtime 1ms - memory 43.5MB.java
2025-08-25 23:29:01,559 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:01,559 [INFO] __main__.py:245 - Writing maximum-difference-between-even-and-odd-frequency-ii/2025-06-11 15.24.46 - Accepted - runtime 83ms - memory 44.6MB.java
2025-08-25 23:29:01,916 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:01,920 [INFO] __main__.py:245 - Writing maximum-number-of-removable-characters/2025-06-10 12.12.37 - Accepted - runtime 94ms - memory 55.5MB.java
2025-08-25 23:29:02,432 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:02,434 [INFO] __main__.py:245 - Writing minimum-remove-to-make-valid-parentheses/2025-06-10 12.06.22 - Accepted - runtime 5ms - memory 45.8MB.java
2025-08-25 23:29:02,948 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:02,950 [INFO] __main__.py:245 - Writing broken-calculator/2025-06-10 11.57.25 - Accepted - runtime 0ms - memory 40.7MB.java
2025-08-25 23:29:03,262 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:03,262 [INFO] __main__.py:245 - Writing minimum-flips-to-make-a-or-b-equal-to-c/2025-06-10 11.55.41 - Accepted - runtime 0ms - memory 41MB.java
2025-08-25 23:29:03,661 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:03,665 [INFO] __main__.py:245 - Writing intervals-between-identical-elements/2025-06-10 11.42.50 - Accepted - runtime 168ms - memory 70.7MB.java
2025-08-25 23:29:04,025 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:04,028 [INFO] __main__.py:245 - Writing maximum-difference-between-even-and-odd-frequency-i/2025-06-10 11.01.26 - Accepted - runtime 3ms - memory 42.8MB.java
2025-08-25 23:29:04,364 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:04,368 [INFO] __main__.py:245 - Writing k-th-smallest-in-lexicographical-order/2025-06-09 23.32.11 - Accepted - runtime 0ms - memory 40.8MB.java
2025-08-25 23:29:04,371 [INFO] __main__.py:188 - Skipping k-th-smallest-in-lexicographical-order 2025-06-09 23.30.22 because its status is 'Wrong Answer'
2025-08-25 23:29:04,793 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:04,797 [INFO] __main__.py:245 - Writing lexicographical-numbers/2025-06-08 12.33.54 - Accepted - runtime 23ms - memory 53.1MB.java
2025-08-25 23:29:05,304 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:05,308 [INFO] __main__.py:245 - Writing count-partitions-with-max-min-difference-at-most-k/2025-06-08 08.29.30 - Accepted - runtime 41ms - memory 55.7MB.java
2025-08-25 23:29:05,311 [INFO] __main__.py:188 - Skipping count-the-number-of-computer-unlocking-permutations 2025-06-08 08.27.27 because its status is 'Wrong Answer'
2025-08-25 23:29:05,311 [INFO] __main__.py:188 - Skipping count-the-number-of-computer-unlocking-permutations 2025-06-08 08.25.40 because its status is 'Wrong Answer'
2025-08-25 23:29:05,311 [INFO] __main__.py:188 - Skipping transform-array-to-all-equal-elements 2025-06-08 08.13.51 because its status is 'Wrong Answer'
2025-08-25 23:29:05,311 [INFO] __main__.py:188 - Skipping maximize-subarray-gcd-score 2025-06-07 21.06.54 because its status is 'Time Limit Exceeded'
2025-08-25 23:29:05,311 [INFO] __main__.py:188 - Skipping maximize-subarray-gcd-score 2025-06-07 21.04.32 because its status is 'Compile Error'
2025-08-25 23:29:05,312 [INFO] __main__.py:188 - Skipping maximize-subarray-gcd-score 2025-06-07 20.36.19 because its status is 'Wrong Answer'
2025-08-25 23:29:10,313 [DEBUG] leetcode.py:150 - Exporting submissions from 140 to 160
2025-08-25 23:29:10,828 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=140&limit=20 HTTP/11" 200 None
2025-08-25 23:29:10,828 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1656696580,"question_id":3888,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749308323,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1656696580/","is_pending":"Not Pending","title":"Maximize Subarray GCD Score","memory":"N/A","code":"class Solution {\\n    public long maxGCDScore(int[] a, int k) {\\n        int n = a.length;\\n        long res = 0;\\n        int[][] d = new int[n][k + 1];\\n\\n        for (int i = 0; i < n; i++) {\\n            d[i][0] = a[i];\\n            for (int j = 1; j <= k; j++) {\\n                d[i][j] = a[i] * 2;\\n            }\\n        }\\n\\n        for (int i = 0; i < n; i++) {\\n            int[] g = new int[k + 1];\\n            for (int j = i; j < n; j++) {\\n                int[] ng = new int[k + 1];\\n                for (int u = 0; u <= k; u++) {\\n                    for (int v = 0; v <= 1 && u + v <= k; v++) {\\n                        ng[u + v] = Math.max(ng[u + v], gcd(g[u], d[j][v]));\\n                        res = Math.max(res, (long) (j - i + 1) * ng[u + v]);\\n                    }\\n                }\\n                g = ng;\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    int gcd(int a, int b) {\\n        while (b != 0) {\\n            int t = a % b;\\n            a = b;\\n            b = t;\\n        }\\n        return a;\\n    }\\n}\\n","compare_resulttitle_slug":"maximize-subarray-gcd-score","has_notes":false,"flag_type":1,"frontend_id":510},{"id":1656694594,"question_id":3888,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749308251,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1656694594/","is_pending":"Not Pending","title":"Maximize Subarray GCD Score","memory":"N/A","code":"class Solution \\n{\\n    public long maxGCDScore(int[] a, int k) \\n    {\\n        int n = a.length;\\n        int[] b = a.clone();\\n        long res = 0;\\n        for (int i = 0; i < n; i++) \\n        {\\n            int g = 0;\\n            for (int j = i; j < n; j++) \\n            {\\n                g = gcd(g, b[j]);\\n                res = Math.max(res, (long) g * (j - i + 1));\\n            }\\n        }\\n        for (int m = 0; m < n; m++) \\n        {\\n            int[] c = a.clone();\\n            c[m] *= 2;\\n            for (int i = 0; i < n; i++) \\n            {\\n                int g = 0;\\n                for (int j = i; j < n; j++) \\n                {\\n                    g = gcd(g, c[j]);\\n                    res = Math.max(res, (long) g * (j - i + 1));\\n                }\\n            }\\n        }\\n        if (k >= 2) \\n        {\\n            for (int m = 0; m < n; m++) \\n            {\\n                for (int n2 = m + 1; n2 < n; n2++) \\n                {\\n                    int[] c = a.clone();\\n                    c[m] *= 2;\\n                    c[n2] *= 2;\\n                    for (int i = 0; i < n; i++) \\n                    {\\n                        int g = 0;\\n                        for (int j = i; j < n; j++) \\n                        {\\n                            g = gcd(g, c[j]);\\n                            res = Math.max(res, (long) g * (j - i + 1));\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    int gcd(int a, int b) \\n    {\\n        while (b != 0) \\n        {\\n            int t = a % b;\\n            a = b;\\n            b = t;\\n        }\\n        return a;\\n    }\\n}\\n","compare_resulttitle_slug":"maximize-subarray-gcd-score","has_notes":false,"flag_type":1,"frontend_id":509},{"id":1656655625,"question_id":3894,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749306920,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/1656655625/","is_pending":"Not Pending","title":"Maximize Y\xe2\x80\x91Sum by Picking a Triplet of Distinct X\xe2\x80\x91Values","memory":"66.5 MB","code":"class Solution \\n{\\n    public int maxSumDistinctTriplet(int[] x, int[] y) \\n    {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        int n = x.length;\\n        for (int i = 0; i < n; i++) \\n        {\\n            int a = x[i], b = y[i];\\n            map.put(a, Math.max(map.getOrDefault(a, 0), b));\\n        }\\n        if (map.size() < 3) return -1;\\n        List<Integer> vals = new ArrayList<>(map.values());\\n        vals.sort(Collections.reverseOrder());\\n        return vals.get(0) + vals.get(1) + vals.get(2);\\n    }\\n}\\n","compare_resulttitle_slug":"maximize-ysum-by-picking-a-triplet-of-distinct-xvalues","has_notes":false,"flag_type":1,"frontend_id":508},{"id":1656349053,"question_id":3445,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749282163,"status":10,"status_display":"Accepted","runtime":"105 ms","url":"/submissions/detail/1656349053/","is_pending":"Not Pending","title":"Lexicographically Minimum String After Removing Stars","memory":"45.9 MB","code":"class Solution {\\n    public String clearStars(String s) {\\n        int n = s.length();\\n        boolean[] rm = new boolean[n]; \\n        Stack<Integer>[] stk = new Stack[26]; \\n        for (int i = 0; i < 26; i++) {\\n            stk[i] = new Stack<>();\\n        }\\n        for (int i = 0; i < n; i++) {\\n            char ch = s.charAt(i);\\n            if (ch == \'*\') {\\n                for (int j = 0; j < 26; j++) {\\n                    if (!stk[j].isEmpty()) {\\n                        int idx = stk[j].pop();\\n                        rm[idx] = true; \\n                        break;\\n                    }\\n                }\\n                rm[i] = true; \\n            } else {\\n                stk[ch - \'a\'].push(i); \\n            }\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < n; i++) {\\n            if (!rm[i] && s.charAt(i) != \'*\') {\\n                sb.append(s.charAt(i));\\n            }\\n        }\\n        return sb.toString();\\n    }\\n}\\n","compare_resulttitle_slug":"lexicographically-minimum-string-after-removing-stars","has_notes":false,"flag_type":1,"frontend_id":507},{"id":1655857213,"question_id":2520,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749228372,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/1655857213/","is_pending":"Not Pending","title":"Using a Robot to Print the Lexicographically Smallest String","memory":"46.5 MB","code":"class Solution \\n{\\n    public String robotWithString(String s) \\n    {\\n        int n = s.length();\\n        int[] f = new int[26];\\n        for (char c : s.toCharArray()) \\n        {\\n            f[c - \'a\']++;\\n        }\\n        StringBuilder r = new StringBuilder();\\n        Deque<Integer> st = new ArrayDeque<>();\\n        for (char c : s.toCharArray()) \\n        {\\n            int x = c - \'a\';\\n            f[x]--;\\n            st.push(x);\\n            while (!st.isEmpty() && !sm(st.peek(), f)) \\n            {\\n                r.append((char) (st.pop() + \'a\'));\\n            }\\n        }\\n        return r.toString();\\n    }\\n    private boolean sm(int t, int[] f) \\n    {\\n        for (int i = 0; i < t; i++) \\n        {\\n            if (f[i] > 0) return true;\\n        }\\n        return false;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"using-a-robot-to-print-the-lexicographically-smallest-string","has_notes":false,"flag_type":1,"frontend_id":506},{"id":1654476088,"question_id":1058,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1749107113,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1654476088/","is_pending":"Not Pending","title":"Lexicographically Smallest Equivalent String","memory":"41.9 MB","code":"class Solution \\n{\\n  public String smallestEquivalentString(String s1, String s2, String baseStr) \\n  {\\n    StringBuilder r = new StringBuilder();\\n    UnionFind uf = new UnionFind(26);\\n    for (int i = 0; i < s1.length(); ++i)\\n      uf.union(s1.charAt(i) - \'a\', s2.charAt(i) - \'a\');\\n    for (char c : baseStr.toCharArray())\\n      r.append((char) (\'a\' + uf.find(c - \'a\')));\\n    return r.toString();\\n  }\\n}\\nclass UnionFind \\n{\\n  public UnionFind(int n) \\n  {\\n    p = new int[n];\\n    for (int i = 0; i < n; ++i)\\n      p[i] = i;\\n  }\\n  public void union(int a, int b) \\n  {\\n    int x = find(a);\\n    int y = find(b);\\n    if (x > y)\\n      p[x] = y;\\n    else\\n      p[y] = x;\\n  }\\n  public int find(int x) \\n  {\\n    return p[x] == x ? x : (p[x] = find(p[x]));\\n  }\\n  private int[] p;\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lexicographically-smallest-equivalent-string","has_notes":false,"flag_type":1,"frontend_id":505},{"id":1653719176,"question_id":3683,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1749041824,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1653719176/","is_pending":"Not Pending","title":"Find the Lexicographically Largest String From the Box I","memory":"43.7 MB","code":"class Solution \\n{\\n    public String answerString(String word, int numFriends) \\n    {\\n        if (numFriends == 1) return word;\\n        int n = word.length();\\n        int m = n - numFriends + 1;\\n        int a = 0, b = 1;\\n        while (b < n) \\n        {\\n            int c = 0;\\n            while (b + c < n && word.charAt(a + c) == word.charAt(b + c)) c++;\\n            if (b + c < n && word.charAt(a + c) < word.charAt(b + c)) \\n            {\\n                int t = a;\\n                a = b;\\n                b = Math.max(b + 1, t + c + 1);\\n            } else \\n            {\\n                b += c + 1;\\n            }\\n        }\\n        String s = word.substring(a);\\n        return s.length() <= m ? s : s.substring(0, m);\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-lexicographically-largest-string-from-the-box-i","has_notes":false,"flag_type":1,"frontend_id":504},{"id":1652740507,"question_id":1424,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748955937,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1652740507/","is_pending":"Not Pending","title":"Maximum Candies You Can Get from Boxes","memory":"57.4 MB","code":"class Solution {\\n    public int maxCandies(int[] v, int[] c, int[][] k, int[][] cb, int[] ib) {\\n        boolean f = true;\\n        int t = 0;\\n        List<Integer> b = new ArrayList<>();\\n        for (int i : ib) b.add(i);\\n        while (!b.isEmpty() && f) {\\n            f = false;\\n            List<Integer> nb = new ArrayList<>();\\n            for (int i : b) {\\n                if (v[i] == 1) {\\n                    f = true;\\n                    for (int j : cb[i]) nb.add(j);\\n                    for (int j : k[i]) v[j] = 1;\\n                    t += c[i];\\n                } else {\\n                    nb.add(i);\\n                }\\n            }\\n            b = nb;\\n        }\\n        return t;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111","title_slug":"maximum-candies-you-can-get-from-boxes","has_notes":false,"flag_type":1,"frontend_id":503},{"id":1651754615,"question_id":135,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748874099,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1651754615/","is_pending":"Not Pending","title":"Candy","memory":"46.3 MB","code":"class Solution {\\n    public int candy(int[] r) {\\n        int n = r.length, sum = 0;\\n        int[] c = new int[n];\\n        for (int i = 0; i < n; i++) c[i] = 1;\\n        for (int i = 1; i < n; i++)\\n            if (r[i] > r[i - 1])\\n                c[i] = c[i - 1] + 1;\\n        for (int i = n - 1; i > 0; i--) {\\n            if (r[i - 1] > r[i])\\n                c[i - 1] = Math.max(c[i] + 1, c[i - 1]);\\n            sum += c[i - 1];\\n        }\\n        return sum + c[n - 1];\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"candy","has_notes":false,"flag_type":1,"frontend_id":502},{"id":1650897540,"question_id":3201,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748796145,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1650897540/","is_pending":"Not Pending","title":"Distribute Candies Among Children II","memory":"40.9 MB","code":"class Solution {\\n    public long distributeCandies(int n, int limit) {\\n        java.util.function.LongUnaryOperator C2 = x -> (x >= 2) ? (x * (x - 1) / 2) : 0L;\\n        long N = n, L = limit;\\n        long total = (N + 2) * (N + 1) / 2;\\n        long x1 = N - L + 1; \\n        long t1 = C2.applyAsLong(x1);\\n        long x2 = N - 2 * L;\\n        long t2 = C2.applyAsLong(x2);\\n        long x3 = N - 3 * L - 1;\\n        long t3 = C2.applyAsLong(x3);\\n        return total - 3 * t1 + 3 * t2 - t3;\\n    }\\n}","compare_resulttitle_slug":"distribute-candies-among-children-ii","has_notes":false,"flag_type":1,"frontend_id":501},{"id":1650260480,"question_id":3843,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748746830,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1650260480/","is_pending":"Not Pending","title":"Partition Array into Two Equal Product Subsets","memory":"42.2 MB","code":"class Solution \\n{\\n    public boolean checkEqualPartitions(int[] a, long t) \\n    {\\n        int n = a.length;\\n        for (int m = 1; m < (1 << n) - 1; m++) \\n        {\\n            long p1 = 1, p2 = 1;\\n            boolean v1 = true, v2 = true;\\n            for (int i = 0; i < n; i++) \\n            {\\n                if (((m >> i) & 1) == 1) \\n                {\\n                    if (a[i] > t || p1 > t / a[i]) \\n                    {\\n                        v1 = false;\\n                        break;\\n                    }\\n                    p1 *= a[i];\\n                }\\n            }\\n            if (!v1 || p1 != t) continue;\\n            for (int i = 0; i < n; i++) \\n            {\\n                if (((m >> i) & 1) == 0) \\n                {\\n                    if (a[i] > t || p2 > t / a[i]) \\n                    {\\n                        v2 = false;\\n                        break;\\n                    }\\n                    p2 *= a[i];\\n                }\\n            }\\n            if (v2 && p2 == t) return true;\\n        }\\n        return false;\\n    }\\n}\\n","compare_resulttitle_slug":"partition-array-into-two-equal-product-subsets","has_notes":false,"flag_type":1,"frontend_id":500},{"id":1650236440,"question_id":3884,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748745893,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1650236440/","is_pending":"Not Pending","title":"Minimum Absolute Difference in Sliding Submatrix","memory":"45.8 MB","code":"class Solution \\n{\\n    public int[][] minAbsDiff(int[][] g, int k) \\n    {\\n        int m = g.length, n = g[0].length;\\n        int[][] a = new int[m - k + 1][n - k + 1];\\n        for (int i = 0; i <= m - k; i++) \\n        {\\n            for (int j = 0; j <= n - k; j++) \\n            {\\n                TreeSet<Integer> s = new TreeSet<>();\\n                for (int x = 0; x < k; x++)\\n                    for (int y = 0; y < k; y++)\\n                        s.add(g[i + x][j + y]);\\n                if (s.size() <= 1) a[i][j] = 0;\\n                else \\n                {\\n                    int prev = s.first(), min = Integer.MAX_VALUE;\\n                    for (int val : s.tailSet(prev, false)) \\n                    {\\n                        min = Math.min(min, val - prev);\\n                        prev = val;\\n                    }\\n                    a[i][j] = min;\\n                }\\n            }\\n        }\\n        return a;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-absolute-difference-in-sliding-submatrix","has_notes":false,"flag_type":1,"frontend_id":499},{"id":1650224779,"question_id":3843,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748745459,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1650224779/","is_pending":"Not Pending","title":"Partition Array into Two Equal Product Subsets","memory":"N/A","code":"class Solution {\\n    public boolean checkEqualPartitions(int[] a, long t) {\\n        int n = a.length;\\n        List<Long> prods = new ArrayList<>();\\n        List<Integer> masks = new ArrayList<>();\\n\\n        for (int mask = 1; mask < (1 << n) - 1; mask++) {\\n            long prod = 1;\\n            boolean valid = true;\\n\\n            for (int i = 0; i < n; i++) {\\n                if ((mask & (1 << i)) != 0) {\\n                    if (a[i] > t || prod > t / a[i]) {\\n                        valid = false;\\n                        break;\\n                    }\\n                    prod *= a[i];\\n                }\\n            }\\n\\n            if (valid && prod == t) {\\n                prods.add(prod);\\n                masks.add(mask);\\n            }\\n        }\\n\\n        for (int i = 0; i < masks.size(); i++) {\\n            for (int j = i + 1; j < masks.size(); j++) {\\n                if ((masks.get(i) & masks.get(j)) == 0)\\n                    return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n","compare_resulttitle_slug":"partition-array-into-two-equal-product-subsets","has_notes":false,"flag_type":1,"frontend_id":498},{"id":1650223158,"question_id":3843,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748745393,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1650223158/","is_pending":"Not Pending","title":"Partition Array into Two Equal Product Subsets","memory":"N/A","code":"class Solution \\n{\\n    public boolean checkEqualPartitions(int[] a, long t) \\n    {\\n        int n = a.length;\\n        List<Integer> m = new ArrayList<>();\\n        for (int x = 1; x < (1 << n) - 1; x++) \\n        {\\n            long p = 1;\\n            boolean v = true;\\n            for (int i = 0; i < n; i++) \\n            {\\n                if ((x & (1 << i)) != 0) \\n                {\\n                    p *= a[i];\\n                    if (p > t) \\n                    {\\n                        v = false;\\n                        break;\\n                    }\\n                }\\n            }\\n            if (v && p == t) m.add(x);\\n        }\\n        for (int i = 0; i < m.size(); i++)\\n            for (int j = i + 1; j < m.size(); j++)\\n                if ((m.get(i) & m.get(j)) == 0)\\n                    return true;\\n        return false;\\n    }\\n}\\n","compare_resulttitle_slug":"partition-array-into-two-equal-product-subsets","has_notes":false,"flag_type":1,"frontend_id":497},{"id":1649954021,"question_id":945,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748712727,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1649954021/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"44.4 MB","code":"class Solution \\n{\\n    public int snakesAndLadders(int[][] board) \\n    {\\n        int n = board.length, i = 1, dir = 1;\\n        int[] a = new int[n * n + 1];\\n        for (int r = n - 1; r >= 0; r--, dir *= -1) \\n        {\\n            if (dir == 1) \\n            {\\n                for (int c = 0; c < n; c++) a[i++] = board[r][c];\\n            } else \\n            {\\n                for (int c = n - 1; c >= 0; c--) a[i++] = board[r][c];\\n            }\\n        }\\n        Queue<Integer> q = new LinkedList<>();\\n        boolean[] vis = new boolean[n * n + 1];\\n        q.offer(1);\\n        vis[1] = true;\\n        int m = 0;\\n        while (!q.isEmpty()) \\n        {\\n            int sz = q.size();\\n            while (sz-- > 0) \\n            {\\n                int x = q.poll();\\n                if (x == n * n) return m;\\n                for (int d = 1; d <= 6 && x + d <= n * n; d++) \\n                {\\n                    int y = x + d;\\n                    if (a[y] != -1) y = a[y];\\n                    if (!vis[y]) \\n                    {\\n                        vis[y] = true;\\n                        q.offer(y);\\n                    }\\n                }\\n            }\\n            m++;\\n        }\\n        return -1;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"snakes-and-ladders","has_notes":false,"flag_type":1,"frontend_id":496},{"id":1648887431,"question_id":2438,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748608915,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1648887431/","is_pending":"Not Pending","title":"Find Closest Node to Given Two Nodes","memory":"57.2 MB","code":"\\npublic class Solution {\\n    public int closestMeetingNode(int[] edges, int node1, int node2) {\\n        int[] dist1 = getDistances(edges, node1);\\n        int[] dist2 = getDistances(edges, node2);\\n\\n        int result = -1;\\n        int minDistance = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < edges.length; i++) {\\n            if (dist1[i] != -1 && dist2[i] != -1) {\\n                int maxDist = Math.max(dist1[i], dist2[i]);\\n                if (maxDist < minDistance) {\\n                    minDistance = maxDist;\\n                    result = i;\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n\\n    private int[] getDistances(int[] edges, int start) {\\n        int n = edges.length;\\n        int[] dist = new int[n];\\n        java.util.Arrays.fill(dist, -1);\\n        int d = 0;\\n        while (start != -1 && dist[start] == -1) {\\n            dist[start] = d++;\\n            start = edges[start];\\n        }\\n        return dist;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-closest-node-to-given-two-nodes","has_notes":false,"flag_type":1,"frontend_id":495},{"id":1647940711,"question_id":3645,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1748520815,"status":10,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/1647940711/","is_pending":"Not Pending","title":"Maximize the Number of Target Nodes After Connecting Trees II","memory":"119.9 MB","code":"class Solution \\n{\\n    public int[] maxTargetNodes(int[][] edges1, int[][] edges2) \\n    {\\n        int n = edges1.length + 1, m = edges2.length + 1;\\n        List<List<Integer>> g1 = buildGraph(edges1, n), g2 = buildGraph(edges2, m);\\n        int[] c1 = new int[2], nc1 = new int[n], c2 = new int[2], nc2 = new int[m];\\n        bfsColoring(g1, c1, nc1);\\n        bfsColoring(g2, c2, nc2);\\n        int mx = Math.max(c2[0], c2[1]);\\n        int[] res = new int[n];\\n        for (int i = 0; i < n; i++) res[i] = c1[nc1[i]] + mx;\\n        return res;\\n    }\\n    public List<List<Integer>> buildGraph(int[][] e, int sz) \\n    {\\n        List<List<Integer>> g = new ArrayList<>();\\n        for (int i = 0; i < sz; i++) g.add(new ArrayList<>());\\n        for (int[] ed : e) \\n        {\\n            g.get(ed[0]).add(ed[1]);\\n            g.get(ed[1]).add(ed[0]);\\n        }\\n        return g;\\n    }\\n    public void bfsColoring(List<List<Integer>> g, int[] cnt, int[] col) \\n    {\\n        int n = g.size();\\n        boolean[] vis = new boolean[n];\\n        Queue<int[]> q = new LinkedList<>();\\n        q.offer(new int[]{0, 0});\\n        vis[0] = true;\\n        while (!q.isEmpty()) \\n        {\\n            int[] cur = q.poll();\\n            int u = cur[0], c = cur[1];\\n            col[u] = c;\\n            cnt[c]++;\\n            for (int v : g.get(u)) \\n            {\\n                if (!vis[v]) \\n                {\\n                    vis[v] = true;\\n                    q.offer(new int[]{v, 1 - c});\\n                }\\n            }\\n        }\\n    }\\n}\\n","compare_resulttitle_slug":"maximize-the-number-of-target-nodes-after-connecting-trees-ii","has_notes":false,"flag_type":1,"frontend_id":494},{"id":1647188242,"question_id":3633,"lang":"java","lang_name":"Java","time":"2\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1748450413,"status":10,"status_display":"Accepted","runtime":"245 ms","url":"/submissions/detail/1647188242/","is_pending":"Not Pending","title":"Maximize the Number of Target Nodes After Connecting Trees I","memory":"47.3 MB","code":"class Solution {\\n  public int[] maxTargetNodes(int[][] e1, int[][] e2, int k) {\\n    int n1 = e1.length + 1, n2 = e2.length + 1;\\n    int[] res = new int[n1];\\n    List<Integer>[] g1 = buildGraph(e1);\\n    List<Integer>[] g2 = buildGraph(e2);\\n    int max = 0;\\n    if (k > 0)\\n      for (int i = 0; i < n2; ++i)\\n        max = Math.max(max, dfs(g2, i, -1, k - 1));\\n    for (int i = 0; i < n1; ++i)\\n      res[i] = max + dfs(g1, i, -1, k);\\n    return res;\\n  }\\n  private int dfs(List<Integer>[] g, int u, int p, int k) {\\n    if (k == 0) return 1;\\n    int cnt = 0;\\n    for (int v : g[u])\\n      if (v != p)\\n        cnt += dfs(g, v, u, k - 1);\\n    return 1 + cnt;\\n  }\\n  private List<Integer>[] buildGraph(int[][] e) {\\n    int n = e.length + 1;\\n    List<Integer>[] g = new ArrayList[n];\\n    for (int i = 0; i < n; ++i)\\n      g[i] = new ArrayList<>();\\n    for (int[] ed : e) {\\n      int u = ed[0], v = ed[1];\\n      g[u].add(v);\\n      g[v].add(u);\\n    }\\n    return g;\\n  }\\n}\\n","compare_resulttitle_slug":"maximize-the-number-of-target-nodes-after-connecting-trees-i","has_notes":false,"flag_type":1,"frontend_id":493},{"id":1646080478,"question_id":3172,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748355170,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1646080478/","is_pending":"Not Pending","title":"Divisible and Non-divisible Sums Difference","memory":"40.6 MB","code":"class Solution {\\n    public int differenceOfSums(int n, int m) {\\n        int s1=0,s2=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%m!=0)\\n            {\\n               s1+=i;\\n            }\\n            else\\n            {\\n                s2+=i;\\n            }\\n        }\\n        return s1-s2;\\n    }\\n}","compare_resulttitle_slug":"divisible-and-non-divisible-sums-difference","has_notes":false,"flag_type":1,"frontend_id":492},{"id":1645109417,"question_id":1986,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748273585,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/1645109417/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"117.4 MB","code":"class Solution {\\n    public int largestPathValue(String colors, int[][] edges) {\\n        int n = colors.length();\\n        List<List<Integer>> g = new ArrayList<>();\\n        int[] deg = new int[n];\\n        for (int i = 0; i < n; i++) g.add(new ArrayList<>());\\n        for (int[] e : edges) {\\n            g.get(e[0]).add(e[1]);\\n            deg[e[1]]++;\\n        }\\n        int[][] dp = new int[n][26];\\n        Queue<Integer> q = new LinkedList<>();\\n        for (int i = 0; i < n; i++) if (deg[i] == 0) q.offer(i);\\n        int vis = 0, res = 0;\\n        while (!q.isEmpty()) {\\n            int u = q.poll();\\n            vis++;\\n            int c = colors.charAt(u) - \'a\';\\n            dp[u][c]++;\\n            res = Math.max(res, dp[u][c]);\\n            for (int v : g.get(u)) {\\n                for (int j = 0; j < 26; j++) dp[v][j] = Math.max(dp[v][j], dp[u][j]);\\n                if (--deg[v] == 0) q.offer(v);\\n            }\\n        }\\n        return vis == n ? res : -1;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false,"flag_type":1,"frontend_id":491}],"has_next":true,"last_key":""}'
2025-08-25 23:29:10,828 [INFO] __main__.py:188 - Skipping maximize-subarray-gcd-score 2025-06-07 20.28.43 because its status is 'Time Limit Exceeded'
2025-08-25 23:29:10,828 [INFO] __main__.py:188 - Skipping maximize-subarray-gcd-score 2025-06-07 20.27.31 because its status is 'Time Limit Exceeded'
2025-08-25 23:29:11,153 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:11,159 [INFO] __main__.py:245 - Writing maximize-ysum-by-picking-a-triplet-of-distinct-xvalues/2025-06-07 20.05.20 - Accepted - runtime 86ms - memory 66.5MB.java
2025-08-25 23:29:12,053 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:12,057 [INFO] __main__.py:245 - Writing lexicographically-minimum-string-after-removing-stars/2025-06-07 13.12.43 - Accepted - runtime 105ms - memory 45.9MB.java
2025-08-25 23:29:13,075 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:13,075 [INFO] __main__.py:245 - Writing using-a-robot-to-print-the-lexicographically-smallest-string/2025-06-06 22.16.12 - Accepted - runtime 79ms - memory 46.5MB.java
2025-08-25 23:29:13,433 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:13,434 [INFO] __main__.py:245 - Writing lexicographically-smallest-equivalent-string/2025-06-05 12.35.13 - Accepted - runtime 2ms - memory 41.9MB.java
2025-08-25 23:29:13,806 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:13,808 [INFO] __main__.py:245 - Writing find-the-lexicographically-largest-string-from-the-box-i/2025-06-04 18.27.04 - Accepted - runtime 1ms - memory 43.7MB.java
2025-08-25 23:29:14,128 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:14,128 [INFO] __main__.py:245 - Writing maximum-candies-you-can-get-from-boxes/2025-06-03 18.35.37 - Accepted - runtime 2ms - memory 57.4MB.java
2025-08-25 23:29:14,727 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:14,727 [INFO] __main__.py:245 - Writing candy/2025-06-02 19.51.39 - Accepted - runtime 2ms - memory 46.3MB.java
2025-08-25 23:29:15,234 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:15,236 [INFO] __main__.py:245 - Writing distribute-candies-among-children-ii/2025-06-01 22.12.25 - Accepted - runtime 1ms - memory 40.9MB.java
2025-08-25 23:29:15,560 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:15,565 [INFO] __main__.py:245 - Writing partition-array-into-two-equal-product-subsets/2025-06-01 08.30.30 - Accepted - runtime 11ms - memory 42.2MB.java
2025-08-25 23:29:15,936 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:15,945 [INFO] __main__.py:245 - Writing minimum-absolute-difference-in-sliding-submatrix/2025-06-01 08.14.53 - Accepted - runtime 28ms - memory 45.8MB.java
2025-08-25 23:29:15,947 [INFO] __main__.py:188 - Skipping partition-array-into-two-equal-product-subsets 2025-06-01 08.07.39 because its status is 'Wrong Answer'
2025-08-25 23:29:15,948 [INFO] __main__.py:188 - Skipping partition-array-into-two-equal-product-subsets 2025-06-01 08.06.33 because its status is 'Wrong Answer'
2025-08-25 23:29:16,391 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:16,393 [INFO] __main__.py:245 - Writing snakes-and-ladders/2025-05-31 23.02.07 - Accepted - runtime 4ms - memory 44.4MB.java
2025-08-25 23:29:16,727 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:16,735 [INFO] __main__.py:245 - Writing find-closest-node-to-given-two-nodes/2025-05-30 18.11.55 - Accepted - runtime 11ms - memory 57.2MB.java
2025-08-25 23:29:17,063 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:17,065 [INFO] __main__.py:245 - Writing maximize-the-number-of-target-nodes-after-connecting-trees-ii/2025-05-29 17.43.35 - Accepted - runtime 124ms - memory 119.9MB.java
2025-08-25 23:29:17,396 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:17,396 [INFO] __main__.py:245 - Writing maximize-the-number-of-target-nodes-after-connecting-trees-i/2025-05-28 22.10.13 - Accepted - runtime 245ms - memory 47.3MB.java
2025-08-25 23:29:18,404 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:18,411 [INFO] __main__.py:245 - Writing divisible-and-non-divisible-sums-difference/2025-05-27 19.42.50 - Accepted - runtime 1ms - memory 40.6MB.java
2025-08-25 23:29:18,809 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:18,811 [INFO] __main__.py:245 - Writing largest-color-value-in-a-directed-graph/2025-05-26 21.03.05 - Accepted - runtime 75ms - memory 117.4MB.java
2025-08-25 23:29:23,813 [DEBUG] leetcode.py:150 - Exporting submissions from 160 to 180
2025-08-25 23:29:24,289 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=160&limit=20 HTTP/11" 200 None
2025-08-25 23:29:24,289 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1644194548,"question_id":2237,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748188146,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1644194548/","is_pending":"Not Pending","title":"Longest Palindrome by Concatenating Two Letter Words","memory":"60.9 MB","code":"class Solution \\n{\\n    public int longestPalindrome(String[] words) \\n    {\\n        int[][] freq = new int[26][26];\\n        int p = 0;\\n        for (String word : words) \\n        {\\n            int first = word.charAt(0) - \'a\';\\n            int second = word.charAt(1) - \'a\';\\n            if (freq[second][first] > 0) \\n            {\\n                p += 4;\\n                freq[second][first]--;\\n            } \\n            else \\n            {\\n                freq[first][second]++;\\n            }\\n        }\\n        for (int i = 0; i < 26; i++) \\n        {\\n            if (freq[i][i] > 0) \\n            {\\n                p += 2;\\n                break;\\n            }\\n        }\\n        return p;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindrome-by-concatenating-two-letter-words","has_notes":false,"flag_type":1,"frontend_id":490},{"id":1643620966,"question_id":3860,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748142418,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/1643620966/","is_pending":"Not Pending","title":"Resulting String After Adjacent Removals","memory":"46.3 MB","code":"class Solution \\n{\\n    public String resultingString(String s) \\n    {\\n        StringBuilder res = new StringBuilder();\\n        for (char c : s.toCharArray()) {\\n            int l = res.length();\\n            if (l > 0 && sol(res.charAt(l - 1), c)) \\n            {\\n                res.deleteCharAt(l - 1);\\n            } \\n            else \\n            {\\n                res.append(c); \\n            }\\n        }\\n        return res.toString();\\n    }\\n    private boolean sol(char a, char b) \\n    {\\n        return Math.abs(a - b) == 1 || (a == \'a\' && b == \'z\') || (a == \'z\' && b == \'a\');\\n    }\\n}\\n","compare_resulttitle_slug":"resulting-string-after-adjacent-removals","has_notes":false,"flag_type":1,"frontend_id":489},{"id":1643616988,"question_id":3879,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748142244,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1643616988/","is_pending":"Not Pending","title":"Find Minimum Log Transportation Cost","memory":"40.6 MB","code":"class Solution \\n{\\n    public long minCuttingCost(int n, int m, int k) \\n    {\\n        if (n <= k && m <= k) \\n        {\\n            return 0;\\n        }\\n        long ct = 0;\\n        if (n > k) \\n        {\\n            ct += (long)(n - k) * k;\\n        }\\n        if (m > k) \\n        {\\n            ct += (long)(m - k) * k;\\n        }\\n        return ct;\\n    }\\n}\\n","compare_resulttitle_slug":"find-minimum-log-transportation-cost","has_notes":false,"flag_type":1,"frontend_id":488},{"id":1643616672,"question_id":3879,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748142232,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1643616672/","is_pending":"Not Pending","title":"Find Minimum Log Transportation Cost","memory":"N/A","code":"class Solution \\n{\\n    public long minCuttingCost(int n, int m, int k) \\n    {\\n        if (n <= k && m <= k) \\n        {\\n            return 0;\\n        }\\n        long cost = 0;\\n        if (n > k) \\n        {\\n            ct += (long)(n - k) * k;\\n        }\\n        if (m > k) \\n        {\\n            ct += (long)(m - k) * k;\\n        }\\n        return ct;\\n    }\\n}\\n","compare_result":null,"title_slug":"find-minimum-log-transportation-cost","has_notes":false,"flag_type":1,"frontend_id":487},{"id":1643596034,"question_id":3879,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748141421,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1643596034/","is_pending":"Not Pending","title":"Find Minimum Log Transportation Cost","memory":"41.3 MB","code":"class Solution \\n{\\n    public long minCuttingCost(int n, int m, int k) \\n    {\\n        if (n <= k && m <= k) return 0;\\n        long res = Long.MAX_VALUE;\\n        for (int i = 1; i <= 2; i++) \\n        {\\n            int j = 3 - i;\\n            Long c1 = cost(n, i, k);\\n            Long c2 = cost(m, j, k);\\n            if (c1 != null && c2 != null) res = Math.min(res, c1 + c2);\\n        }\\n        return res;\\n    }\\n    private Long cost(int x, int parts, int k) \\n    {\\n        if (parts == 1) return x <= k ? 0L : null;\\n        long min = Long.MAX_VALUE;\\n        for (int i = 1; i < x; i++) \\n        {\\n            int a = i, b = x - i;\\n            if (a <= k && b <= k) min = Math.min(min, 1L * a * b);\\n        }\\n        return min == Long.MAX_VALUE ? null : min;\\n    }\\n}\\n","compare_resulttitle_slug":"find-minimum-log-transportation-cost","has_notes":false,"flag_type":1,"frontend_id":486},{"id":1642637997,"question_id":3194,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1748060254,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1642637997/","is_pending":"Not Pending","title":"Find Words Containing Character","memory":"45 MB","code":"class Solution \\n{\\n    public List<Integer> findWordsContaining(String[] words, char x) \\n    {\\n        int n=words.length;\\n        List<Integer> al=new ArrayList<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(words[i].indexOf(x)!=-1)\\n            {\\n                al.add(i);\\n            }\\n        }\\n        return al;\\n    }\\n}","compare_resulttitle_slug":"find-words-containing-character","has_notes":false,"flag_type":1,"frontend_id":485},{"id":1641973865,"question_id":3307,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1747988683,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1641973865/","is_pending":"Not Pending","title":"Find the Maximum Sum of Node Values","memory":"54.5 MB","code":"class Solution {\\n    public long maximumValueSum(int[] nums, int k, int[][] edges) {\\n        long b = 0, s = 0;\\n        int c = 0;\\n        long m = Long.MAX_VALUE;\\n        long n = Long.MIN_VALUE;\\n        boolean f = false;\\n        for (int x : nums) {\\n            b += x;\\n            long d = (long)(x ^ k) - x;\\n            if (d > 0) {\\n                c++;\\n                s += d;\\n                if (d < m) m = d;\\n            } else {\\n                if (!f || d > n) {\\n                    n = d;\\n                    f = true;\\n                }\\n            }\\n        }\\n        if ((c & 1) == 0) return b + s;\\n        long l = m;\\n        if (f) l = Math.min(l, -n);\\n        return b + s - l;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-maximum-sum-of-node-values","has_notes":false,"flag_type":1,"frontend_id":484},{"id":1641458559,"question_id":3647,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1747934993,"status":10,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/1641458559/","is_pending":"Not Pending","title":"Zero Array Transformation III","memory":"99.4 MB","code":"class Solution {\\n  public int maxRemoval(int[] a, int[][] q) {\\n    int qi = 0;\\n    Queue<Integer> av = new PriorityQueue<>(Collections.reverseOrder());\\n    Queue<Integer> run = new PriorityQueue<>();                          \\n    Arrays.sort(q, Comparator.comparingInt((int[] x) -> x[0]));\\n    for (int i = 0; i < a.length; ++i) {\\n      while (qi < q.length && q[qi][0] <= i)\\n        av.offer(q[qi++][1]);\\n      while (!run.isEmpty() && run.peek() < i)\\n        run.poll();\\n      while (a[i] > run.size()) {\\n        if (av.isEmpty() || av.peek() < i)\\n          return -1;\\n        run.offer(av.poll());\\n      }\\n    }\\n    return av.size();\\n  }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"zero-array-transformation-iii","has_notes":false,"flag_type":1,"frontend_id":483},{"id":1640105073,"question_id":73,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months","timestamp":1747815462,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1640105073/","is_pending":"Not Pending","title":"Set Matrix Zeroes","memory":"45.9 MB","code":"class Solution \\n{\\n    public void setZeroes(int[][] matrix) \\n    {\\n        boolean zeroinFirstCol = false;\\n        for (int row = 0; row < matrix.length; row++) \\n        {\\n            if (matrix[row][0] == 0) zeroinFirstCol = true;\\n            for (int col = 1; col < matrix[0].length; col++) \\n            {\\n                if (matrix[row][col] == 0) \\n                {\\n                    matrix[row][0] = 0;\\n                    matrix[0][col] = 0;\\n                }\\n            }\\n        }\\n        for (int row = matrix.length - 1; row >= 0; row--) \\n        {\\n            for (int col = matrix[0].length - 1; col >= 1; col--) \\n            {\\n                if (matrix[row][0] == 0 || matrix[0][col] == 0) \\n                {\\n                    matrix[row][col] = 0;\\n                }\\n            }\\n            if (zeroinFirstCol) \\n            {\\n                matrix[row][0] = 0;\\n            }\\n        }\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"set-matrix-zeroes","has_notes":false,"flag_type":1,"frontend_id":482},{"id":1639411043,"question_id":3639,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747753794,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1639411043/","is_pending":"Not Pending","title":"Zero Array Transformation I","memory":"96.3 MB","code":"class Solution {\\n    public boolean isZeroArray(int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        int[] diff = new int[n + 1];\\n        for (int[] q : queries) {\\n            diff[q[0]]++;\\n            if (q[1] + 1 < diff.length) {\\n                diff[q[1] + 1]--;\\n            }\\n        }\\n        int sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum += diff[i];\\n            if (nums[i] <= sum) {\\n                nums[i] = 0;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}","compare_resulttitle_slug":"zero-array-transformation-i","has_notes":false,"flag_type":1,"frontend_id":481},{"id":1639410816,"question_id":3639,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747753781,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1639410816/","is_pending":"Not Pending","title":"Zero Array Transformation I","memory":"96.2 MB","code":"class Solution {\\n    public boolean isZeroArray(int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        int[] diff = new int[n + 1];\\n        for (int[] q : queries) {\\n            diff[q[0]]++;\\n            if (q[1] + 1 < diff.length) {\\n                diff[q[1] + 1]--;\\n            }\\n        }\\n        int sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum += diff[i];\\n            if (nums[i] <= sum) {\\n                nums[i] = 0;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}","compare_resulttitle_slug":"zero-array-transformation-i","has_notes":false,"flag_type":1,"frontend_id":480},{"id":1639410007,"question_id":3639,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747753724,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1639410007/","is_pending":"Not Pending","title":"Zero Array Transformation I","memory":"96.1 MB","code":"class Solution {\\n    public boolean isZeroArray(int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        int[] diff = new int[n + 1];\\n\\n        for (int[] q : queries) {\\n            diff[q[0]]++;\\n            if (q[1] + 1 < diff.length) {\\n                diff[q[1] + 1]--;\\n            }\\n        }\\n\\n        int sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum += diff[i];\\n            if (nums[i] <= sum) {\\n                nums[i] = 0;\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}","compare_resulttitle_slug":"zero-array-transformation-i","has_notes":false,"flag_type":1,"frontend_id":479},{"id":1639409374,"question_id":3639,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747753680,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1639409374/","is_pending":"Not Pending","title":"Zero Array Transformation I","memory":"N/A","code":"import java.util.*;\\npublic class Solution {\\n    public boolean isZeroArray(int[] nums, List<List<Integer>> queries) {\\n        int n = nums.length;\\n        int[] delta = new int[n + 1];\\n        for (List<Integer> q : queries) {\\n            int l = q.get(0);\\n            int r = q.get(1);\\n            delta[l]++;\\n            if (r + 1 < n) delta[r + 1]--;\\n        }\\n        int[] newDelta = new int[n];\\n        newDelta[0] = delta[0];\\n        for (int i = 1; i < n; i++) {\\n            newDelta[i] = newDelta[i - 1] + delta[i];\\n        }\\n        for (int i = 0; i < n; i++) {\\n            int reduced = nums[i] - newDelta[i];\\n            if (reduced > 0) return false;\\n        }\\n        return true;\\n    }\\n}","compare_result":null,"title_slug":"zero-array-transformation-i","has_notes":false,"flag_type":1,"frontend_id":478},{"id":1639408250,"question_id":3639,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747753605,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1639408250/","is_pending":"Not Pending","title":"Zero Array Transformation I","memory":"N/A","code":"class Solution {\\n    public boolean isZeroArray(int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        int[] diff = new int[n + 1];\\n        for (int[] q : queries) {\\n            int l = q[0];\\n            int r = q[1];\\n            diff[l] -= 1;\\n            if (r + 1 < n) {\\n                diff[r + 1] += 1;\\n            }\\n        }\\n        int curr = 0;\\n        for (int i = 0; i < n; i++) {\\n            curr += diff[i];\\n            nums[i] += curr;\\n            if (nums[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n","compare_resulttitle_slug":"zero-array-transformation-i","has_notes":false,"flag_type":1,"frontend_id":477},{"id":1639406181,"question_id":3639,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747753466,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1639406181/","is_pending":"Not Pending","title":"Zero Array Transformation I","memory":"N/A","code":"class Solution {\\n    public boolean isZeroArray(int[] nums, int[][] queries) {\\n        for (int i = 0; i < queries.length; i++) {\\n            for (int j = queries[i][0]; j <= queries[i][1]; j++) {\\n                if (nums[j] > 0) {\\n                    nums[j]--;\\n                }\\n            }\\n        }\\n        for (int x : nums) {\\n            if (x != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}","compare_resulttitle_slug":"zero-array-transformation-i","has_notes":false,"flag_type":1,"frontend_id":476},{"id":1637810438,"question_id":154,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747624911,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1637810438/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array II","memory":"43.3 MB","code":"class Solution {\\n    public int findMin(int[] nums) {\\n        int m=nums[0];\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            if(nums[i]<m)\\n            m=nums[i];\\n        }\\n        return m;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1,"frontend_id":475},{"id":1637801891,"question_id":3321,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747624065,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1637801891/","is_pending":"Not Pending","title":"Type of Triangle","memory":"42.3 MB","code":"class Solution \\n{\\n    public String triangleType(int[] nums) \\n    {\\n        if(nums[0]+nums[1]<=nums[2]||nums[1]+nums[2]<=nums[0]||nums[0]+nums[2]<=nums[1])\\n        return \\"none\\";\\n        if(nums[0]==nums[1]&&nums[1]==nums[2])\\n        return \\"equilateral\\";\\n        if(nums[0]!=nums[1]&&nums[0]!=nums[2]&&nums[1]!=nums[2])\\n        return \\"scalene\\";\\n        return \\"isosceles\\";\\n\\n    }\\n}","compare_resulttitle_slug":"type-of-triangle","has_notes":false,"flag_type":1,"frontend_id":474},{"id":1637799804,"question_id":3321,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747623863,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1637799804/","is_pending":"Not Pending","title":"Type of Triangle","memory":"N/A","code":"class Solution \\n{\\n    public String triangleType(int[] nums) \\n    {\\n        if(nums[0]==nums[1]&&nums[1]==nums[2])\\n        return \\"equilateral\\";\\n        if(nums[0]!=nums[1]&&nums[0]!=nums[2]&&nums[1]!=nums[2])\\n        return \\"scalene\\";\\n        return \\"isosceles\\";\\n        \\n    }\\n}","compare_resulttitle_slug":"type-of-triangle","has_notes":false,"flag_type":1,"frontend_id":473},{"id":1636864650,"question_id":3847,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747535944,"status":10,"status_display":"Accepted","runtime":"1061 ms","url":"/submissions/detail/1636864650/","is_pending":"Not Pending","title":"Minimum Swaps to Sort by Digit Sum","memory":"60.7 MB","code":"class Solution \\n{\\n    public int minSwaps(int[] a) \\n    {\\n        int n = a.length, res = 0;\\n        int[][] b = new int[n][2];\\n        for (int i = 0; i < n; i++) b[i] = new int[]{a[i], i};\\n        Arrays.sort(b, (x, y) -> \\n        {\\n            int sx = ds(x[0]), sy = ds(y[0]);\\n            return sx == sy ? x[0] - y[0] : sx - sy;\\n        });\\n        boolean[] v = new boolean[n];\\n        for (int i = 0; i < n; i++) \\n        {\\n            if (v[i] || b[i][1] == i) continue;\\n            int c = 0, j = i;\\n            while (!v[j]) \\n            {\\n                v[j] = true;\\n                j = b[j][1];\\n                c++;\\n            }\\n            res += c - 1;\\n        }\\n        return res;\\n    }\\n    int ds(int x) \\n    {\\n        int s = 0;\\n        while (x > 0) \\n        {\\n            s += x % 10;\\n            x /= 10;\\n        }\\n        return s;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-swaps-to-sort-by-digit-sum","has_notes":false,"flag_type":1,"frontend_id":472},{"id":1636859409,"question_id":3869,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747535722,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1636859409/","is_pending":"Not Pending","title":"Smallest Index With Digit Sum Equal to Index","memory":"44.9 MB","code":"class Solution {\\n    public int smallestIndex(int[] a) {\\n        for (int i = 0; i < a.length; i++) {\\n            int s = 0, n = a[i];\\n            while (n > 0) {\\n                s += n % 10;\\n                n /= 10;\\n            }\\n            if (s == i) return i;\\n        }\\n        return -1;\\n    }\\n}\\n","compare_resulttitle_slug":"smallest-index-with-digit-sum-equal-to-index","has_notes":false,"flag_type":1,"frontend_id":471}],"has_next":true,"last_key":""}'
2025-08-25 23:29:24,831 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:24,845 [INFO] __main__.py:245 - Writing longest-palindrome-by-concatenating-two-letter-words/2025-05-25 21.19.06 - Accepted - runtime 13ms - memory 60.9MB.java
2025-08-25 23:29:25,171 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:25,171 [INFO] __main__.py:245 - Writing resulting-string-after-adjacent-removals/2025-05-25 08.36.58 - Accepted - runtime 99ms - memory 46.3MB.java
2025-08-25 23:29:25,496 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:25,497 [INFO] __main__.py:245 - Writing find-minimum-log-transportation-cost/2025-05-25 08.34.04 - Accepted - runtime 1ms - memory 40.6MB.java
2025-08-25 23:29:25,497 [INFO] __main__.py:188 - Skipping find-minimum-log-transportation-cost 2025-05-25 08.33.52 because its status is 'Compile Error'
2025-08-25 23:29:25,498 [INFO] __main__.py:208 - Skipping find-minimum-log-transportation-cost 2025-05-25 08.20.21 in java because a more recent submission has already been exported
2025-08-25 23:29:25,977 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:25,981 [INFO] __main__.py:245 - Writing find-words-containing-character/2025-05-24 09.47.34 - Accepted - runtime 1ms - memory 45MB.java
2025-08-25 23:29:26,315 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:26,315 [INFO] __main__.py:245 - Writing find-the-maximum-sum-of-node-values/2025-05-23 13.54.43 - Accepted - runtime 2ms - memory 54.5MB.java
2025-08-25 23:29:27,007 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:27,009 [INFO] __main__.py:245 - Writing zero-array-transformation-iii/2025-05-22 22.59.53 - Accepted - runtime 92ms - memory 99.4MB.java
2025-08-25 23:29:27,326 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:27,340 [INFO] __main__.py:245 - Writing set-matrix-zeroes/2025-05-21 13.47.42 - Accepted - runtime 0ms - memory 45.9MB.java
2025-08-25 23:29:27,728 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:27,730 [INFO] __main__.py:245 - Writing zero-array-transformation-i/2025-05-20 20.39.54 - Accepted - runtime 3ms - memory 96.3MB.java
2025-08-25 23:29:27,732 [INFO] __main__.py:208 - Skipping zero-array-transformation-i 2025-05-20 20.39.41 in java because a more recent submission has already been exported
2025-08-25 23:29:27,732 [INFO] __main__.py:208 - Skipping zero-array-transformation-i 2025-05-20 20.38.44 in java because a more recent submission has already been exported
2025-08-25 23:29:27,733 [INFO] __main__.py:188 - Skipping zero-array-transformation-i 2025-05-20 20.38.00 because its status is 'Compile Error'
2025-08-25 23:29:27,733 [INFO] __main__.py:188 - Skipping zero-array-transformation-i 2025-05-20 20.36.45 because its status is 'Wrong Answer'
2025-08-25 23:29:27,733 [INFO] __main__.py:188 - Skipping zero-array-transformation-i 2025-05-20 20.34.26 because its status is 'Time Limit Exceeded'
2025-08-25 23:29:28,078 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:28,080 [INFO] __main__.py:245 - Writing find-minimum-in-rotated-sorted-array-ii/2025-05-19 08.51.51 - Accepted - runtime 0ms - memory 43.3MB.java
2025-08-25 23:29:28,438 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:28,442 [INFO] __main__.py:245 - Writing type-of-triangle/2025-05-19 08.37.45 - Accepted - runtime 0ms - memory 42.3MB.java
2025-08-25 23:29:28,444 [INFO] __main__.py:188 - Skipping type-of-triangle 2025-05-19 08.34.23 because its status is 'Wrong Answer'
2025-08-25 23:29:28,956 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:28,959 [INFO] __main__.py:245 - Writing minimum-swaps-to-sort-by-digit-sum/2025-05-18 08.09.04 - Accepted - runtime 1061ms - memory 60.7MB.java
2025-08-25 23:29:29,295 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:29,313 [INFO] __main__.py:245 - Writing smallest-index-with-digit-sum-equal-to-index/2025-05-18 08.05.22 - Accepted - runtime 1ms - memory 44.9MB.java
2025-08-25 23:29:34,315 [DEBUG] leetcode.py:150 - Exporting submissions from 180 to 200
2025-08-25 23:29:34,792 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=180&limit=20 HTTP/11" 200 None
2025-08-25 23:29:34,792 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1636807533,"question_id":2061,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747527507,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1636807533/","is_pending":"Not Pending","title":"Painting a Grid With Three Different Colors","memory":"44.8 MB","code":"class Solution \\n{\\n    public int colorTheGrid(int m, int n) \\n    {\\n        final int MOD = 1_000_000_007;\\n        List<Integer> s = new ArrayList<>();\\n        dfs(0, -1, 0, m, s);\\n        int S = s.size();\\n        List<List<Integer>> compat = new ArrayList<>(S);\\n        for (int i = 0; i < S; i++) compat.add(new ArrayList<>());\\n        for (int i = 0; i < S; i++) \\n        {\\n            for (int j = 0; j < S; j++) \\n            {\\n                int x = s.get(i), y = s.get(j);\\n                boolean ok = true;\\n                for (int k = 0; k < m; k++) \\n                {\\n                    if (x % 3 == y % 3) \\n                    { \\n                        ok = false; break; \\n                    }\\n                    x /= 3; y /= 3;\\n                }\\n                if (ok) compat.get(i).add(j);\\n            }\\n        }\\n        int[] dp = new int[S];\\n        Arrays.fill(dp, 1);\\n        int[] new_dp = new int[S];\\n        for (int t = 0; t < n - 1; t++)\\n         {\\n            Arrays.fill(new_dp, 0);\\n            for (int i = 0; i < S; i++) \\n            {\\n                if (dp[i] != 0) \\n                {\\n                    for (int j : compat.get(i)) \\n                    {\\n                        new_dp[j] = (new_dp[j] + dp[i]) % MOD;\\n                    }\\n                }\\n            }\\n            int[] tmp = dp; dp = new_dp; new_dp = tmp;\\n        }\\n        long ans = 0;\\n        for (int v : dp) ans = (ans + v) % MOD;\\n        return (int)ans;\\n    }\\n    private void dfs(int pos, int prev_color, int mask, int m, List<Integer> states) \\n    {\\n        if (pos == m) \\n        {\\n            states.add(mask);\\n            return;\\n        }\\n        for (int color = 0; color < 3; color++) \\n        {\\n            if (color != prev_color) \\n            {\\n                dfs(pos + 1, color, mask * 3 + color, m, states);\\n            }\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"painting-a-grid-with-three-different-colors","has_notes":false,"flag_type":1,"frontend_id":470},{"id":1636133543,"question_id":75,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747463884,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1636133543/","is_pending":"Not Pending","title":"Sort Colors","memory":"42.6 MB","code":"class Solution \\n{\\n    public void sortColors(int[] nums)\\n    {\\n        int m=0;\\n        int l=0;\\n        int h=nums.length-1;\\n        while(m<=h)\\n        {\\n            if(nums[m]==0)\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[l];\\n                nums[l]=temp;\\n                l++;\\n                m++;\\n            }\\n            else if(nums[m]==1)\\n            {\\n                m++;\\n            }\\n            else\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[h];\\n                nums[h]=temp;\\n                h--;\\n            }\\n        }\\n        //Arrays.sort(nums);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-colors","has_notes":false,"flag_type":1,"frontend_id":469},{"id":1636133194,"question_id":75,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747463857,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1636133194/","is_pending":"Not Pending","title":"Sort Colors","memory":"41.8 MB","code":"class Solution \\n{\\n    public void sortColors(int[] nums)\\n    {/*\\n        int m=0;\\n        int l=0;\\n        int h=nums.length-1;\\n        while(m<=h)\\n        {\\n            if(nums[m]==0)\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[l];\\n                nums[l]=temp;\\n                l++;\\n                m++;\\n            }\\n            else if(nums[m]==1)\\n            {\\n                m++;\\n            }\\n            else\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[h];\\n                nums[h]=temp;\\n                h--;\\n            }\\n        }*/\\n        Arrays.sort(nums);\\n        //return nums;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-colors","has_notes":false,"flag_type":1,"frontend_id":468},{"id":1636131894,"question_id":75,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747463752,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1636131894/","is_pending":"Not Pending","title":"Sort Colors","memory":"42 MB","code":"class Solution \\n{\\n    public void sortColors(int[] nums)\\n    {\\n        int m=0;\\n        int l=0;\\n        int h=nums.length-1;\\n        while(m<=h)\\n        {\\n            if(nums[m]==0)\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[l];\\n                nums[l]=temp;\\n                l++;\\n                m++;\\n            }\\n            else if(nums[m]==1)\\n            {\\n                m++;\\n            }\\n            else\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[h];\\n                nums[h]=temp;\\n                h--;\\n            }\\n        }\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-colors","has_notes":false,"flag_type":1,"frontend_id":467},{"id":1635265896,"question_id":3142,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747373987,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/1635265896/","is_pending":"Not Pending","title":"Longest Unequal Adjacent Groups Subsequence II","memory":"45.2 MB","code":"class Solution \\n{\\n    public List<String> getWordsInLongestSubsequence(String[] w, int[] g) \\n    {\\n        int n = w.length;\\n        int[] dp = new int[n];\\n        int[] p = new int[n];\\n        Arrays.fill(dp, 1);\\n        Arrays.fill(p, -1);\\n        for (int i = 0; i < n; i++) \\n        {\\n            for (int j = 0; j < i; j++) \\n            {\\n                if (g[i] != g[j] && w[i].length() == w[j].length() && dist(w[i], w[j]) == 1) \\n                {\\n                    if (dp[j] + 1 > dp[i]) \\n                    {\\n                        dp[i] = dp[j] + 1;\\n                        p[i] = j;\\n                    }\\n                }\\n            }\\n        }\\n        int idx = 0;\\n        for (int i = 1; i < n; i++) \\n        {\\n            if (dp[i] > dp[idx]) \\n            {\\n                idx = i;\\n            }\\n        }\\n        LinkedList<String> res = new LinkedList<>();\\n        while (idx != -1) \\n        {\\n            res.addFirst(w[idx]);\\n            idx = p[idx];\\n        }\\n        return res;\\n    }\\n    private int dist(String a, String b) \\n    {\\n        int d = 0;\\n        for (int i = 0; i < a.length(); i++) \\n        {\\n            if (a.charAt(i) != b.charAt(i)) d++;\\n        }\\n        return d;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-unequal-adjacent-groups-subsequence-ii","has_notes":false,"flag_type":1,"frontend_id":466},{"id":1634370272,"question_id":71,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747288271,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1634370272/","is_pending":"Not Pending","title":"Simplify Path","memory":"43.5 MB","code":"class Solution {\\n    public String simplifyPath(String path) {\\n        String[] c = path.split(\\"/\\");\\n        Stack<String> st = new Stack<>();\\n        for (String comp : c) {\\n            if (comp.equals(\\"\\") || comp.equals(\\".\\")) {\\n                continue;\\n            }\\n            if (comp.equals(\\"..\\")) {\\n                if (!st.isEmpty()) {\\n                    st.pop();\\n                }\\n            } else {\\n                st.push(comp);\\n            }\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        while (!st.isEmpty()) {\\n            sb.insert(0, \\"/\\" + st.pop());\\n        }\\n        return sb.length() == 0 ? \\"/\\" : sb.toString();        \\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"simplify-path","has_notes":false,"flag_type":1,"frontend_id":465},{"id":1634354423,"question_id":3143,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747287064,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1634354423/","is_pending":"Not Pending","title":"Longest Unequal Adjacent Groups Subsequence I","memory":"45.1 MB","code":"class Solution \\n{\\n    public List<String> getLongestSubsequence(String[] words, int[] g) \\n    {\\n        int s=g[0];\\n        List<String> ans=new ArrayList<>();\\n        ans.add(words[0]);\\n        for(int i=1;i<words.length;i++)\\n        {\\n            if(g[i]!=s)\\n            {\\n                ans.add(words[i]);\\n                s=g[i];\\n            }\\n        }\\n        return ans;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-unequal-adjacent-groups-subsequence-i","has_notes":false,"flag_type":1,"frontend_id":464},{"id":1633346298,"question_id":3630,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747190544,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/1633346298/","is_pending":"Not Pending","title":"Total Characters in String After Transformations II","memory":"45.5 MB","code":"class Solution\\n {\\n    private final int mod = 1000000007;\\n    public int lengthAfterTransformations(String s, int t, List<Integer> nums)\\n     {\\n        if(t == 0) return s.length() % mod;\\n        long[] freq = new long[26];\\n        for(char ch : s.toCharArray()) \\n        {\\n            freq[ch - \'a\']++;\\n        }\\n        long[][] m = new long[26][26];\\n        for(int i=0; i<26; i++) \\n        {\\n            int num = nums.get(i);\\n            for(int j=1; j<=num; j++)\\n            {\\n                m[i][(i + j) % 26] = 1;\\n            }\\n        }\\n        long[][] mt = matrixPower(m, t);\\n        long[] rowsum = new long[26];\\n        for(int i=0; i<26; i++)\\n         {\\n            for(int j=0; j<26; j++) \\n            {\\n                rowsum[i] = (rowsum[i] + mt[i][j]) % mod;\\n            }\\n         }\\n        long total = 0;\\n        for(int i=0; i<26; i++) \\n        {\\n            total = (total + (freq[i]*rowsum[i]) % mod) % mod;\\n        }\\n        return (int) total;\\n    }\\n    private long[][] matrixPower(long[][] m, int power)\\n     {\\n        long[][] ans = new long[26][26];\\n        for(int i=0; i<26; i++)\\n        {\\n            ans[i][i] = 1;\\n        }\\n        long[][] base = new long[26][26];\\n        for(int i=0; i<26; i++) \\n        {\\n            System.arraycopy(m[i], 0, base[i], 0, 26);\\n        }\\n        while(power > 0) \\n        {\\n            if((power & 1) == 1) ans = multiply(ans, base);\\n            base = multiply(base, base);\\n            power >>= 1;\\n        }\\n        return ans;\\n    }\\n      private long[][] multiply(long[][] a, long[][] b) \\n    {\\n        long[][] c = new long[26][26];\\n        for(int i=0; i<26; i++) \\n        {\\n            for(int k=0; k<26; k++) \\n            {\\n                if(a[i][k] != 0) \\n                {\\n                    for(int j=0; j<26; j++) \\n                    {\\n                        c[i][j] = (c[i][j] + a[i][k]*b[k][j]) % mod;\\n                    }\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"total-characters-in-string-after-transformations-ii","has_notes":false,"flag_type":1,"frontend_id":463},{"id":1632786670,"question_id":3629,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1747138076,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1632786670/","is_pending":"Not Pending","title":"Total Characters in String After Transformations I","memory":"45.6 MB","code":"class Solution \\n{\\n    public int lengthAfterTransformations(String s, int t) \\n    {\\n        int[] f = new int[26];\\n        int m = 1000000007;\\n        for (int i = 0; i < s.length(); i++) \\n        {\\n            f[s.charAt(i) - \'a\']++;\\n        }\\n        for (int i = 0; i < t; i++) \\n        {\\n            int x = f[25];\\n            for (int j = 25; j >= 1; j--) \\n            {\\n                f[j] = f[j - 1];\\n            }\\n            f[0] = x;\\n            f[1] = (f[1] + x) % m;\\n        }\\n        int res = 0;\\n        for (int i = 0; i < 26; i++) \\n        {\\n            res = (res + f[i]) % m;\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"total-characters-in-string-after-transformations-i","has_notes":false,"flag_type":1,"frontend_id":462},{"id":1632120312,"question_id":66,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1747071568,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1632120312/","is_pending":"Not Pending","title":"Plus One","memory":"41.8 MB","code":"class Solution {\\n    public int[] plusOne(int[] digits)\\n     {\\n        int n=digits.length;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if(digits[i]+1!=10)\\n            {\\n                digits[i]+=1;\\n                return digits;\\n            }\\n            digits[i]=0;\\n        }\\n        int nd[]=new int[n+1];\\n        nd[0]=1;\\n        return nd;\\n        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"plus-one","has_notes":false,"flag_type":1,"frontend_id":461},{"id":1631621558,"question_id":2215,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1747029504,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1631621558/","is_pending":"Not Pending","title":"Finding 3-Digit Even Numbers","memory":"44.8 MB","code":"class Solution {\\n    public int[] findEvenNumbers(int[] digits) {\\n        int[] mpp = new int[10];\\n        for (int d : digits) mpp[d]++;\\n        List<Integer> res = new ArrayList<>();\\n        for (int i = 1; i <= 9; i++) {\\n            if (mpp[i] == 0) continue;\\n            mpp[i]--;\\n            for (int j = 0; j <= 9; j++) {\\n                if (mpp[j] == 0) continue;\\n                mpp[j]--;\\n                for (int k = 0; k <= 8; k += 2) {\\n                    if (mpp[k] == 0) continue;\\n                    mpp[k]--;\\n                    res.add(i*100 + j*10 + k);\\n                    mpp[k]++;\\n                }\\n                mpp[j]++;\\n            }\\n            mpp[i]++;\\n        }\\n        return res.stream().mapToInt(Integer::intValue).toArray();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"finding-3-digit-even-numbers","has_notes":false,"flag_type":1,"frontend_id":460},{"id":1631618153,"question_id":1293,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1747029219,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1631618153/","is_pending":"Not Pending","title":"Three Consecutive Odds","memory":"42.1 MB","code":"class Solution {\\n    public boolean threeConsecutiveOdds(int[] arr) {\\n        int count = 0;\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] % 2 != 0) { \\n                count++;\\n                if (count == 3) {\\n                    return true;\\n                }\\n            } else {\\n                count = 0;\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"three-consecutive-odds","has_notes":false,"flag_type":1,"frontend_id":459},{"id":1630605854,"question_id":3849,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1746931531,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1630605854/","is_pending":"Not Pending","title":"Equal Sum Grid Partition I","memory":"67 MB","code":"class Solution {\\n    public boolean canPartitionGrid(int[][] g) {\\n        int m = g.length, n = g[0].length;\\n        long t = 0;\\n        for (int[] r : g)\\n            for (int v : r) t += v;\\n        long rs = 0;\\n        for (int i = 0; i < m - 1; i++) {\\n            for (int j = 0; j < n; j++) rs += g[i][j];\\n            if (rs * 2 == t) return true;\\n        }\\n        long[] cs = new long[n];\\n        for (int i = 0; i < m; i++)\\n            for (int j = 0; j < n; j++) cs[j] += g[i][j];\\n\\n        long csum = 0;\\n        for (int j = 0; j < n - 1; j++) {\\n            csum += cs[j];\\n            if (csum * 2 == t) return true;\\n        }\\n        return false;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"equal-sum-grid-partition-i","has_notes":false,"flag_type":1,"frontend_id":458},{"id":1630603112,"question_id":3871,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1746931412,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1630603112/","is_pending":"Not Pending","title":"Minimum Deletions for At Most K Distinct Characters","memory":"43.1 MB","code":"class Solution\\n    {\\n    public int minDeletion(String s, int k) {\\n        Map<Character, Integer> f = new HashMap<>();\\n        for (char c : s.toCharArray())\\n            f.put(c, f.getOrDefault(c, 0) + 1);\\n        \\n        if (f.size() <= k) return 0;\\n\\n        List<Integer> vals = new ArrayList<>(f.values());\\n        Collections.sort(vals);\\n\\n        int del = 0;\\n        for (int i = 0; i < f.size() - k; i++)\\n            del += vals.get(i);\\n        \\n        return del;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-deletions-for-at-most-k-distinct-characters","has_notes":false,"flag_type":1,"frontend_id":457},{"id":1629763893,"question_id":3171,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1746851253,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1629763893/","is_pending":"Not Pending","title":"Minimum Equal Sum of Two Arrays After Replacing Zeros","memory":"60.5 MB","code":"class Solution {\\n    public long minSum(int[] nums1, int[] nums2) {\\n        long nums1Zeroes = 0, nums2Zeroes = 0,sum1 = 0, sum2 = 0;\\n        for(int i : nums1){\\n            if(i == 0) nums1Zeroes++;\\n            sum1 += i;\\n        }\\n\\n        for(int i : nums2){\\n            if(i == 0) nums2Zeroes++;\\n            sum2 += i;\\n        }\\n\\n        long min1 = sum1 + nums1Zeroes;\\n        long min2 = sum2 + nums2Zeroes;\\n\\n        if(nums1Zeroes == 0 && nums2Zeroes == 0){\\n            return sum1 == sum2 ? sum1 : -1;\\n        }else if(nums1Zeroes == 0){\\n            return sum2 + nums2Zeroes <=sum1 ?sum1 : -1;\\n        }else if (nums2Zeroes == 0){\\n            return sum1 + nums1Zeroes <= sum2 ? sum2 : -1;\\n        }\\n        return Math.max(min1, min2);\\n    }\\n}","compare_resulttitle_slug":"minimum-equal-sum-of-two-arrays-after-replacing-zeros","has_notes":false,"flag_type":1,"frontend_id":456},{"id":1628981966,"question_id":3637,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1746754842,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/1628981966/","is_pending":"Not Pending","title":"Count Number of Balanced Permutations","memory":"45.6 MB","code":"import java.util.Arrays;\\n\\nclass Solution {\\n    private static final int M = 1_000_000_007;\\n    private static final int N = 41;\\n    private static final long[] F = new long[N];\\n    private static final long[] IF = new long[N];\\n\\n    static {\\n        initF();\\n        initIF();\\n    }\\n\\n    private static void initF() {\\n        F[0] = 1;\\n        for (int i = 1; i < N; i++) {\\n            F[i] = F[i - 1] * i % M;\\n        }\\n    }\\n\\n    private static void initIF() {\\n        IF[N - 1] = pow(F[N - 1], M - 2);\\n        for (int i = N - 1; i > 0; i--) {\\n            IF[i - 1] = IF[i] * i % M;\\n        }\\n    }\\n\\n    public int countBalancedPermutations(String s) {\\n        int[] cnt = countDigits(s);\\n        int sum = digitSum(s);\\n        if (sum % 2 != 0) return 0;\\n        for (int i = 1; i < 10; i++) {\\n            cnt[i] += cnt[i - 1];\\n        }\\n        int len = s.length(), h = len / 2;\\n        int[][][] dp = initDP(h, sum);\\n        return (int) (F[h] * F[len - h] % M * dfs(9, h, sum / 2, cnt, dp) % M);\\n    }\\n\\n    private int[] countDigits(String s) {\\n        int[] a = new int[10];\\n        for (char c : s.toCharArray()) {\\n            a[c - \'0\']++;\\n        }\\n        return a;\\n    }\\n\\n    private int digitSum(String s) {\\n        int sum = 0;\\n        for (char c : s.toCharArray()) sum += c - \'0\';\\n        return sum;\\n    }\\n\\n    private int[][][] initDP(int h, int sum) {\\n        int[][][] dp = new int[10][h + 1][sum / 2 + 1];\\n        for (int[][] m : dp)\\n            for (int[] r : m)\\n                Arrays.fill(r, -1);\\n        return dp;\\n    }\\n\\n    private int dfs(int d, int l, int s, int[] cnt, int[][][] dp) {\\n        if (d < 0) return s == 0 ? 1 : 0;\\n        if (dp[d][l][s] != -1) return dp[d][l][s];\\n        long res = 0;\\n        int c = cnt[d] - (d > 0 ? cnt[d - 1] : 0);\\n        int r = cnt[d] - l;\\n        for (int k = Math.max(c - r, 0); k <= Math.min(c, l) && k * d <= s; k++) {\\n            long sub = dfs(d - 1, l - k, s - k * d, cnt, dp);\\n            res = (res + sub * IF[k] % M * IF[c - k]) % M;\\n        }\\n        dp[d][l][s] = (int) res;\\n        return (int) res;\\n    }\\n\\n    private static long pow(long b, int e) {\\n        long r = 1;\\n        while (e > 0) {\\n            if ((e & 1) == 1) r = r * b % M;\\n            b = b * b % M;\\n            e >>= 1;\\n        }\\n        return r;\\n    }\\n}\\n","compare_resulttitle_slug":"count-number-of-balanced-permutations","has_notes":false,"flag_type":1,"frontend_id":455},{"id":1628744652,"question_id":3628,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1746723380,"status":10,"status_display":"Accepted","runtime":"222 ms","url":"/submissions/detail/1628744652/","is_pending":"Not Pending","title":"Find Minimum Time to Reach Last Room II","memory":"111.5 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public int minTimeToReach(int[][] moveTime) {\\n        int n = moveTime.length, m = moveTime[0].length;\\n        boolean[][] vis = new boolean[n][m];\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\\n        pq.offer(new int[]{0, 0, 0, 0}); // {time, moves, row, col}\\n        vis[0][0] = true;\\n        int[][] dirs = {{0,1}, {1,0}, {-1,0}, {0,-1}};\\n\\n        while (!pq.isEmpty()) {\\n            int[] curr = pq.poll();\\n            int t = curr[0], moves = curr[1], r = curr[2], c = curr[3];\\n            if (r == n - 1 && c == m - 1) return t;\\n\\n            for (int[] d : dirs) {\\n                int nr = r + d[0], nc = c + d[1];\\n                if (nr >= 0 && nc >= 0 && nr < n && nc < m && !vis[nr][nc]) {\\n                    vis[nr][nc] = true;\\n                    int wait = Math.max(t, moveTime[nr][nc]);\\n                    int travel = (moves % 2 == 0) ? 1 : 2;\\n                    pq.offer(new int[]{wait + travel, moves + 1, nr, nc});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}","compare_resulttitle_slug":"find-minimum-time-to-reach-last-room-ii","has_notes":false,"flag_type":1,"frontend_id":454},{"id":1628008048,"question_id":3627,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1746639949,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1628008048/","is_pending":"Not Pending","title":"Find Minimum Time to Reach Last Room I","memory":"45.4 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public int minTimeToReach(int[][] moveTime) {\\n        int m = moveTime.length, n = moveTime[0].length;\\n        int[][] dist = new int[m][n];\\n        for (int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);\\n        dist[0][0] = 0;\\n\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\\n        pq.offer(new int[]{0, 0, 0}); // time, row, col\\n\\n        int[] dr = {-1, 0, 1, 0}, dc = {0, 1, 0, -1};\\n\\n        while (!pq.isEmpty()) {\\n            int[] curr = pq.poll();\\n            int time = curr[0], r = curr[1], c = curr[2];\\n\\n            if (r == m - 1 && c == n - 1) return time;\\n\\n            for (int i = 0; i < 4; i++) {\\n                int nr = r + dr[i], nc = c + dc[i];\\n                if (nr >= 0 && nc >= 0 && nr < m && nc < n) {\\n                    int newTime = Math.max(time, moveTime[nr][nc]) + 1;\\n                    if (newTime < dist[nr][nc]) {\\n                        dist[nr][nc] = newTime;\\n                        pq.offer(new int[]{newTime, nr, nc});\\n                    }\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}","compare_resulttitle_slug":"find-minimum-time-to-reach-last-room-i","has_notes":false,"flag_type":1,"frontend_id":453},{"id":1626933234,"question_id":2048,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746530805,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1626933234/","is_pending":"Not Pending","title":"Build Array from Permutation","memory":"45.5 MB","code":"class Solution {\\n    public int[] buildArray(int[] nums) {\\n        int n=nums.length;\\n        int arr[]=new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            arr[i]=nums[nums[i]];\\n        }\\n        return arr;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"build-array-from-permutation","has_notes":false,"flag_type":1,"frontend_id":452},{"id":1626324704,"question_id":806,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746467055,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1626324704/","is_pending":"Not Pending","title":"Domino and Tromino Tiling","memory":"40.2 MB","code":"class Solution {\\n    public int numTilings(int n) {\\n        long[] dp = new long[Math.max(4, n + 1)];\\n        int MOD = 1_000_000_007;\\n        dp[1] = 1; dp[2] = 2; dp[3] = 5;\\n        for (int i = 4; i <= n; i++) {\\n            dp[i] = (2 * dp[i - 1] + dp[i - 3]) % MOD;\\n        }\\n        return (int) dp[n];\\n    }\\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"domino-and-tromino-tiling","has_notes":false,"flag_type":1,"frontend_id":451}],"has_next":true,"last_key":""}'
2025-08-25 23:29:35,170 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:35,174 [INFO] __main__.py:245 - Writing painting-a-grid-with-three-different-colors/2025-05-18 05.48.27 - Accepted - runtime 33ms - memory 44.8MB.java
2025-08-25 23:29:35,176 [INFO] __main__.py:208 - Skipping sort-colors 2025-05-17 12.08.04 in java because a more recent submission has already been exported
2025-08-25 23:29:35,176 [INFO] __main__.py:208 - Skipping sort-colors 2025-05-17 12.07.37 in java because a more recent submission has already been exported
2025-08-25 23:29:35,176 [INFO] __main__.py:208 - Skipping sort-colors 2025-05-17 12.05.52 in java because a more recent submission has already been exported
2025-08-25 23:29:35,614 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:35,615 [INFO] __main__.py:245 - Writing longest-unequal-adjacent-groups-subsequence-ii/2025-05-16 11.09.47 - Accepted - runtime 103ms - memory 45.2MB.java
2025-08-25 23:29:35,998 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:36,000 [INFO] __main__.py:245 - Writing simplify-path/2025-05-15 11.21.11 - Accepted - runtime 4ms - memory 43.5MB.java
2025-08-25 23:29:36,328 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:36,331 [INFO] __main__.py:245 - Writing longest-unequal-adjacent-groups-subsequence-i/2025-05-15 11.01.04 - Accepted - runtime 1ms - memory 45.1MB.java
2025-08-25 23:29:36,661 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:36,664 [INFO] __main__.py:245 - Writing total-characters-in-string-after-transformations-ii/2025-05-14 08.12.24 - Accepted - runtime 78ms - memory 45.5MB.java
2025-08-25 23:29:37,042 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:37,046 [INFO] __main__.py:245 - Writing total-characters-in-string-after-transformations-i/2025-05-13 17.37.56 - Accepted - runtime 47ms - memory 45.6MB.java
2025-08-25 23:29:37,552 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:37,552 [INFO] __main__.py:245 - Writing plus-one/2025-05-12 23.09.28 - Accepted - runtime 0ms - memory 41.8MB.java
2025-08-25 23:29:38,276 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:38,280 [INFO] __main__.py:245 - Writing finding-3-digit-even-numbers/2025-05-12 11.28.24 - Accepted - runtime 6ms - memory 44.8MB.java
2025-08-25 23:29:38,886 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:38,896 [INFO] __main__.py:245 - Writing three-consecutive-odds/2025-05-12 11.23.39 - Accepted - runtime 0ms - memory 42.1MB.java
2025-08-25 23:29:39,383 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:39,394 [INFO] __main__.py:245 - Writing equal-sum-grid-partition-i/2025-05-11 08.15.31 - Accepted - runtime 4ms - memory 67MB.java
2025-08-25 23:29:39,743 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:39,745 [INFO] __main__.py:245 - Writing minimum-deletions-for-at-most-k-distinct-characters/2025-05-11 08.13.32 - Accepted - runtime 4ms - memory 43.1MB.java
2025-08-25 23:29:40,081 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:40,083 [INFO] __main__.py:245 - Writing minimum-equal-sum-of-two-arrays-after-replacing-zeros/2025-05-10 09.57.33 - Accepted - runtime 3ms - memory 60.5MB.java
2025-08-25 23:29:40,523 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:40,527 [INFO] __main__.py:245 - Writing count-number-of-balanced-permutations/2025-05-09 07.10.42 - Accepted - runtime 30ms - memory 45.6MB.java
2025-08-25 23:29:40,858 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:40,860 [INFO] __main__.py:245 - Writing find-minimum-time-to-reach-last-room-ii/2025-05-08 22.26.20 - Accepted - runtime 222ms - memory 111.5MB.java
2025-08-25 23:29:41,251 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:41,253 [INFO] __main__.py:245 - Writing find-minimum-time-to-reach-last-room-i/2025-05-07 23.15.49 - Accepted - runtime 8ms - memory 45.4MB.java
2025-08-25 23:29:41,747 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:41,749 [INFO] __main__.py:245 - Writing build-array-from-permutation/2025-05-06 16.56.45 - Accepted - runtime 1ms - memory 45.5MB.java
2025-08-25 23:29:42,109 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:42,113 [INFO] __main__.py:245 - Writing domino-and-tromino-tiling/2025-05-05 23.14.15 - Accepted - runtime 0ms - memory 40.2MB.java
2025-08-25 23:29:47,115 [DEBUG] leetcode.py:150 - Exporting submissions from 200 to 220
2025-08-25 23:29:47,588 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=200&limit=20 HTTP/11" 200 None
2025-08-25 23:29:47,604 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1625569260,"question_id":4,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746388305,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1625569260/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"45.8 MB","code":"class Solution {\\n    public double findMedianSortedArrays(int[] a, int[] b) {\\n\\n        int n=a.length;\\n        int m=b.length;\\n        int ma[]=new int[m+n];\\n        int i=0,j=0,k=0;\\n        while(i<n&&j<m)\\n        {\\n            if(a[i]<=b[j])\\n            {\\n                ma[k++]=a[i++];\\n            }\\n            else\\n            {\\n                ma[k++]=b[j++];\\n            }\\n        }\\n        while(i<n)\\n        {\\n            ma[k++]=a[i++];\\n\\n        }\\n        while(j<m)\\n        {\\n            ma[k++]=b[j++];\\n        }\\n        int ml=ma.length;\\n        if(ml%2==1)\\n        {\\n            return (float)ma[ml/2];\\n        }\\n        else \\n        {\\n            return (float)(ma[ml/2-1]+ma[ml/2])/2;\\n        }\\n    }\\n}","compare_resulttitle_slug":"median-of-two-sorted-arrays","has_notes":false,"flag_type":1,"frontend_id":450},{"id":1625129073,"question_id":1227,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746349941,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1625129073/","is_pending":"Not Pending","title":"Number of Equivalent Domino Pairs","memory":"55.5 MB","code":"class Solution {\\n    public int numEquivDominoPairs(int[][] dominoes) {\\n        Map<Integer, Integer> count = new HashMap<>();\\n        int a = 0;\\n        for (int[] d : dominoes) {\\n            int x = Math.min(d[0], d[1]);\\n            int y = Math.max(d[0], d[1]);\\n            int key = (x << 4) | y;\\n            count.put(key, count.getOrDefault(key, 0) + 1);\\n        }\\n        for (int c : count.values()) {\\n            a += c * (c - 1);\\n        }\\n        return a/2;\\n    }\\n}","compare_result":"1111111111111111111","title_slug":"number-of-equivalent-domino-pairs","has_notes":false,"flag_type":1,"frontend_id":449},{"id":1624870001,"question_id":3822,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746326732,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1624870001/","is_pending":"Not Pending","title":"Fill a Special Grid","memory":"87 MB","code":"class Solution {\\n    public int[][] specialGrid(int n) {\\n        return build(n);\\n    }\\n    private int[][] build(int n) {\\n        if (n == 0) return new int[][]{{0}};\\n        int[][] g = build(n - 1);\\n        int s = g.length, ns = s * 2, off = s * s;\\n        int[][] res = new int[ns][ns];\\n        for (int i = 0; i < s; i++) {\\n            for (int j = 0; j < s; j++) {\\n                int v = g[i][j];\\n                res[i][j + s] = v;\\n                res[i + s][j + s] = v + off;\\n                res[i + s][j] = v + 2 * off;\\n                res[i][j] = v + 3 * off;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"11111111111","title_slug":"fill-a-special-grid","has_notes":false,"flag_type":1,"frontend_id":448},{"id":1624865255,"question_id":3859,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746326466,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1624865255/","is_pending":"Not Pending","title":"Maximum Product of Two Digits","memory":"41.1 MB","code":"class Solution {\\n    public int maxProduct(int n) {\\n     String str=Integer.toString(n);\\n        int m=0;\\n      for(int i=0;i<str.length();i++)\\n          {\\n              int d1=str.charAt(i)-\'0\';\\n              for(int j=i+1;j<str.length();j++)\\n                  {\\n                      int d2=str.charAt(j)-\'0\';\\n                      m=Math.max(m,d1*d2);\\n                  }\\n          }\\n        return m;\\n    }\\n}","compare_resulttitle_slug":"maximum-product-of-two-digits","has_notes":false,"flag_type":1,"frontend_id":447},{"id":1624697760,"question_id":1049,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746302833,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1624697760/","is_pending":"Not Pending","title":"Minimum Domino Rotations For Equal Row","memory":"51 MB","code":"class Solution {\\n    public int minDominoRotations(int[] tops, int[] bottoms) {\\n        int res = Integer.MAX_VALUE;\\n        for (int val = 1; val <= 6; val++) {\\n            int topSwaps = 0, bottomSwaps = 0;\\n            boolean valid = true;\\n            for (int i = 0; i < tops.length; i++) {\\n                if (tops[i] != val && bottoms[i] != val) {\\n                    valid = false;\\n                    break;\\n                }\\n                if (tops[i] != val) topSwaps++;\\n                if (bottoms[i] != val) bottomSwaps++;\\n            }\\n            if (valid)\\n                res = Math.min(res, Math.min(topSwaps, bottomSwaps));\\n        }\\n        return res == Integer.MAX_VALUE ? -1 : res;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-domino-rotations-for-equal-row","has_notes":false,"flag_type":1,"frontend_id":446},{"id":1623571923,"question_id":868,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746186572,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1623571923/","is_pending":"Not Pending","title":"Push Dominoes","memory":"45.5 MB","code":"class Solution {\\n    public String pushDominoes(String dominoes) {\\n        char[] arr = dominoes.toCharArray();\\n        int n = arr.length;\\n        int lastRight = -1;\\n        int lastLeft = 0;\\n        for (int i = 0; i < n; i++) {\\n            char c = arr[i];\\n            if (c == \'R\') {\\n                if (lastRight != -1) {\\n                    for (int j = lastRight + 1; j < i; j++) {\\n                        arr[j] = \'R\';\\n                    }\\n                }\\n                lastRight = i;\\n            } else if (c == \'L\') {\\n                if (lastRight != -1) {\\n                    int l = lastRight + 1, r = i - 1;\\n                    while (l < r) {\\n                        arr[l++] = \'R\';\\n                        arr[r--] = \'L\';\\n                    }\\n                    lastRight = -1;\\n                } else {\\n                    for (int j = lastLeft; j < i; j++) {\\n                        arr[j] = \'L\';\\n                    }\\n                }\\n                lastLeft = i;\\n            }\\n        }\\n        if (lastRight != -1) {\\n            for (int i = lastRight + 1; i < n; i++) {\\n                arr[i] = \'R\';\\n            }\\n        }\\n        return new String(arr);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"push-dominoes","has_notes":false,"flag_type":1,"frontend_id":445},{"id":1623010113,"question_id":2180,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746121595,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1623010113/","is_pending":"Not Pending","title":"Maximum Number of Tasks You Can Assign","memory":"55 MB","code":"class Solution {\\n    public int maxTaskAssign(int[] t, int[] w, int p, int s) {\\n        Arrays.sort(t);\\n        Arrays.sort(w);\\n        int l = 0, h = Math.min(t.length, w.length);\\n        while (l < h) {\\n            int m = (l + h + 1) / 2;\\n            if (canAssign(t, w, p, s, m)) {\\n                l = m;\\n            } else {\\n                h = m - 1;\\n            }\\n        }\\n        return l;\\n    }\\n    private boolean canAssign(int[] t, int[] w, int p, int s, int c) {\\n        Deque<Integer> q = new ArrayDeque<>();\\n        int i = w.length - 1;\\n        int r = p;\\n        for (int j = c - 1; j >= 0; j--) {\\n            int task = t[j];\\n            if (!q.isEmpty() && q.peekFirst() >= task) {\\n                q.pollFirst();\\n            } else if (i >= 0 && w[i] >= task) {\\n                i--;\\n            } else {\\n                while (i >= 0 && w[i] + s >= task) {\\n                    q.addLast(w[i--]);\\n                }\\n                if (q.isEmpty() || r == 0) {\\n                    return false;\\n                }\\n                q.pollLast();\\n                r--;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-tasks-you-can-assign","has_notes":false,"flag_type":1,"frontend_id":444},{"id":1622005874,"question_id":1421,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1746021934,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1622005874/","is_pending":"Not Pending","title":"Find Numbers with Even Number of Digits","memory":"44.7 MB","code":"class Solution {\\n    public int findNumbers(int[] nums) \\n    {\\n        int n=nums.length;\\n        int c=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            String s=Integer.toString(nums[i]);\\n            if(s.length()%2==0)\\n            {\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-numbers-with-even-number-of-digits","has_notes":false,"flag_type":1,"frontend_id":443},{"id":1621158407,"question_id":3213,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1745937501,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1621158407/","is_pending":"Not Pending","title":"Count Subarrays Where Max Element Appears at Least K Times","memory":"66.6 MB","code":"class Solution {\\n    public long countSubarrays(int[] a, int k) {\\n        int m = Integer.MIN_VALUE;\\n        for (int n : a) m = Math.max(m, n);\\n        int l = 0;\\n        long cnt = 0, res = 0;\\n        for (int r = 0; r < a.length; r++) {\\n            if (a[r] == m) cnt++;\\n            while (cnt >= k) {\\n                if (a[l] == m) cnt--;\\n                l++;\\n            }\\n            res += l;\\n        }\\n        return res;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-subarrays-where-max-element-appears-at-least-k-times","has_notes":false,"flag_type":1,"frontend_id":442},{"id":1620246091,"question_id":2394,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1745848890,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1620246091/","is_pending":"Not Pending","title":"Count Subarrays With Score Less Than K","memory":"61.7 MB","code":"class Solution {\\n    public long countSubarrays(int[] nums, long k) {\\n        long r = 0, s = 0;\\n        int l = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            s += nums[i];\\n            while (s * (i - l + 1) >= k) {\\n                s -= nums[l++];\\n            }\\n            r += i - l + 1;\\n        }\\n        return r;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-subarrays-with-score-less-than-k","has_notes":false,"flag_type":1,"frontend_id":441},{"id":1620244667,"question_id":2394,"lang":"java","lang_name":"Java","time":"3\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1745848773,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1620244667/","is_pending":"Not Pending","title":"Count Subarrays With Score Less Than K","memory":"N/A","code":"class Solution {\\n    public long countSubarrays(int[] nums, long k) {\\n        long c = 0;\\n        for (int r = 0; r < nums.length; r++) {\\n            long s = 0;\\n            for (int l = r; l < nums.length; l++) {\\n                s += nums[l];\\n                if (s * (l - r + 1) < k) {\\n                    c++;\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000","title_slug":"count-subarrays-with-score-less-than-k","has_notes":false,"flag_type":1,"frontend_id":440},{"id":1618998674,"question_id":3685,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745729406,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1618998674/","is_pending":"Not Pending","title":"Count Subarrays of Length Three With a Condition","memory":"45.2 MB","code":"class Solution {\\n    public int countSubarrays(int[] nums) {\\n        int co = 0;\\n        for (int i = 0; i < nums.length - 2; i++) {\\n            int a = nums[i];\\n            int b = nums[i + 1];\\n            int c = nums[i + 2];\\n            if (a + c == b / 2.0) {\\n                co++;\\n            }\\n        }\\n        \\n        return co;\\n    }\\n}\\n","compare_resulttitle_slug":"count-subarrays-of-length-three-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":439},{"id":1618465171,"question_id":3707,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745679268,"status":10,"status_display":"Accepted","runtime":"130 ms","url":"/submissions/detail/1618465171/","is_pending":"Not Pending","title":"Find the Most Common Response","memory":"191.1 MB","code":"class Solution \\n{\\n    public String findCommonResponse(List<List<String>> res) {\\n        Map<String, Integer> map = new HashMap<>();\\n        for (List<String> day : res) {\\n            Set<String> set = new HashSet<>(day);\\n            for (String s : set) {\\n                map.put(s, map.getOrDefault(s, 0) + 1);\\n            }\\n        }\\n        String ans = null;\\n        int max = 0;\\n        for (Map.Entry<String, Integer> e : map.entrySet()) {\\n            String s = e.getKey();\\n            int cnt = e.getValue();\\n            if (cnt > max || (cnt == max && (ans == null || s.compareTo(ans) < 0))) {\\n                ans = s;\\n                max = cnt;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-most-common-response","has_notes":false,"flag_type":1,"frontend_id":438},{"id":1618278812,"question_id":2527,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745663250,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1618278812/","is_pending":"Not Pending","title":"Count Subarrays With Fixed Bounds","memory":"60.7 MB","code":"class Solution {\\n    public long countSubarrays(int[] nums, int minK, int maxK) {\\n        long total = 0;\\n        int lastInvalid = -1, lastMin = -1, lastMax = -1;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] < minK || nums[i] > maxK) lastInvalid = i;\\n            if (nums[i] == minK) lastMin = i;\\n            if (nums[i] == maxK) lastMax = i;\\n            int validStart = Math.min(lastMin, lastMax);\\n            total += Math.max(0, validStart - lastInvalid);\\n        }\\n        return total;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"count-subarrays-with-fixed-bounds","has_notes":false,"flag_type":1,"frontend_id":437},{"id":1617645653,"question_id":2915,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745591042,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1617645653/","is_pending":"Not Pending","title":"Count of Interesting Subarrays","memory":"63 MB","code":"class Solution {\\n    public long countInterestingSubarrays(List<Integer> nums, int m, int k) {\\n        long total = 0;\\n        Map<Integer, Integer> map = new HashMap<>();\\n        map.put(0, 1);\\n        int count = 0;\\n\\n        for (int num : nums) {\\n            if (num % m == k) count++;\\n            int remainder = (count - k) % m;\\n            if (remainder < 0) remainder += m;\\n            total += map.getOrDefault(remainder, 0);\\n            map.put(count % m, map.getOrDefault(count % m, 0) + 1);\\n        }\\n\\n        return total;\\n    }\\n}","compare_resulttitle_slug":"count-of-interesting-subarrays","has_notes":false,"flag_type":1,"frontend_id":436},{"id":1616633798,"question_id":2856,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745498153,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1616633798/","is_pending":"Not Pending","title":"Count Complete Subarrays in an Array","memory":"45.1 MB","code":"class Solution {\\n    public int countCompleteSubarrays(int[] nums) {\\n        int totalDistinct = (int) Arrays.stream(nums).distinct().count();\\n        Map<Integer, Integer> map = new HashMap<>();\\n        int res = 0, left = 0;\\n\\n        for (int right = 0; right < nums.length; right++) {\\n            map.put(nums[right], map.getOrDefault(nums[right], 0) + 1);\\n            while (map.size() == totalDistinct) {\\n                res += nums.length - right;\\n                map.put(nums[left], map.get(nums[left]) - 1);\\n                if (map.get(nums[left]) == 0)\\n                    map.remove(nums[left]);\\n                left++;\\n            }\\n        }\\n        return res;\\n    }\\n}","compare_resulttitle_slug":"count-complete-subarrays-in-an-array","has_notes":false,"flag_type":1,"frontend_id":435},{"id":1615603737,"question_id":1500,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745408187,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1615603737/","is_pending":"Not Pending","title":"Count Largest Group","memory":"41.5 MB","code":"class Solution {\\n    public int countLargestGroup(int n) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        int maxSize = 0;\\n        for (int i = 1; i <= n; i++) {\\n            int sum = 0, num = i;\\n            while (num > 0) {\\n                sum += num % 10;\\n                num /= 10;\\n            }\\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\\n            maxSize = Math.max(maxSize, map.get(sum));\\n        }\\n        int count = 0;\\n        for (int val : map.values()) {\\n            if (val == maxSize) count++;\\n        }\\n        return count;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-largest-group","has_notes":false,"flag_type":1,"frontend_id":434},{"id":1614744630,"question_id":2415,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745335694,"status":10,"status_display":"Accepted","runtime":"175 ms","url":"/submissions/detail/1614744630/","is_pending":"Not Pending","title":"Count the Number of Ideal Arrays","memory":"54.8 MB","code":"class Solution {\\n    long[][] dp = new long[15][10001];\\n    long[][] pr = new long[15][10001];\\n    long[] tot = new long[15];\\n    final long mod = 1000000007;\\n    int n, mx;\\n    void get(int la, int cn) {\\n        tot[cn]++;\\n        for (int p = 2 * la; p <= mx; p += la)\\n            get(p, cn + 1);\\n    }\\n    public int idealArrays(int n, int mx) {\\n        this.n = n;\\n        this.mx = mx;\\n        for (int i = 1; i <= 10000; i++) {\\n            dp[1][i] = 1;\\n            pr[1][i] = i;\\n        }\\n        for (int i = 2; i < 15; i++) {\\n            for (int j = i; j <= 10000; j++) {\\n                dp[i][j] = pr[i - 1][j - 1];\\n                pr[i][j] = (dp[i][j] + pr[i][j - 1]) % mod;\\n            }\\n        }\\n        for (int i = 1; i <= mx; i++)\\n            get(i, 1);\\n        long ans = mx;\\n        for (int i = 2; i < 15; i++) {\\n            ans = (ans + tot[i] * dp[i][n]) % mod;\\n        }\\n        return (int) ans;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"count-the-number-of-ideal-arrays","has_notes":false,"flag_type":1,"frontend_id":433},{"id":1613724909,"question_id":1418,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745251981,"status":10,"status_display":"Accepted","runtime":"386 ms","url":"/submissions/detail/1613724909/","is_pending":"Not Pending","title":"Fair Distribution of Cookies","memory":"41 MB","code":"class Solution {\\n    int ans = Integer.MAX_VALUE;\\n    void helper(int[] cookies, int start, int k, int[] temp) {\\n        if (start == cookies.length) {\\n            int max = 0;\\n            for (int c : temp)\\n                max = Math.max(max, c);\\n            ans = Math.min(ans, max);\\n            return;\\n        }\\n        for (int i = 0; i < k; i++) {\\n            temp[i] += cookies[start];\\n            helper(cookies, start + 1, k, temp);\\n            temp[i] -= cookies[start];\\n        }\\n    }\\n    public int distributeCookies(int[] cookies, int k) {\\n        helper(cookies, 0, k, new int[k]);\\n        return ans;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"fair-distribution-of-cookies","has_notes":false,"flag_type":1,"frontend_id":432},{"id":1612989793,"question_id":2249,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months","timestamp":1745196928,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1612989793/","is_pending":"Not Pending","title":"Count the Hidden Sequences","memory":"62.1 MB","code":"class Solution {\\n    public int numberOfArrays(int[] differences, int lower, int upper) {\\n        long sum = 0, min=0,max=0 ;     \\n        for (var x : differences) {\\n            sum += x;         \\n            min = Math.min(min, sum);    \\n            max = Math.max(max, sum);  \\n        }\\n        return (int) Math.max(0, (upper - lower) - (max - min) + 1);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-the-hidden-sequences","has_notes":false,"flag_type":1,"frontend_id":431}],"has_next":true,"last_key":""}'
2025-08-25 23:29:47,932 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:47,939 [INFO] __main__.py:245 - Writing median-of-two-sorted-arrays/2025-05-05 01.21.45 - Accepted - runtime 1ms - memory 45.8MB.java
2025-08-25 23:29:48,271 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:48,287 [INFO] __main__.py:245 - Writing number-of-equivalent-domino-pairs/2025-05-04 14.42.21 - Accepted - runtime 11ms - memory 55.5MB.java
2025-08-25 23:29:48,626 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:48,626 [INFO] __main__.py:245 - Writing fill-a-special-grid/2025-05-04 08.15.32 - Accepted - runtime 6ms - memory 87MB.java
2025-08-25 23:29:48,949 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:48,962 [INFO] __main__.py:245 - Writing maximum-product-of-two-digits/2025-05-04 08.11.06 - Accepted - runtime 1ms - memory 41.1MB.java
2025-08-25 23:29:49,302 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:49,302 [INFO] __main__.py:245 - Writing minimum-domino-rotations-for-equal-row/2025-05-04 01.37.13 - Accepted - runtime 4ms - memory 51MB.java
2025-08-25 23:29:49,639 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:49,639 [INFO] __main__.py:245 - Writing push-dominoes/2025-05-02 17.19.32 - Accepted - runtime 8ms - memory 45.5MB.java
2025-08-25 23:29:50,018 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:50,018 [INFO] __main__.py:245 - Writing maximum-number-of-tasks-you-can-assign/2025-05-01 23.16.35 - Accepted - runtime 45ms - memory 55MB.java
2025-08-25 23:29:50,360 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:50,362 [INFO] __main__.py:245 - Writing find-numbers-with-even-number-of-digits/2025-04-30 19.35.34 - Accepted - runtime 2ms - memory 44.7MB.java
2025-08-25 23:29:50,727 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:50,727 [INFO] __main__.py:245 - Writing count-subarrays-where-max-element-appears-at-least-k-times/2025-04-29 20.08.21 - Accepted - runtime 4ms - memory 66.6MB.java
2025-08-25 23:29:51,277 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:51,279 [INFO] __main__.py:245 - Writing count-subarrays-with-score-less-than-k/2025-04-28 19.31.30 - Accepted - runtime 2ms - memory 61.7MB.java
2025-08-25 23:29:51,282 [INFO] __main__.py:188 - Skipping count-subarrays-with-score-less-than-k 2025-04-28 19.29.33 because its status is 'Time Limit Exceeded'
2025-08-25 23:29:51,705 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:51,707 [INFO] __main__.py:245 - Writing count-subarrays-of-length-three-with-a-condition/2025-04-27 10.20.06 - Accepted - runtime 1ms - memory 45.2MB.java
2025-08-25 23:29:52,034 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:52,034 [INFO] __main__.py:245 - Writing find-the-most-common-response/2025-04-26 20.24.28 - Accepted - runtime 130ms - memory 191.1MB.java
2025-08-25 23:29:52,380 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:52,382 [INFO] __main__.py:245 - Writing count-subarrays-with-fixed-bounds/2025-04-26 15.57.30 - Accepted - runtime 8ms - memory 60.7MB.java
2025-08-25 23:29:52,705 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:52,717 [INFO] __main__.py:245 - Writing count-of-interesting-subarrays/2025-04-25 19.54.02 - Accepted - runtime 32ms - memory 63MB.java
2025-08-25 23:29:53,047 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:53,048 [INFO] __main__.py:245 - Writing count-complete-subarrays-in-an-array/2025-04-24 18.05.53 - Accepted - runtime 16ms - memory 45.1MB.java
2025-08-25 23:29:53,475 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:53,476 [INFO] __main__.py:245 - Writing count-largest-group/2025-04-23 17.06.27 - Accepted - runtime 10ms - memory 41.5MB.java
2025-08-25 23:29:53,880 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:53,882 [INFO] __main__.py:245 - Writing count-the-number-of-ideal-arrays/2025-04-22 20.58.14 - Accepted - runtime 175ms - memory 54.8MB.java
2025-08-25 23:29:54,285 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:54,290 [INFO] __main__.py:245 - Writing fair-distribution-of-cookies/2025-04-21 21.43.01 - Accepted - runtime 386ms - memory 41MB.java
2025-08-25 23:29:54,653 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:29:54,656 [INFO] __main__.py:245 - Writing count-the-hidden-sequences/2025-04-21 06.25.28 - Accepted - runtime 4ms - memory 62.1MB.java
2025-08-25 23:29:59,658 [DEBUG] leetcode.py:150 - Exporting submissions from 220 to 240
2025-08-25 23:30:00,083 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=220&limit=20 HTTP/11" 200 None
2025-08-25 23:30:00,118 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1612034766,"question_id":3831,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1745117817,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1612034766/","is_pending":"Not Pending","title":"Find X Value of Array I","memory":"60.2 MB","code":"class Solution {\\n    public long[] resultArray(int[] nums, int k) {\\n        int n = nums.length;\\n        long[] r = new long[k];\\n        long[] arr = new long[k];\\n        for (int i = 0; i < n; i++) {\\n            long[] nrr = new long[k];\\n            int mod = nums[i] % k;\\n            nrr[mod]++;\\n            r[mod]++;\\n            for (int j = 0; j < k; j++) {\\n                if (arr[j] > 0) {\\n                    int nm = (int)((j * 1L * nums[i]) % k);\\n                    nrr[nm] += arr[j];\\n                    r[nm] += arr[j];\\n                }\\n            }\\n            arr = nrr;\\n        }\\n        return r;\\n    }\\n}\\n","compare_resulttitle_slug":"find-x-value-of-array-i","has_notes":false,"flag_type":1,"frontend_id":430},{"id":1612030061,"question_id":3831,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1745117632,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1612030061/","is_pending":"Not Pending","title":"Find X Value of Array I","memory":"N/A","code":"class Solution {\\n    public long[] resultArray(int[] nums, int k) {\\n        int n = nums.length;\\n        long[] r = new long[k];\\n        int[] lu = nums;\\n        for (int start = 0; start < n; start++) {\\n            long p = 1;\\n            for (int end = start; end < n; end++) {\\n                p = (p * lu[end]) % k;\\n                r[(int) p]++;\\n            }\\n        }\\n        return r;\\n    }\\n}\\n","compare_resulttitle_slug":"find-x-value-of-array-i","has_notes":false,"flag_type":1,"frontend_id":429},{"id":1612021356,"question_id":3738,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1745117313,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1612021356/","is_pending":"Not Pending","title":"Make Array Non-decreasing","memory":"73.3 MB","code":"class Solution {\\n    public int maximumPossibleSize(int[] nums) {\\n        int n = nums.length;\\n        int count = 0;\\n        int i = 0;\\n        while (i < n) {\\n            int maxVal = nums[i];\\n            int j = i + 1;\\n            while (j < n && nums[j] < maxVal) {\\n                maxVal = Math.max(maxVal, nums[j]);\\n                j++;\\n            }\\n            count++; \\n            i = j;   \\n        }\\n        return count;\\n    }\\n}\\n","compare_resulttitle_slug":"make-array-non-decreasing","has_notes":false,"flag_type":1,"frontend_id":428},{"id":1612008728,"question_id":3732,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1745116891,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1612008728/","is_pending":"Not Pending","title":"Calculate Score After Performing Instructions","memory":"70.1 MB","code":"class Solution {\\n    public long calculateScore(String[] inst, int[] values) {\\n        int n = inst.length;\\n        int i = 0;\\n        long s = 0;\\n        boolean[] visited = new boolean[n];\\n        while (i >= 0 && i < n && !visited[i]) {\\n            visited[i] = true;\\n            if (inst[i].equals(\\"add\\")) {\\n                s += values[i];\\n                i++;\\n            } else if (inst[i].equals(\\"jump\\")) {\\n                i+= values[i];\\n            }\\n        }\\n        return s;\\n    }\\n}\\n","compare_resulttitle_slug":"calculate-score-after-performing-instructions","has_notes":false,"flag_type":1,"frontend_id":427},{"id":1611985146,"question_id":797,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1745115145,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1611985146/","is_pending":"Not Pending","title":"Rabbits in Forest","memory":"42.7 MB","code":"class Solution {\\n    public int numRabbits(int[] answers) \\n    {\\n        int n=answers.length;\\n        int a=0;\\n        HashMap<Integer,Integer> hm=new HashMap<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            hm.put(answers[i],hm.getOrDefault(answers[i],0)+1);\\n        }\\n        for(Map.Entry<Integer,Integer> e:hm.entrySet())\\n        {\\n            int nm=e.getKey();\\n            int f=e.getValue();\\n            while(f>0)\\n            {\\n                a+=(nm+1);\\n                f-=(nm+1);\\n            }\\n\\n        }\\n        return a;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"rabbits-in-forest","has_notes":false,"flag_type":1,"frontend_id":426},{"id":1611439764,"question_id":2699,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1745062851,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1611439764/","is_pending":"Not Pending","title":"Count the Number of Fair Pairs","memory":"57.4 MB","code":"class Solution {\\n    public long countFairPairs(int[] nums, int lower, int upper) {\\n        Arrays.sort(nums);\\n        int n = nums.length;\\n        int l = 0, r = 0;\\n        long res = 0;\\n\\n        for (int i = n - 1; i > 0; --i) {\\n            if (nums[i] + nums[i - 1] < lower) break;\\n            if (nums[i] + nums[l] > upper) continue;\\n\\n            while (r < i && nums[r] + nums[i] <= upper) ++r;\\n            if (r == i || nums[r] + nums[i] > upper) --r;\\n            while (l <= r && nums[l] + nums[i] < lower) ++l;\\n\\n            if (l <= r) res += (r - l + 1);\\n        }\\n\\n        return res;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"count-the-number-of-fair-pairs","has_notes":false,"flag_type":1,"frontend_id":425},{"id":1610043259,"question_id":38,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1744944771,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1610043259/","is_pending":"Not Pending","title":"Count and Say","memory":"41.4 MB","code":"class Solution {\\n    public String countAndSay(int n) {\\n     if(n==1)return \\"1\\";\\n     String p=countAndSay(n-1);\\n     int q=p.length();\\n     StringBuilder sb=new StringBuilder();\\n     int c=1;\\n     for(int i=1;i<q;i++){\\n        if(p.charAt(i) == p.charAt(i-1)){\\n            c++;\\n        }\\n        else{\\n            sb.append(c).append(p.charAt(i-1));\\n            c=1;\\n        }\\n     }   \\n     sb.append(c).append(p.charAt(q-1));\\n     return sb.toString();\\n    }\\n}","compare_result":"111111111111111111111111111111","title_slug":"count-and-say","has_notes":false,"flag_type":1,"frontend_id":424},{"id":1609053071,"question_id":2277,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1744853846,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1609053071/","is_pending":"Not Pending","title":"Count Equal and Divisible Pairs in an Array","memory":"42.7 MB","code":"class Solution {\\n    public int countPairs(int[] nums, int k) {\\n        int i = 0, j = i+ 1 , c = 0;\\n        for (; i < j; i++) {\\n            for (j = i + 1; j < nums.length; j++) {\\n                if (nums[i] == nums[j] && (i * j) % k == 0) {\\n                    c++;\\n                }\\n            }\\n\\n        }\\n        return c;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-equal-and-divisible-pairs-in-an-array","has_notes":false,"flag_type":1,"frontend_id":423},{"id":1608070834,"question_id":2626,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1744767563,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1608070834/","is_pending":"Not Pending","title":"Count the Number of Good Subarrays","memory":"63.8 MB","code":"class Solution {\\n    public long countGood(int[] nums, int k) {\\n        int left = 0;\\n        int right = 0;\\n        int n = nums.length;\\n\\n        Map<Integer, Integer > mp = new HashMap<>();\\n        long pairCount = 0;\\n        long a= 0;\\n        while(right<n){\\n            mp.put(nums[right],mp.getOrDefault(nums[right],0)+1);\\n            pairCount+=mp.get(nums[right])-1;\\n               \\n            while(pairCount>=k){\\n                a+=(n-right);\\n                int leftCnt = mp.get(nums[left]);\\n                if(leftCnt>1){\\n                    pairCount-= leftCnt-1;\\n                    mp.put(nums[left],mp.get(nums[left])-1);\\n                }else mp.remove(nums[left]);\\n                left++;\\n            }\\n            right++;\\n        }\\n\\n        return a;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111","title_slug":"count-the-number-of-good-subarrays","has_notes":false,"flag_type":1,"frontend_id":422},{"id":1607894728,"question_id":3311,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1744744815,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1607894728/","is_pending":"Not Pending","title":"Ant on the Boundary","memory":"42 MB","code":"class Solution {\\n    public int returnToBoundaryCount(int[] nums) {\\n        int n=nums.length;\\n        int s=0,c=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            s+=nums[i];\\n            if(s==0)\\n            {\\n                c++;\\n            }\\n        }\\n        return c;\\n        \\n    }\\n}","compare_resulttitle_slug":"ant-on-the-boundary","has_notes":false,"flag_type":1,"frontend_id":421},{"id":1607891165,"question_id":306,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1744744541,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1607891165/","is_pending":"Not Pending","title":"Additive Number","memory":"41.5 MB","code":"class Solution {\\n\\tpublic boolean isAdditiveNumber(String num) {\\n\\t\\tlong number1=0;\\n\\t\\tfor(int i=0; i<num.length()-1; i++){\\n\\t\\t\\tnumber1=number1*10+num.charAt(i)-\'0\';\\n\\t\\t\\tlong number2=0;\\n\\t\\t\\tfor(int j=i+1; j<num.length(); j++){\\n\\t\\t\\t\\tnumber2=number2*10+num.charAt(j)-\'0\';\\n\\t\\t\\t\\tif(solv(number1, number2, j+1, num, 2))\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\tif(number2==0)\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif(number1==0)\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tboolean solv(long number1, long number2, int curr, String num, int count) {\\n\\t\\tif(curr>=num.length()){\\n\\t\\t\\tif(count>=3)\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tif(num.charAt(curr)==\'0\' && number1+number2!=0)\\n\\t\\t\\treturn false;\\n    \\n\\t\\tlong number=0;\\n\\t\\tlong target=number1+number2;\\n\\t\\tfor(int i=curr; i<num.length(); i++) {\\n\\t\\t\\tnumber=number*10+num.charAt(i)-\'0\';\\n\\t\\t\\tif(number==target && solv(number2, target, i+1, num, count+1))\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\telse if(number>target)\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"additive-number","has_notes":false,"flag_type":1,"frontend_id":420},{"id":1607116383,"question_id":2280,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1744682681,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1607116383/","is_pending":"Not Pending","title":"Count Good Triplets in an Array","memory":"59.9 MB","code":"class Solution {\\n    public long goodTriplets(int[] nums1, int[] nums2) {\\n        int n=nums1.length;\\n        int []pos = new int[n];\\n        \\n        FenwickTree ft = new FenwickTree(n+1);\\n        \\n        for(int i=0;i<n;i++)\\n            pos[nums2[i]]=i;\\n        \\n        long []left=new long[n];\\n        long []right = new long[n];\\n        \\n        for(int i=0;i<n;i++){\\n            int idx = pos[nums1[i]];\\n            left[i] = ft.sum(idx-1);\\n            ft.update(idx,1);\\n        }\\n        \\n        ft=new FenwickTree(n+1);\\n        \\n        for(int i=n-1;i>=0;i--){\\n            int idx = pos[nums1[i]];\\n            right[i]= ft.sum(n+1)-ft.sum(idx);\\n            ft.update(idx,1);\\n        }\\n        \\n        long ans=0;\\n        \\n        for (int i=0;i<n;i++)\\n            ans+= left[i]*right[i];\\n        \\n        return ans;\\n    }\\n}\\n\\nclass FenwickTree {\\n    int[] bit;\\n    int n;\\n    \\n    FenwickTree(int n) {\\n        this.n = n;\\n        this.bit = new int[n + 2];\\n    }\\n    \\n    public void update(int i, int val) {\\n        i++;\\n        while (i < bit.length) {\\n            bit[i] += val;\\n            i += (i & (-i));\\n        }\\n    }\\n    \\n    public int sum(int i) {\\n        int sum = 0;\\n        i++;\\n        while (i > 0) {\\n            sum += bit[i];\\n            i -= (i & (-i));\\n        }\\n        return sum;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-triplets-in-an-array","has_notes":false,"flag_type":1,"frontend_id":419},{"id":1606266341,"question_id":1656,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 1\xc2\xa0week","timestamp":1744609876,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1606266341/","is_pending":"Not Pending","title":"Count Good Triplets","memory":"41.4 MB","code":"class Solution {\\n    public int countGoodTriplets(int[] nums, int x, int y, int z) {\\n        int len = nums.length;\\n        int result = 0;\\n\\n        for (int p = 0; p < len - 2; p++) {\\n            for (int q = p + 1; q < len - 1; q++) {\\n                if (Math.abs(nums[p] - nums[q]) > x) continue;\\n\\n                for (int r = q + 1; r < len; r++) {\\n                    if (Math.abs(nums[q] - nums[r]) <= y && Math.abs(nums[p] - nums[r]) <= z) {\\n                        result++;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-triplets","has_notes":false,"flag_type":1,"frontend_id":418},{"id":1605166523,"question_id":2050,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744513643,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1605166523/","is_pending":"Not Pending","title":"Count Good Numbers","memory":"40.4 MB","code":"\\nclass Solution {\\n    public long helper(long base,long expo,long mod){\\n        long ans = 1;\\n        while(expo>0)\\n        {\\n            if(expo%2==0)            \\n            {\\n                base = (base*base)%mod;\\n                expo = expo/2;\\n            }\\n            else{\\n                ans = (ans*base)%mod;\\n                expo-=1;\\n            }\\n        }\\n        return ans;\\n    }\\n\\n    public int countGoodNumbers(long n) {\\n        if(n==1) return 5;\\n        long e = (n+1)/2;\\n        long odd = n/2;\\n        long mod = 1000000007;\\n        return (int)((helper(5,e,mod)*helper(4,odd,mod))%mod);\\n        \\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-numbers","has_notes":false,"flag_type":1,"frontend_id":417},{"id":1605151390,"question_id":3813,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744512928,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1605151390/","is_pending":"Not Pending","title":"Smallest Palindromic Rearrangement II","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public String smallestPalindrome(String input, int targetIndex) {\\n        int[] charFreq = new int[26];\\n        for (char ch : input.toCharArray()) {\\n            charFreq[ch - \'a\']++;\\n        }\\n\\n        String centerChar = \\"\\";\\n        StringBuilder prelunthak = new StringBuilder();\\n\\n        for (int i = 0; i < 26; i++) {\\n            if (charFreq[i] % 2 == 1) {\\n                if (!centerChar.isEmpty()) return \\"\\";\\n                centerChar = String.valueOf((char)(i + \'a\'));\\n            }\\n            for (int j = 0; j < charFreq[i] / 2; j++) {\\n                prelunthak.append((char)(i + \'a\'));\\n            }\\n        }\\n        List<String> uniqueHalves = new ArrayList<>();\\n        boolean[] visited = new boolean[prelunthak.length()];\\n        char[] halfArray = prelunthak.toString().toCharArray();\\n        Arrays.sort(halfArray);\\n        generatePermutations(halfArray, new StringBuilder(), visited, new HashSet<>(), uniqueHalves, targetIndex);\\n\\n        if (uniqueHalves.size() < targetIndex) return \\"\\";\\n        String chosenHalf = uniqueHalves.get(targetIndex - 1);\\n        return chosenHalf + centerChar + new StringBuilder(chosenHalf).reverse().toString();\\n    }\\n    private void generatePermutations(char[] halfArray, StringBuilder current, boolean[] visited, Set<String> seen, List<String> result, int targetIndex) {\\n        if (current.length() == halfArray.length) {\\n            String permutation = current.toString();\\n            if (seen.add(permutation)) result.add(permutation);\\n            return;\\n        }\\n        for (int i = 0; i < halfArray.length; i++) {\\n            if (visited[i] || (i > 0 && halfArray[i] == halfArray[i - 1] && !visited[i - 1])) continue;\\n            visited[i] = true;\\n            current.append(halfArray[i]);\\n            if (result.size() < targetIndex) generatePermutations(halfArray, current, visited, seen, result, targetIndex);\\n            current.deleteCharAt(current.length() - 1);\\n            visited[i] = false;\\n        }\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"smallest-palindromic-rearrangement-ii","has_notes":false,"flag_type":1,"frontend_id":416},{"id":1605147232,"question_id":3812,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744512739,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1605147232/","is_pending":"Not Pending","title":"Smallest Palindromic Rearrangement I","memory":"46.6 MB","code":"class Solution {\\n    public String smallestPalindrome(String str) {\\n        int[] count = new int[26];\\n        for (char c : str.toCharArray()) {\\n            count[c - \'a\']++;\\n        }\\n\\n        StringBuilder part = new StringBuilder();\\n        String center = \\"\\";\\n\\n        for (int i = 0; i < 26; i++) {\\n            if (count[i] % 2 == 1) {\\n                center = String.valueOf((char)(i + \'a\'));\\n            }\\n            for (int j = 0; j < count[i] / 2; j++) {\\n                part.append((char)(i + \'a\'));\\n            }\\n        }\\n\\n        String left = part.toString();\\n        String right = part.reverse().toString();\\n\\n        return left + center + right;\\n    }\\n}\\n","compare_resulttitle_slug":"smallest-palindromic-rearrangement-i","has_notes":false,"flag_type":1,"frontend_id":415},{"id":1605143558,"question_id":3830,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744512575,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1605143558/","is_pending":"Not Pending","title":"Find Closest Person","memory":"41.1 MB","code":"class Solution {\\n    public int findClosest(int a, int b, int c) {\\n        int distA = Math.abs(a - c);\\n        int distB = Math.abs(b - c);\\n        if (distA < distB) return 1;\\n        else if (distB < distA) return 2;\\n        else return 0;\\n    }\\n}\\n","compare_resulttitle_slug":"find-closest-person","has_notes":false,"flag_type":1,"frontend_id":414},{"id":1604311641,"question_id":3548,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744444286,"status":10,"status_display":"Accepted","runtime":"113 ms","url":"/submissions/detail/1604311641/","is_pending":"Not Pending","title":"Find the Count of Good Integers","memory":"44.8 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public long countGoodIntegers(int n, int k) {\\n        long[][] comb = new long[11][11];\\n        for (int i = 0; i <= 10; i++) {\\n            comb[i][0] = comb[i][i] = 1;\\n        }\\n        for (int i = 2; i <= 10; i++) {\\n            for (int j = 1; j < i; j++) {\\n                comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1];\\n            }\\n        }\\n\\n        int base = 1;\\n        for (int i = 0; i < (n + 1) / 2; i++)\\n            base *= 10;\\n\\n        Set<Long> encodedFreqs = new HashSet<>();\\n\\n        for (int half = base / 10; half < base; half++) {\\n            long num = half;\\n            int mirror = (n % 2 == 1) ? half / 10 : half;\\n            for (int j = 0; j < n / 2; j++) {\\n                num = num * 10 + (mirror % 10);\\n                mirror /= 10;\\n            }\\n            if (num % k == 0) {\\n                int[] freq = new int[10];\\n                long temp = num;\\n                for (int i = 0; i < n; i++) {\\n                    freq[(int)(temp % 10)]++;\\n                    temp /= 10;\\n                }\\n                long code = 0;\\n                for (int i = 0; i < 10; i++) {\\n                    code = code * 11 + freq[i];\\n                }\\n                encodedFreqs.add(code);\\n            }\\n        }\\n\\n        long t = 0;\\n        for (long code : encodedFreqs) {\\n            int[] freq = new int[10];\\n            for (int i = 9; i >= 0; i--) {\\n                freq[i] = (int)(code % 11);\\n                code /= 11;\\n            }\\n            long ways = 1;\\n            int rem = n;\\n            for (int i = 0; i < 10; i++) {\\n                if (freq[i] > rem) {\\n                    ways = 0;\\n                    break;\\n                }\\n                ways *= comb[i == 0 ? rem - 1 : rem][freq[i]];\\n                rem -= freq[i];\\n            }\\n            t += ways;\\n        }\\n\\n        return t;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-count-of-good-integers","has_notes":false,"flag_type":1,"frontend_id":413},{"id":1603190638,"question_id":2998,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744333855,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1603190638/","is_pending":"Not Pending","title":"  Count Symmetric Integers","memory":"41.3 MB","code":"class Solution {\\n    public static boolean isSymmetric(int num, int len) {\\n        int sum1 = 0, sum2 = 0;\\n        while (num != 0) {\\n            if (len > 0)\\n                sum1 += num % 10;\\n            else\\n                sum2 += num % 10;\\n            len--;\\n            num /= 10;\\n        }\\n        return sum1 == sum2;\\n    }\\n\\n    public int countSymmetricIntegers(int low, int high) {\\n        int c = 0;\\n        for (int i = low; i <= high; i++) {\\n            int n = (int) Math.log10(i) + 1;\\n            if (n % 2 == 0 && isSymmetric(i, n / 2))\\n                c++;\\n        }\\n        return c;\\n    }\\n}","compare_resulttitle_slug":"count-symmetric-integers","has_notes":false,"flag_type":1,"frontend_id":412},{"id":1602752523,"question_id":3193,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744295671,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1602752523/","is_pending":"Not Pending","title":"Maximum Strong Pair XOR I","memory":"43.3 MB","code":"\\nclass Solution {\\n    public int maximumStrongPairXor(int[] nums) {\\n        int max=0;\\n        int n=nums.length;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            for(int j=i+1;j<n;j++)\\n            {\\n                if(Math.abs(nums[i]-nums[j])<= Math.min(nums[i],nums[j]))\\n                {\\n                int sum= nums[i]^nums[j];\\n                max=Math.max(sum,max);\\n                }\\n            }\\n        }return max;\\n    }\\n}","compare_resulttitle_slug":"maximum-strong-pair-xor-i","has_notes":false,"flag_type":1,"frontend_id":411}],"has_next":true,"last_key":""}'
2025-08-25 23:30:00,491 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:00,494 [INFO] __main__.py:245 - Writing find-x-value-of-array-i/2025-04-20 08.26.57 - Accepted - runtime 14ms - memory 60.2MB.java
2025-08-25 23:30:00,496 [INFO] __main__.py:188 - Skipping find-x-value-of-array-i 2025-04-20 08.23.52 because its status is 'Time Limit Exceeded'
2025-08-25 23:30:00,816 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:00,816 [INFO] __main__.py:245 - Writing make-array-non-decreasing/2025-04-20 08.18.33 - Accepted - runtime 2ms - memory 73.3MB.java
2025-08-25 23:30:01,159 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:01,162 [INFO] __main__.py:245 - Writing calculate-score-after-performing-instructions/2025-04-20 08.11.31 - Accepted - runtime 2ms - memory 70.1MB.java
2025-08-25 23:30:01,715 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:01,715 [INFO] __main__.py:245 - Writing rabbits-in-forest/2025-04-20 07.42.25 - Accepted - runtime 3ms - memory 42.7MB.java
2025-08-25 23:30:02,534 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:02,538 [INFO] __main__.py:245 - Writing count-the-number-of-fair-pairs/2025-04-19 17.10.51 - Accepted - runtime 24ms - memory 57.4MB.java
2025-08-25 23:30:02,868 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:02,876 [INFO] __main__.py:245 - Writing count-and-say/2025-04-18 08.22.51 - Accepted - runtime 2ms - memory 41.4MB.java
2025-08-25 23:30:03,222 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:03,224 [INFO] __main__.py:245 - Writing count-equal-and-divisible-pairs-in-an-array/2025-04-17 07.07.26 - Accepted - runtime 3ms - memory 42.7MB.java
2025-08-25 23:30:04,372 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:04,374 [INFO] __main__.py:245 - Writing count-the-number-of-good-subarrays/2025-04-16 07.09.23 - Accepted - runtime 42ms - memory 63.8MB.java
2025-08-25 23:30:05,305 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:05,305 [INFO] __main__.py:245 - Writing ant-on-the-boundary/2025-04-16 00.50.15 - Accepted - runtime 0ms - memory 42MB.java
2025-08-25 23:30:05,639 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:05,639 [INFO] __main__.py:245 - Writing additive-number/2025-04-16 00.45.41 - Accepted - runtime 0ms - memory 41.5MB.java
2025-08-25 23:30:06,020 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:06,020 [INFO] __main__.py:245 - Writing count-good-triplets-in-an-array/2025-04-15 07.34.41 - Accepted - runtime 22ms - memory 59.9MB.java
2025-08-25 23:30:07,351 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:07,353 [INFO] __main__.py:245 - Writing count-good-triplets/2025-04-14 11.21.16 - Accepted - runtime 9ms - memory 41.4MB.java
2025-08-25 23:30:07,717 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:07,720 [INFO] __main__.py:245 - Writing count-good-numbers/2025-04-13 08.37.23 - Accepted - runtime 0ms - memory 40.4MB.java
2025-08-25 23:30:07,720 [INFO] __main__.py:188 - Skipping smallest-palindromic-rearrangement-ii 2025-04-13 08.25.28 because its status is 'Time Limit Exceeded'
2025-08-25 23:30:08,685 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:08,687 [INFO] __main__.py:245 - Writing smallest-palindromic-rearrangement-i/2025-04-13 08.22.19 - Accepted - runtime 37ms - memory 46.6MB.java
2025-08-25 23:30:09,041 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:09,048 [INFO] __main__.py:245 - Writing find-closest-person/2025-04-13 08.19.35 - Accepted - runtime 0ms - memory 41.1MB.java
2025-08-25 23:30:09,408 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:09,409 [INFO] __main__.py:245 - Writing find-the-count-of-good-integers/2025-04-12 13.21.26 - Accepted - runtime 113ms - memory 44.8MB.java
2025-08-25 23:30:09,778 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:09,782 [INFO] __main__.py:245 - Writing count-symmetric-integers/2025-04-11 06.40.55 - Accepted - runtime 44ms - memory 41.3MB.java
2025-08-25 23:30:10,219 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:10,219 [INFO] __main__.py:245 - Writing maximum-strong-pair-xor-i/2025-04-10 20.04.31 - Accepted - runtime 3ms - memory 43.3MB.java
2025-08-25 23:30:15,226 [DEBUG] leetcode.py:150 - Exporting submissions from 240 to 260
2025-08-25 23:30:15,855 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=240&limit=20 HTTP/11" 200 None
2025-08-25 23:30:15,857 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1602190231,"question_id":3243,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744246121,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1602190231/","is_pending":"Not Pending","title":"Count the Number of Powerful Integers","memory":"42.5 MB","code":"class Solution {\\n    public long numberOfPowerfulInt(long start, long finish, int limit, String s) {\\n        long suffix = 0L;\\n        for (char c : s.toCharArray())\\n            suffix = suffix * 10 + c - \'0\';\\n        if (suffix > finish)\\n            return 0;\\n        long div = (long) Math.pow(10, s.length()), ps = start / div, pf = finish / div;\\n        if (finish % div >= suffix)\\n            pf++;\\n        if (start % div > suffix)\\n            ps++;\\n        return getAvailNum(pf, limit) - getAvailNum(ps, limit);\\n    }\\n\\n    private long getAvailNum(long num, long limit) {\\n        if (num == 0)\\n            return 0;\\n        if (limit == 9)\\n            return num;\\n        int digits = (int) Math.log10(num);\\n        long div = (long) Math.pow(10, digits), res = 0L;\\n        for (int i = digits; i >= 0; i--) {\\n            int d = (int) (num / div);\\n            if (d > limit)\\n                return res + (long) Math.pow(limit + 1, i + 1);\\n            else\\n                res += d * (long) Math.pow(limit + 1, i);\\n            num %= div;\\n            div /= 10;\\n        }\\n        return res;\\n    }\\n}","compare_resulttitle_slug":"count-the-number-of-powerful-integers","has_notes":false,"flag_type":1,"frontend_id":410},{"id":1601243394,"question_id":3621,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744168458,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1601243394/","is_pending":"Not Pending","title":"Minimum Operations to Make Array Values Equal to K","memory":"44.6 MB","code":"class Solution {\\n    public int minOperations(int[] nums, int k) \\n    {\\n        int n=nums.length;\\n        int ct=count(nums,k);\\n        HashSet<Integer> hanss=new HashSet<>();\\n        if(ct==0){\\n            for(int i=0;i<n;i++){\\n                if(nums[i] != k)\\n                hanss.add(nums[i]);\\n            }\\n        }\\n        else{\\n            return -1;\\n        }\\n        return hanss.size();\\n    }\\n    int count(int a[],int k){\\n        int ct=0;\\n        for(int i=0;i<a.length;i++){\\n            if(a[i]<k)\\n                ct++;\\n        }\\n        return ct;\\n    }\\n}","compare_resulttitle_slug":"minimum-operations-to-make-array-values-equal-to-k","has_notes":false,"flag_type":1,"frontend_id":409},{"id":1600485956,"question_id":3656,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1744106056,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1600485956/","is_pending":"Not Pending","title":"Minimum Number of Operations to Make Elements in Array Distinct","memory":"45.1 MB","code":"import java.util.HashSet;\\n\\nclass Solution {\\n    public int minimumOperations(int[] nums) {\\n        int operat = 0;\\n        \\n        while (true) {\\n            HashSet<Integer> seen = new HashSet<>();\\n            boolean allDistinct = true;\\n            for (int num : nums) {\\n                if (!seen.add(num)) {  \\n                    allDistinct = false;\\n                    break;\\n                }\\n            }\\n            if (allDistinct) {\\n                break;\\n            }\\n            if (nums.length >= 3) {\\n                int[] newArray = new int[nums.length - 3];\\n                System.arraycopy(nums, 3, newArray, 0, newArray.length);\\n                nums = newArray;\\n            } else {\\n                nums = new int[0]; \\n            }\\n            \\n            operat++;\\n        }\\n        \\n        return operat;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-number-of-operations-to-make-elements-in-array-distinct","has_notes":false,"flag_type":1,"frontend_id":408},{"id":1599029504,"question_id":416,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1743986548,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/1599029504/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"57 MB","code":"class Solution {\\n    private int sumOf(int[] nums)\\n    {\\n        int sum = 0;\\n        for(int num:nums)\\n        sum += num;\\n        return sum;\\n    }\\n    private boolean rec(int i,int[] nums,int n,int sum,int[][] dp)\\n    {\\n        if(sum == 0) return true;\\n        if(0 > sum || i>=n) return false;\\n        if(dp[i][sum] != -1) return dp[i][sum] == 0 ? false: true;\\n\\n        boolean dont = rec(i+1,nums,n,sum,dp);\\n        boolean pick = false;\\n        if(nums[i]<=sum) pick = rec(i+1,nums, n,sum-nums[i],dp);\\n        dp[i][sum] = (pick || dont) ? 1: 0;\\n        return pick || dont;\\n\\n    }\\n    public boolean canPartition(int[] nums) {\\n        int n = nums.length;\\n        int s = sumOf(nums);\\n        if((s & 1) == 1) return false;\\n        s= s/2;\\n        int[][] dp = new int[n][s+1];\\n        for(int[] row:dp) Arrays.fill(row,-1);\\n        return rec(0,nums,n,s,dp);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false,"flag_type":1,"frontend_id":407},{"id":1597990594,"question_id":3773,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743906886,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1597990594/","is_pending":"Not Pending","title":"Minimum Pair Removal to Sort Array I","memory":"43 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public int minimumPairRemoval(int[] nums) {\\n        List<Integer> list = new ArrayList<>();\\n        for (int num : nums) list.add(num);\\n        int o = 0;\\n        while (!isNonDecreasing(list)) {\\n            int minSum = Integer.MAX_VALUE, index = 0;\\n            for (int i = 0; i < list.size() - 1; i++) {\\n                int sum = list.get(i) + list.get(i + 1);\\n                if (sum < minSum) {\\n                    minSum = sum;\\n                    index = i;\\n                }\\n            }\\n            int merged = list.get(index) + list.get(index + 1);\\n            list.remove(index + 1);\\n            list.set(index, merged);\\n            o++;\\n        }\\n        return o;\\n    }\\n\\n    private boolean isNonDecreasing(List<Integer> list) {\\n        for (int i = 1; i < list.size(); i++) {\\n            if (list.get(i) < list.get(i - 1)) return false;\\n        }\\n        return true;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-pair-removal-to-sort-array-i","has_notes":false,"flag_type":1,"frontend_id":406},{"id":1597973543,"question_id":31,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743904704,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1597973543/","is_pending":"Not Pending","title":"Next Permutation","memory":"42.7 MB","code":"class Solution {\\n    public void nextPermutation(int[] nums) {\\n        int n=nums.length;\\n        int i = n - 1;\\n        while (i > 0 && nums[i-1] >= nums[i]) {\\n            i--;\\n        }\\n        if (i == 0) {\\n            reverse(nums, 0, nums.length-1);\\n            return;\\n        }\\n        int j = nums.length - 1;\\n        while (j >= i && nums[j] <= nums[i-1]) {\\n            j--;\\n        }\\n        swap(nums, i-1, j);\\n        reverse(nums, i, nums.length-1);\\n    }\\n\\n    private void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n\\n    private void reverse(int[] nums, int start, int end) {\\n        while (start < end) {\\n            int temp = nums[start];\\n            nums[start] = nums[end];\\n            nums[end] = temp;\\n            start++;\\n            end--;\\n        }\\n    }\\n\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"next-permutation","has_notes":false,"flag_type":1,"frontend_id":405},{"id":1597972504,"question_id":368,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743904556,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1597972504/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"43.2 MB","code":"class Solution {\\n    public List<Integer> largestDivisibleSubset(int[] nums) {\\n        int n = nums.length;\\n        int[] dp = new int[n];\\n        Arrays.fill(dp, 1);\\n        Arrays.sort(nums);\\n        \\n        int maxSize = 1, maxIndex = 0;\\n        for (int i = 1; i < n; i++) {\\n            for (int j = 0; j < i; j++) {\\n                if (nums[i] % nums[j] == 0) {\\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\\n                    if (dp[i] > maxSize) {\\n                        maxSize = dp[i];\\n                        maxIndex = i;\\n                    }\\n                }\\n            }\\n        }\\n        \\n        List<Integer> r = new ArrayList<>();\\n        int num = nums[maxIndex];\\n        for (int i = maxIndex; i >= 0; i--) {\\n            if (num % nums[i] == 0 && dp[i] == maxSize) {\\n                r.add(nums[i]);\\n                num = nums[i];\\n                maxSize--;\\n            }\\n        }\\n        \\n        return r;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset","has_notes":false,"flag_type":1,"frontend_id":404},{"id":1597280259,"question_id":1993,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743841722,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1597280259/","is_pending":"Not Pending","title":"Sum of All Subset XOR Totals","memory":"40.9 MB","code":"class Solution {\\n    public int subsetXORSum(int[] nums) {\\n        int t = 0;\\n        int n=nums.length;\\n        for (int num : nums) {\\n            t |= num;  \\n        }\\n        return t * (1 << (n - 1));\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"sum-of-all-subset-xor-totals","has_notes":false,"flag_type":1,"frontend_id":403},{"id":1597279797,"question_id":1993,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743841681,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1597279797/","is_pending":"Not Pending","title":"Sum of All Subset XOR Totals","memory":"40.9 MB","code":"class Solution {\\n    public int subsetXORSum(int[] nums) {\\n        int t = 0;\\n        int n=nums.length;\\n        for (int num : nums) {\\n            t |= num;  \\n        }\\n        return t * (1 << (n - 1));\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"sum-of-all-subset-xor-totals","has_notes":false,"flag_type":1,"frontend_id":402},{"id":1596144295,"question_id":1218,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743734507,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1596144295/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"44.8 MB","code":"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode lcaDeepestLeaves(TreeNode root) {\\n        int maximumDepth = treeDepth(root);\\n        return findAncestors(root, 1, maximumDepth);\\n    }\\n\\n    public TreeNode findAncestors(TreeNode root, int depth, int maximumDepth){\\n        if(maximumDepth == depth || root == null)\\n            return root;\\n        TreeNode left = findAncestors(root.left, depth + 1, maximumDepth);\\n        TreeNode right = findAncestors(root.right, depth + 1, maximumDepth);\\n        if(left != null && right != null) return root;\\n        else if(left != null) return left;\\n        return right;\\n    }\\n\\n    public int treeDepth(TreeNode root){\\n        if(root == null)\\n            return 0;\\n        int left = treeDepth(root.left);\\n        int right = treeDepth(root.right);\\n        return 1 + Math.max(left, right);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-deepest-leaves","has_notes":false,"flag_type":1,"frontend_id":401},{"id":1595479332,"question_id":3152,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743678627,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1595479332/","is_pending":"Not Pending","title":"Maximum Value of an Ordered Triplet II","memory":"62.4 MB","code":"class Solution {\\n    public long maximumTripletValue(int[] nums) {\\n        int n = nums.length;\\n        if (n < 3) return 0;\\n\\n        int[] leftMax = new int[n];\\n        leftMax[0] = nums[0];\\n        for (int i = 1; i < n; i++) {\\n            leftMax[i] = Math.max(leftMax[i - 1], nums[i]);\\n        }\\n\\n        int[] rightMax = new int[n];\\n        rightMax[n - 1] = nums[n - 1];\\n        for (int i = n - 2; i >= 0; i--) {\\n            rightMax[i] = Math.max(rightMax[i + 1], nums[i]);\\n        }\\n\\n        long ans = 0;  \\n        for (int i = 1; i < n - 1; i++) {\\n            int left = leftMax[i - 1];\\n            int right = rightMax[i + 1];\\n            ans = Math.max(ans, (long)(left - nums[i]) * right); \\n        }\\n\\n        return ans;\\n    }\\n}","compare_resulttitle_slug":"maximum-value-of-an-ordered-triplet-ii","has_notes":false,"flag_type":1,"frontend_id":400},{"id":1593942717,"question_id":3154,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743568791,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1593942717/","is_pending":"Not Pending","title":"Maximum Value of an Ordered Triplet I","memory":"42.1 MB","code":"class Solution {\\n    public long maximumTripletValue(int[] nums) {\\n        int n = nums.length;\\n        int[] leftMax = new int[n];\\n        int[] rightMax = new int[n];\\n\\n        leftMax[0] = nums[0];\\n        for (int i = 1; i < n; i++) {\\n            leftMax[i] = Math.max(leftMax[i - 1], nums[i]);\\n        }\\n\\n        rightMax[n - 1] = nums[n - 1];\\n        for (int k = n - 2; k >= 0; k--) {\\n            rightMax[k] = Math.max(rightMax[k + 1], nums[k]);\\n        }\\n\\n        long m= 0;\\n        for (int j = 1; j < n - 1; j++) {\\n            long value = (long) (leftMax[j - 1] - nums[j]) * rightMax[j + 1];\\n            m = Math.max(m, value);\\n        }\\n\\n        return m;\\n    }\\n}","compare_resulttitle_slug":"maximum-value-of-an-ordered-triplet-i","has_notes":false,"flag_type":1,"frontend_id":399},{"id":1593357031,"question_id":25,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743525587,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1593357031/","is_pending":"Not Pending","title":"Reverse Nodes in k-Group","memory":"44 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    private ListNode rec(ListNode head,int k)\\n    {\\n        if(head==null)\\n        return null;\\n        int c = k;\\n        ListNode curr = head,prev = null,next = null;\\n        while(curr!=null && c>0)\\n        {\\n            next = curr.next;\\n            curr.next = prev;\\n            prev = curr;\\n            curr = next;\\n            c--;\\n        }\\n        if(c>0)\\n        {\\n            curr = prev;\\n            next = null;\\n            prev = null;\\n            while(curr!=null)\\n            {\\n                next = curr.next;\\n                curr.next = prev;\\n                prev = curr;\\n                curr = next;\\n            }\\n        }\\n        if(c>0) return prev;\\n        head.next = rec(curr,k);\\n        return prev;\\n    }\\n    public ListNode reverseKGroup(ListNode head, int k) {\\n        return rec(head,k);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-nodes-in-k-group","has_notes":false,"flag_type":1,"frontend_id":398},{"id":1593355295,"question_id":445,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743525505,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1593355295/","is_pending":"Not Pending","title":"Add Two Numbers II","memory":"44.6 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        Stack<Integer> stack1 = new Stack<>();\\n        Stack<Integer> stack2 = new Stack<>();\\n\\n        ListNode res = null;\\n\\n        while (l1 != null) {\\n            stack1.push(l1.val);\\n            l1 = l1.next;\\n        }\\n\\n        while (l2 != null) {\\n            stack2.push(l2.val);\\n            l2 = l2.next;\\n        }\\n\\n        int carry = 0;\\n        while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {\\n            int sum = carry;\\n            if (!stack1.isEmpty()) sum += stack1.pop();\\n            if (!stack2.isEmpty()) sum += stack2.pop();\\n\\n            carry = sum / 10;\\n            ListNode newNode = new ListNode(sum % 10);\\n            newNode.next = res;\\n            res = newNode;\\n        }\\n\\n        return res;\\n    }\\n}","compare_resulttitle_slug":"add-two-numbers-ii","has_notes":false,"flag_type":1,"frontend_id":397},{"id":1593354578,"question_id":237,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743525472,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1593354578/","is_pending":"Not Pending","title":"Delete Node in a Linked List","memory":"43.8 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"delete-node-in-a-linked-list","has_notes":false,"flag_type":1,"frontend_id":396},{"id":1593353909,"question_id":2,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743525437,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1593353909/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"44.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        ListNode d = new ListNode();\\n        ListNode res = d;\\n        int total = 0, carry = 0;\\n\\n        while (l1 != null || l2 != null || carry != 0) {\\n            total = carry;\\n\\n            if (l1 != null) {\\n                total += l1.val;\\n                l1 = l1.next;\\n            }\\n            if (l2 != null) {\\n                total += l2.val;\\n                l2 = l2.next;\\n            }\\n\\n            int num = total % 10;\\n            carry = total / 10;\\n            d.next = new ListNode(num);\\n            d = d.next;\\n        }\\n\\n        return res.next;        \\n    }\\n}","compare_resulttitle_slug":"add-two-numbers","has_notes":false,"flag_type":1,"frontend_id":395},{"id":1592804820,"question_id":61,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743490394,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1592804820/","is_pending":"Not Pending","title":"Rotate List","memory":"42.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode rotateRight(ListNode head, int k) {\\n        if(k==0||head==null||head.next==null) return head;\\n        ListNode curr=head;\\n        int cnt=1;\\n        while(curr.next!=null){\\n                curr=curr.next;\\n                cnt++;\\n        }\\n        curr.next=head;\\n        int n=cnt-(k%cnt);\\n        for(int i=0;i<n;i++){\\n            curr=curr.next;\\n        }\\n        head=curr.next;\\n        curr.next=null;\\n        return head;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1,"frontend_id":394},{"id":1592801079,"question_id":908,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743490114,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1592801079/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"41.2 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode middleNode(ListNode head) {\\n        if(head==null || head.next == null) return head;\\n        ListNode s=head,fast=head;\\n        while(fast != null && fast.next != null){\\n            s= s.next;\\n            fast = fast.next.next;\\n        }\\n        return s;\\n    }\\n}","compare_result":"111111111111111111111111111111111111","title_slug":"middle-of-the-linked-list","has_notes":false,"flag_type":1,"frontend_id":393},{"id":1592799632,"question_id":160,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743490014,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1592799632/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"47.6 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) {\\n *         val = x;\\n *         next = null;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\\n        if(headA == null || headB == null) return null;\\n    ListNode a = headA;\\n    ListNode b = headB;\\n    while( a != b){\\n        a = a == null? headB : a.next;\\n        b = b == null? headA : b.next;    \\n    }\\n    return a;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists","has_notes":false,"flag_type":1,"frontend_id":392},{"id":1592798495,"question_id":203,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743489933,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1592798495/","is_pending":"Not Pending","title":"Remove Linked List Elements","memory":"45.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode removeElements(ListNode head, int val) {\\n        ListNode ans = new ListNode(0, head);\\n        ListNode d = ans;\\n\\n        while (d != null) {\\n            while (d.next != null && d.next.val == val) {\\n                d.next = d.next.next;\\n            }\\n            d = d.next;\\n        }\\n\\n        return ans.next;        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-linked-list-elements","has_notes":false,"flag_type":1,"frontend_id":391}],"has_next":true,"last_key":""}'
2025-08-25 23:30:16,249 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:16,251 [INFO] __main__.py:245 - Writing count-the-number-of-powerful-integers/2025-04-10 06.18.41 - Accepted - runtime 1ms - memory 42.5MB.java
2025-08-25 23:30:16,629 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:16,629 [INFO] __main__.py:245 - Writing minimum-operations-to-make-array-values-equal-to-k/2025-04-09 08.44.18 - Accepted - runtime 3ms - memory 44.6MB.java
2025-08-25 23:30:17,142 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:17,146 [INFO] __main__.py:245 - Writing minimum-number-of-operations-to-make-elements-in-array-distinct/2025-04-08 15.24.16 - Accepted - runtime 3ms - memory 45.1MB.java
2025-08-25 23:30:17,589 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:17,593 [INFO] __main__.py:245 - Writing partition-equal-subset-sum/2025-04-07 06.12.28 - Accepted - runtime 104ms - memory 57MB.java
2025-08-25 23:30:17,968 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:17,984 [INFO] __main__.py:245 - Writing minimum-pair-removal-to-sort-array-i/2025-04-06 08.04.46 - Accepted - runtime 3ms - memory 43MB.java
2025-08-25 23:30:18,317 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:18,329 [INFO] __main__.py:245 - Writing next-permutation/2025-04-06 07.28.24 - Accepted - runtime 0ms - memory 42.7MB.java
2025-08-25 23:30:18,704 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:18,706 [INFO] __main__.py:245 - Writing largest-divisible-subset/2025-04-06 07.25.56 - Accepted - runtime 13ms - memory 43.2MB.java
2025-08-25 23:30:19,535 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:19,535 [INFO] __main__.py:245 - Writing sum-of-all-subset-xor-totals/2025-04-05 13.58.42 - Accepted - runtime 0ms - memory 40.9MB.java
2025-08-25 23:30:19,535 [INFO] __main__.py:208 - Skipping sum-of-all-subset-xor-totals 2025-04-05 13.58.01 in java because a more recent submission has already been exported
2025-08-25 23:30:19,873 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:19,873 [INFO] __main__.py:245 - Writing lowest-common-ancestor-of-deepest-leaves/2025-04-04 08.11.47 - Accepted - runtime 0ms - memory 44.8MB.java
2025-08-25 23:30:20,754 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:20,754 [INFO] __main__.py:245 - Writing maximum-value-of-an-ordered-triplet-ii/2025-04-03 16.40.27 - Accepted - runtime 3ms - memory 62.4MB.java
2025-08-25 23:30:21,081 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:21,081 [INFO] __main__.py:245 - Writing maximum-value-of-an-ordered-triplet-i/2025-04-02 10.09.51 - Accepted - runtime 1ms - memory 42.1MB.java
2025-08-25 23:30:21,489 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:21,493 [INFO] __main__.py:245 - Writing reverse-nodes-in-k-group/2025-04-01 22.09.47 - Accepted - runtime 0ms - memory 44MB.java
2025-08-25 23:30:21,819 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:21,823 [INFO] __main__.py:245 - Writing add-two-numbers-ii/2025-04-01 22.08.25 - Accepted - runtime 3ms - memory 44.6MB.java
2025-08-25 23:30:22,206 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:22,208 [INFO] __main__.py:245 - Writing delete-node-in-a-linked-list/2025-04-01 22.07.52 - Accepted - runtime 0ms - memory 43.8MB.java
2025-08-25 23:30:22,555 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:22,558 [INFO] __main__.py:245 - Writing add-two-numbers/2025-04-01 22.07.17 - Accepted - runtime 2ms - memory 44.5MB.java
2025-08-25 23:30:23,020 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:23,020 [INFO] __main__.py:245 - Writing rotate-list/2025-04-01 12.23.14 - Accepted - runtime 0ms - memory 42.5MB.java
2025-08-25 23:30:23,937 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:23,939 [INFO] __main__.py:245 - Writing middle-of-the-linked-list/2025-04-01 12.18.34 - Accepted - runtime 0ms - memory 41.2MB.java
2025-08-25 23:30:24,275 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:24,277 [INFO] __main__.py:245 - Writing intersection-of-two-linked-lists/2025-04-01 12.16.54 - Accepted - runtime 1ms - memory 47.6MB.java
2025-08-25 23:30:24,658 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:24,659 [INFO] __main__.py:245 - Writing remove-linked-list-elements/2025-04-01 12.15.33 - Accepted - runtime 1ms - memory 45.5MB.java
2025-08-25 23:30:29,661 [DEBUG] leetcode.py:150 - Exporting submissions from 260 to 280
2025-08-25 23:30:30,366 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=260&limit=20 HTTP/11" 200 None
2025-08-25 23:30:30,375 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1592795933,"question_id":83,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743489752,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1592795933/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"44.4 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode deleteDuplicates(ListNode head) {\\n        ListNode r = head;\\n\\n        while (head != null && head.next != null) {\\n            if (head.val == head.next.val) {\\n                head.next = head.next.next;\\n            } else {\\n                head = head.next;\\n            }\\n        }\\n\\n        return r;        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1,"frontend_id":390},{"id":1592750351,"question_id":2262,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743486583,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1592750351/","is_pending":"Not Pending","title":"Solving Questions With Brainpower","memory":"125.3 MB","code":"class Solution {\\n    private long rec(int i,int[][] questions,long[] dp,int n)\\n    {\\n        if(i>=n) return 0;\\n        if(dp[i]!=-1) return dp[i];\\n\\n        long take = questions[i][0] + rec(i+questions[i][1]+1,questions,dp,n);\\n        long dont = rec(i+1,questions,dp,n);\\n\\n        return dp[i] = Math.max(take,dont);\\n\\n    }\\n    public long mostPoints(int[][] questions) {\\n        int n = questions.length;\\n        long[] d = new long[n];\\n        Arrays.fill(d,-1);\\n        return rec(0,questions,d,n);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"solving-questions-with-brainpower","has_notes":false,"flag_type":1,"frontend_id":389},{"id":1592228625,"question_id":155,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743438700,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1592228625/","is_pending":"Not Pending","title":"Min Stack","memory":"45.2 MB","code":"class MinStack {\\n    private List<int[]> st;\\n\\n    public MinStack() {\\n        st = new ArrayList<>();\\n    }\\n    \\n    public void push(int val) {\\n        int[] top = st.isEmpty() ? new int[]{val, val} : st.get(st.size() - 1);\\n        int min_val = top[1];\\n        if (min_val > val) {\\n            min_val = val;\\n        }\\n        st.add(new int[]{val, min_val});        \\n    }\\n    \\n    public void pop() {\\n        st.remove(st.size() - 1);\\n    }\\n    \\n    public int top() {\\n        return st.isEmpty() ? -1 : st.get(st.size() - 1)[0];\\n    }\\n    \\n    public int getMin() {\\n        return st.isEmpty() ? -1 : st.get(st.size() - 1)[1];\\n    }\\n}","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1,"frontend_id":388},{"id":1592225693,"question_id":1018,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743438511,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1592225693/","is_pending":"Not Pending","title":"Largest Perimeter Triangle","memory":"45.4 MB","code":"class Solution {\\n    public int largestPerimeter(int[] nums) {\\n        if(nums.length < 3){\\n            return 0;\\n        }\\n        Arrays.sort(nums);\\n        for (int i = nums.length - 1; i >= 2; i--) {\\n            if(nums[i-2] + nums[i-1] > nums[i]){\\n                return nums[i-2] + nums[i-1] + nums[i];\\n            }\\n        }\\n        return 0;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-perimeter-triangle","has_notes":false,"flag_type":1,"frontend_id":387},{"id":1592224895,"question_id":890,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743438459,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1592224895/","is_pending":"Not Pending","title":"Lemonade Change","memory":"55.6 MB","code":"class Solution {\\n    public boolean lemonadeChange(int[] bills) {\\n        int five_dollars = 0, ten_dollars = 0;\\n\\n        for (int x : bills) {\\n            if (x == 5) {\\n                five_dollars++;\\n            } else if (x == 10) {\\n                if (five_dollars > 0) {\\n                    five_dollars--;\\n                    ten_dollars++;\\n                } else {\\n                    return false;\\n                }\\n            } else {\\n                if (five_dollars > 0 && ten_dollars > 0) {\\n                    five_dollars--;\\n                    ten_dollars--;\\n                } else if (five_dollars > 2) {\\n                    five_dollars -= 3;\\n                } else {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"lemonade-change","has_notes":false,"flag_type":1,"frontend_id":386},{"id":1592217940,"question_id":45,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743438005,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1592217940/","is_pending":"Not Pending","title":"Jump Game II","memory":"45 MB","code":"class Solution {\\n    public int jump(int[] nums) {\\n        int near = 0, far = 0, j = 0;\\n\\n        while (far < nums.length - 1) {\\n            int farthest = 0;\\n            for (int i = near; i <= far; i++) {\\n                farthest = Math.max(farthest, i + nums[i]);\\n            }\\n            near = far + 1;\\n            far = farthest;\\n            j++;\\n        }\\n\\n        return j;        \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-ii","has_notes":false,"flag_type":1,"frontend_id":385},{"id":1592064677,"question_id":645,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743427569,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1592064677/","is_pending":"Not Pending","title":"Set Mismatch","memory":"46 MB","code":"\\nclass Solution {\\n    public int[] findErrorNums(int[] nums) {\\n        int n = nums.length;\\n        int actual_sum = n * (n + 1) / 2;\\n        int array_sum = 0;\\n        int unique_sum = 0;\\n        Set<Integer> s = new HashSet<>();\\n\\n        for (int a : nums) {\\n            array_sum += a;\\n        }\\n\\n        for (int a : nums) {\\n            s.add(a);\\n        }\\n\\n        for (int a : s) {\\n            unique_sum += a;\\n        }\\n\\n        int m = actual_sum - unique_sum;\\n        int d = array_sum - unique_sum;\\n\\n        return new int[]{d, m};\\n    }\\n}\\n\\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"set-mismatch","has_notes":false,"flag_type":1,"frontend_id":384},{"id":1592062064,"question_id":628,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743427372,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1592062064/","is_pending":"Not Pending","title":"Maximum Product of Three Numbers","memory":"46 MB","code":"class Solution {\\n    public int maximumProduct(int[] nums) {\\n        Arrays.sort(nums);\\n        int b=nums.length;\\n        int ans = Math.max(nums[b-1]*nums[b-2]*nums[b-3],nums[0]*nums[1]*nums[b-1]);\\n        return ans;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-three-numbers","has_notes":false,"flag_type":1,"frontend_id":383},{"id":1592060630,"question_id":628,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743427264,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1592060630/","is_pending":"Not Pending","title":"Maximum Product of Three Numbers","memory":"N/A","code":"class Solution {\\n    public int maximumProduct(int[] nums) {\\n        int p=1;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            p*=nums[i];\\n        }\\n        return p;\\n    }\\n}","compare_result":"111111111011000011110000000100000010001100000000000000000000000000000000000000000000000001000","title_slug":"maximum-product-of-three-numbers","has_notes":false,"flag_type":1,"frontend_id":382},{"id":1592059257,"question_id":561,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743427163,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1592059257/","is_pending":"Not Pending","title":"Array Partition","memory":"46.8 MB","code":"class Solution {\\n    public int arrayPairSum(int[] nums) {\\n        Arrays.sort(nums); \\n        int s = 0;\\n        for (int i = 0; i < nums.length; i += 2) {\\n            s += nums[i]; \\n        }\\n        return s;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"array-partition","has_notes":false,"flag_type":1,"frontend_id":381},{"id":1592056694,"question_id":506,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743426974,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1592056694/","is_pending":"Not Pending","title":"Relative Ranks","memory":"46 MB","code":"class Solution {\\n    public String[] findRelativeRanks(int[] score) {\\n        \\n        int n = score.length;\\n        \\n        int maxScore = 0;\\n        for (int i = 0 ; i < n ; i++) {\\n            maxScore = Math.max(maxScore, score[i]);\\n        }\\n        \\n        int[]  score2Index = new int[maxScore+1];\\n        \\n        for (int i = 0 ; i < n ; i++) {\\n            score2Index[score[i]] = i+1;\\n        }\\n        \\n        String[] ans = new String[n];\\n        \\n        int place = 1;\\n        \\n        for (int i = maxScore ; i >= 0 ; i--) {\\n            \\n            if (score2Index[i] == 0) continue;\\n                \\n            int actualIndex = score2Index[i] - 1;\\n            if (place == 1) {\\n                ans[actualIndex] = \\"Gold Medal\\";\\n            } else if (place == 2) {\\n                ans[actualIndex] = \\"Silver Medal\\";\\n            } else if (place == 3) {\\n                ans[actualIndex] = \\"Bronze Medal\\";\\n            } else {\\n                ans[actualIndex] = String.valueOf(place);\\n            }\\n            place++; \\n        }\\n        \\n        return ans;\\n    }\\n}","compare_result":"111111111111111111","title_slug":"relative-ranks","has_notes":false,"flag_type":1,"frontend_id":380},{"id":1592054465,"question_id":455,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743426815,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1592054465/","is_pending":"Not Pending","title":"Assign Cookies","memory":"48.7 MB","code":"class Solution {\\n    public int findContentChildren(int[] g, int[] s) {\\n        int cookiesNums = s.length;\\n        if(cookiesNums == 0)  return 0;\\n        Arrays.sort(g);\\n        Arrays.sort(s);\\n\\n        int maxNum = 0;\\n        int cookieIndex = cookiesNums - 1;\\n        int childIndex = g.length - 1;\\n        while(cookieIndex >= 0 && childIndex >=0){\\n            if(s[cookieIndex] >= g[childIndex]){\\n                maxNum++;\\n                cookieIndex--;\\n                childIndex--;\\n            }\\n            else{\\n                childIndex--;\\n            }\\n        }\\n\\n        return maxNum;\\n    }\\n}","compare_result":"1111111111111111111111111","title_slug":"assign-cookies","has_notes":false,"flag_type":1,"frontend_id":379},{"id":1591632051,"question_id":2681,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1743393869,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/1591632051/","is_pending":"Not Pending","title":"Put Marbles in Bags","memory":"56.2 MB","code":"class Solution {\\n    public long putMarbles(int[] weights, int k) {\\n        if (k == 1) {\\n            return 0;\\n        }\\n        List<Integer> pairSums = new ArrayList<>();\\n        for (int i = 0; i < weights.length - 1; i++) {\\n            pairSums.add(weights[i] + weights[i + 1]);\\n        }\\n        Collections.sort(pairSums);\\n        long min = 0, max = 0;\\n        for (int i = 0; i < k - 1; i++) {\\n            min += pairSums.get(i);\\n            max += pairSums.get(pairSums.size() - 1 - i);\\n        }\\n        return max - min;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"put-marbles-in-bags","has_notes":false,"flag_type":1,"frontend_id":378},{"id":1591266010,"question_id":55,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743354474,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1591266010/","is_pending":"Not Pending","title":"Jump Game","memory":"45.9 MB","code":"class Solution {\\n    public boolean canJump(int[] nums) {\\n        int goal = nums.length - 1;\\n\\n        for (int i = nums.length - 2; i >= 0; i--) {\\n            if (i + nums[i] >= goal) {\\n                goal = i;\\n            }\\n        }\\n\\n        return goal == 0;        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game","has_notes":false,"flag_type":1,"frontend_id":377},{"id":1591264762,"question_id":414,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743354392,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1591264762/","is_pending":"Not Pending","title":"Third Maximum Number","memory":"42.8 MB","code":"class Solution {\\n    public int thirdMax(int[] nums) {\\n        long max1=Long.MIN_VALUE;\\n        long max2=Long.MIN_VALUE;\\n        long max3=Long.MIN_VALUE;\\n        for(int num : nums){\\n            if(num>max1){\\n                max3 = max2;\\n                max2 = max1;\\n                max1 = num;\\n            }else if(max1>num && num>max2){\\n                max3 = max2;\\n                max2 = num;\\n            }else if(max2>num && num>max3){\\n                max3=num;\\n            }\\n        }\\n        return max3 != Long.MIN_VALUE ? (int) max3 : (int) max1;\\n    }\\n}","compare_result":"1111111111111111111111111111111111","title_slug":"third-maximum-number","has_notes":false,"flag_type":1,"frontend_id":376},{"id":1591259089,"question_id":378,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743354027,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1591259089/","is_pending":"Not Pending","title":"Kth Smallest Element in a Sorted Matrix","memory":"50.2 MB","code":"public class Solution {\\n    public int kthSmallest(int[][] matrix, int k) {\\n        int lo = matrix[0][0], hi = matrix[matrix.length - 1][matrix[0].length - 1] + 1;//[lo, hi)\\n        while(lo < hi) {\\n            int mid = lo + (hi - lo) / 2;\\n            int count = 0,  j = matrix[0].length - 1;\\n            for(int i = 0; i < matrix.length; i++) {\\n                while(j >= 0 && matrix[i][j] > mid) j--;\\n                count += (j + 1);\\n            }\\n            if(count < k) lo = mid + 1;\\n            else hi = mid;\\n        }\\n        return lo;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-sorted-matrix","has_notes":false,"flag_type":1,"frontend_id":375},{"id":1591256044,"question_id":368,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743353824,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1591256044/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"42.6 MB","code":"class Solution {\\n    public List<Integer> largestDivisibleSubset(int[] nums) {\\n        int n = nums.length;\\n        int[] dp = new int[n];\\n        Arrays.fill(dp, 1);\\n        Arrays.sort(nums);\\n        \\n        int maxSize = 1, maxIndex = 0;\\n        for (int i = 1; i < n; i++) {\\n            for (int j = 0; j < i; j++) {\\n                if (nums[i] % nums[j] == 0) {\\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\\n                    if (dp[i] > maxSize) {\\n                        maxSize = dp[i];\\n                        maxIndex = i;\\n                    }\\n                }\\n            }\\n        }\\n        \\n        List<Integer> r = new ArrayList<>();\\n        int num = nums[maxIndex];\\n        for (int i = maxIndex; i >= 0; i--) {\\n            if (num % nums[i] == 0 && dp[i] == maxSize) {\\n                r.add(nums[i]);\\n                num = nums[i];\\n                maxSize--;\\n            }\\n        }\\n        \\n        return r;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset","has_notes":false,"flag_type":1,"frontend_id":374},{"id":1591253850,"question_id":347,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743353678,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1591253850/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"49.3 MB","code":"class Solution {\\n    public int[] topKFrequent(int[] nums, int k) {\\n        Map<Integer, Integer> counter = new HashMap<>();\\n        for (int n : nums) {\\n            counter.put(n, counter.getOrDefault(n, 0) + 1);\\n        }\\n        \\n        PriorityQueue<Map.Entry<Integer, Integer>> heap = new PriorityQueue<>(\\n            (a, b) -> Integer.compare(b.getValue(), a.getValue())\\n        );\\n        \\n        for (Map.Entry<Integer, Integer> entry : counter.entrySet()) {\\n            heap.offer(entry);\\n        }\\n        \\n        int[] r = new int[k];\\n        for (int i = 0; i < k; i++) {\\n            r[i] = Objects.requireNonNull(heap.poll()).getKey();\\n        }\\n        \\n        return r;        \\n    }\\n}","compare_result":"111111111111111111111","title_slug":"top-k-frequent-elements","has_notes":false,"flag_type":1,"frontend_id":373},{"id":1591238611,"question_id":274,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743352639,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1591238611/","is_pending":"Not Pending","title":"H-Index","memory":"41.1 MB","code":"class Solution {\\n    public int hIndex(int[] citations) {\\n        int papers = citations.length;\\n        int[] citationBuckets = new int[papers + 1];\\n\\n        for (int citation : citations) {\\n            citationBuckets[Math.min(citation, papers)]++;\\n        }\\n\\n        int cumulativePapers = 0;\\n        for (int hIndex = papers; hIndex >= 0; hIndex--) {\\n            cumulativePapers += citationBuckets[hIndex];\\n            if (cumulativePapers >= hIndex) {\\n                return hIndex;\\n            }\\n        }\\n        return 0;        \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"h-index","has_notes":false,"flag_type":1,"frontend_id":372},{"id":1591235713,"question_id":215,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743352444,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1591235713/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"57.7 MB","code":"class Solution {\\n    public int findKthLargest(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        return nums[nums.length-k];\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1,"frontend_id":371}],"has_next":true,"last_key":""}'
2025-08-25 23:30:30,807 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:30,809 [INFO] __main__.py:245 - Writing remove-duplicates-from-sorted-list/2025-04-01 12.12.32 - Accepted - runtime 0ms - memory 44.4MB.java
2025-08-25 23:30:31,145 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:31,150 [INFO] __main__.py:245 - Writing solving-questions-with-brainpower/2025-04-01 11.19.43 - Accepted - runtime 13ms - memory 125.3MB.java
2025-08-25 23:30:31,532 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:31,537 [INFO] __main__.py:245 - Writing min-stack/2025-03-31 22.01.40 - Accepted - runtime 4ms - memory 45.2MB.java
2025-08-25 23:30:31,908 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:31,908 [INFO] __main__.py:245 - Writing largest-perimeter-triangle/2025-03-31 21.58.31 - Accepted - runtime 7ms - memory 45.4MB.java
2025-08-25 23:30:32,529 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:32,533 [INFO] __main__.py:245 - Writing lemonade-change/2025-03-31 21.57.39 - Accepted - runtime 1ms - memory 55.6MB.java
2025-08-25 23:30:33,373 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:33,375 [INFO] __main__.py:245 - Writing jump-game-ii/2025-03-31 21.50.05 - Accepted - runtime 1ms - memory 45MB.java
2025-08-25 23:30:33,700 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:33,700 [INFO] __main__.py:245 - Writing set-mismatch/2025-03-31 18.56.09 - Accepted - runtime 10ms - memory 46MB.java
2025-08-25 23:30:34,075 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:34,077 [INFO] __main__.py:245 - Writing maximum-product-of-three-numbers/2025-03-31 18.52.52 - Accepted - runtime 12ms - memory 46MB.java
2025-08-25 23:30:34,079 [INFO] __main__.py:188 - Skipping maximum-product-of-three-numbers 2025-03-31 18.51.04 because its status is 'Wrong Answer'
2025-08-25 23:30:34,990 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:34,992 [INFO] __main__.py:245 - Writing array-partition/2025-03-31 18.49.23 - Accepted - runtime 12ms - memory 46.8MB.java
2025-08-25 23:30:35,359 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:35,359 [INFO] __main__.py:245 - Writing relative-ranks/2025-03-31 18.46.14 - Accepted - runtime 2ms - memory 46MB.java
2025-08-25 23:30:35,696 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:35,696 [INFO] __main__.py:245 - Writing assign-cookies/2025-03-31 18.43.35 - Accepted - runtime 9ms - memory 48.7MB.java
2025-08-25 23:30:36,512 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:36,512 [INFO] __main__.py:245 - Writing put-marbles-in-bags/2025-03-31 09.34.29 - Accepted - runtime 103ms - memory 56.2MB.java
2025-08-25 23:30:36,843 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:36,853 [INFO] __main__.py:245 - Writing jump-game/2025-03-30 22.37.54 - Accepted - runtime 1ms - memory 45.9MB.java
2025-08-25 23:30:37,612 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:37,612 [INFO] __main__.py:245 - Writing third-maximum-number/2025-03-30 22.36.32 - Accepted - runtime 1ms - memory 42.8MB.java
2025-08-25 23:30:37,941 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:37,941 [INFO] __main__.py:245 - Writing kth-smallest-element-in-a-sorted-matrix/2025-03-30 22.30.27 - Accepted - runtime 1ms - memory 50.2MB.java
2025-08-25 23:30:37,941 [INFO] __main__.py:208 - Skipping largest-divisible-subset 2025-03-30 22.27.04 in java because a more recent submission has already been exported
2025-08-25 23:30:37,941 [INFO] __main__.py:208 - Skipping top-k-frequent-elements 2025-03-30 22.24.38 in java because a more recent submission has already been exported
2025-08-25 23:30:38,300 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:38,318 [INFO] __main__.py:245 - Writing h-index/2025-03-30 22.07.19 - Accepted - runtime 0ms - memory 41.1MB.java
2025-08-25 23:30:38,686 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:38,686 [INFO] __main__.py:245 - Writing kth-largest-element-in-an-array/2025-03-30 22.04.04 - Accepted - runtime 22ms - memory 57.7MB.java
2025-08-25 23:30:43,689 [DEBUG] leetcode.py:150 - Exporting submissions from 280 to 300
2025-08-25 23:30:44,269 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=280&limit=20 HTTP/11" 200 None
2025-08-25 23:30:44,316 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1590622412,"question_id":3808,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743302693,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1590622412/","is_pending":"Not Pending","title":"Longest Palindrome After Substring Concatenation II","memory":"N/A","code":"class Solution {\\n    public int longestPalindrome(String s, String t) {\\n        int maxLen = 0;\\n        \\n        // Check all substrings of s and t separately and their combinations\\n        maxLen = Math.max(maxLen, longestPalindromicSubstring(s));\\n        maxLen = Math.max(maxLen, longestPalindromicSubstring(t));\\n        \\n        for (int i = 0; i < s.length(); i++) {\\n            for (int j = i; j < s.length(); j++) {\\n                String subS = s.substring(i, j + 1);\\n                \\n                for (int k = 0; k < t.length(); k++) {\\n                    for (int l = k; l < t.length(); l++) {\\n                        String subT = t.substring(k, l + 1);\\n                        String combined = subS + subT;\\n                        \\n                        if (isPalindrome(combined)) {\\n                            maxLen = Math.max(maxLen, combined.length());\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n\\n    private int longestPalindromicSubstring(String str) {\\n        int n = str.length();\\n        int maxLength = 0;\\n        boolean[][] dp = new boolean[n][n];\\n        \\n        for (int len = 1; len <= n; len++) {\\n            for (int i = 0; i + len - 1 < n; i++) {\\n                int j = i + len - 1;\\n                if (str.charAt(i) == str.charAt(j)) {\\n                    if (len == 1 || len == 2) {\\n                        dp[i][j] = true;\\n                    } else {\\n                        dp[i][j] = dp[i + 1][j - 1];\\n                    }\\n                }\\n                \\n                if (dp[i][j]) {\\n                    maxLength = Math.max(maxLength, len);\\n                }\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n\\n    private boolean isPalindrome(String str) {\\n        int left = 0, right = str.length() - 1;\\n        while (left < right) {\\n            if (str.charAt(left) != str.charAt(right)) {\\n                return false;\\n            }\\n            left++;\\n            right--;\\n        }\\n        return true;\\n    }\\n}\\n","compare_resulttitle_slug":"longest-palindrome-after-substring-concatenation-ii","has_notes":false,"flag_type":1,"frontend_id":370},{"id":1590617644,"question_id":3808,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743302462,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1590617644/","is_pending":"Not Pending","title":"Longest Palindrome After Substring Concatenation II","memory":"N/A","code":"class Solution {\\n    public int longestPalindrome(String s, String t) {\\n        int maxLen = 0;\\n        String calomirent = \\"\\"; \\n        \\n        for (int i = 0; i <= s.length(); i++) {\\n            for (int j = i; j <= s.length(); j++) {\\n                String subS = s.substring(i, j);\\n                \\n                for (int k = 0; k <= t.length(); k++) {\\n                    for (int l = k; l <= t.length(); l++) {\\n                        String subT = t.substring(k, l);\\n                        calomirent = subS + subT; \\n                        \\n                        if (isPalindrome(calomirent)) {\\n                            maxLen = Math.max(maxLen, calomirent.length());\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n\\n    private boolean isPalindrome(String str) {\\n        int left = 0, right = str.length() - 1;\\n        while (left < right) {\\n            if (str.charAt(left) != str.charAt(right)) {\\n                return false;\\n            }\\n            left++;\\n            right--;\\n        }\\n        return true;\\n    }\\n}\\n","compare_resulttitle_slug":"longest-palindrome-after-substring-concatenation-ii","has_notes":false,"flag_type":1,"frontend_id":369},{"id":1590613362,"question_id":3793,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743302265,"status":10,"status_display":"Accepted","runtime":"400 ms","url":"/submissions/detail/1590613362/","is_pending":"Not Pending","title":"Longest Palindrome After Substring Concatenation I","memory":"45.5 MB","code":"class Solution {\\n    public int longestPalindrome(String s, String t) {\\n        int m = 0; \\n        for (int i = 0; i <= s.length(); i++) {\\n            for (int j = i; j <= s.length(); j++) {\\n                String subS = s.substring(i, j);\\n                for (int k = 0; k <= t.length(); k++) {\\n                    for (int l = k; l <= t.length(); l++) {\\n                        String subT = t.substring(k, l);\\n                        String combined = subS + subT;\\n                        if (isPalindrome(combined)) {\\n                            m = Math.max(m, combined.length());\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return m;\\n    }\\n    private boolean isPalindrome(String str) {\\n        int l = 0, r = str.length() - 1;\\n        while (l < r) {\\n            if (str.charAt(l) != str.charAt(r)) {\\n                return false;\\n            }\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindrome-after-substring-concatenation-i","has_notes":false,"flag_type":1,"frontend_id":368},{"id":1590613126,"question_id":3793,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743302255,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1590613126/","is_pending":"Not Pending","title":"Longest Palindrome After Substring Concatenation I","memory":"N/A","code":"class Solution {\\n    public int longestPalindrome(String s, String t) {\\n        int m = 0; \\n        for (int i = 0; i <= s.length(); i++) {\\n            for (int j = i; j <= s.length(); j++) {\\n                String subS = s.substring(i, j);\\n                for (int k = 0; k <= t.length(); k++) {\\n                    for (int l = k; l <= t.length(); l++) {\\n                        String subT = t.substring(k, l);\\n                        String combined = subS + subT;\\n                        if (isPalindrome(combined)) {\\n                            m = Math.max(m, combined.length());\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return maxLen;\\n    }\\n    private boolean isPalindrome(String str) {\\n        int l = 0, r = str.length() - 1;\\n        while (l < r) {\\n            if (str.charAt(l) != str.charAt(r)) {\\n                return false;\\n            }\\n            l++;\\n            r--;\\n        }\\n        return true;\\n    }\\n}\\n","compare_result":null,"title_slug":"longest-palindrome-after-substring-concatenation-i","has_notes":false,"flag_type":1,"frontend_id":367},{"id":1590610654,"question_id":3793,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743302154,"status":10,"status_display":"Accepted","runtime":"399 ms","url":"/submissions/detail/1590610654/","is_pending":"Not Pending","title":"Longest Palindrome After Substring Concatenation I","memory":"45.3 MB","code":"class Solution {\\n    public int longestPalindrome(String s, String t) {\\n        int maxLen = 0;\\n        \\n        for (int i = 0; i <= s.length(); i++) {\\n            for (int j = i; j <= s.length(); j++) {\\n                String subS = s.substring(i, j);\\n                \\n                for (int k = 0; k <= t.length(); k++) {\\n                    for (int l = k; l <= t.length(); l++) {\\n                        String subT = t.substring(k, l);\\n                        String combined = subS + subT;\\n                        \\n                        if (isPalindrome(combined)) {\\n                            maxLen = Math.max(maxLen, combined.length());\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n\\n    private boolean isPalindrome(String str) {\\n        int left = 0, right = str.length() - 1;\\n        while (left < right) {\\n            if (str.charAt(left) != str.charAt(right)) {\\n                return false;\\n            }\\n            left++;\\n            right--;\\n        }\\n        return true;\\n    }\\n}\\n","compare_resulttitle_slug":"longest-palindrome-after-substring-concatenation-i","has_notes":false,"flag_type":1,"frontend_id":366},{"id":1590608119,"question_id":3832,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743302058,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1590608119/","is_pending":"Not Pending","title":"Minimum Cost to Reach Every Position","memory":"45.1 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public int[] minCosts(int[] cost) {\\n        int n = cost.length;\\n        int[] arr = new int[n];\\n        Arrays.fill(arr, Integer.MAX_VALUE);\\n        int minCost = cost[0];\\n        arr[0] = minCost;\\n        for (int i = 1; i < n; i++) {\\n            minCost = Math.min(minCost, cost[i]);\\n            arr[i] = minCost;\\n        } \\n        return arr;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-cost-to-reach-every-position","has_notes":false,"flag_type":1,"frontend_id":365},{"id":1590606414,"question_id":3832,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743301995,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1590606414/","is_pending":"Not Pending","title":"Minimum Cost to Reach Every Position","memory":"45.1 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public int[] minCosts(int[] cost) {\\n        int n = cost.length;\\n        int[] answer = new int[n];\\n        Arrays.fill(answer, Integer.MAX_VALUE);\\n        \\n        // Initialize the minimum cost as the first cost\\n        int minCost = cost[0];\\n        answer[0] = minCost;\\n        \\n        // Iterate through the cost array and determine the minimum cost to reach each position\\n        for (int i = 1; i < n; i++) {\\n            minCost = Math.min(minCost, cost[i]);\\n            answer[i] = minCost;\\n        }\\n        \\n        return answer;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-reach-every-position","has_notes":false,"flag_type":1,"frontend_id":364},{"id":1590604009,"question_id":768,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743301823,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1590604009/","is_pending":"Not Pending","title":"Partition Labels","memory":"42.9 MB","code":"class Solution {\\n    public List<Integer> partitionLabels(String s) {\\n        Map<Character, Integer> lastOccurrence = new HashMap<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            lastOccurrence.put(s.charAt(i), i);\\n        }\\n\\n        List<Integer> r = new ArrayList<>();\\n        int start = 0, end = 0;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            end = Math.max(end, lastOccurrence.get(s.charAt(i)));\\n            if (i == end) {\\n                r.add(end - start + 1);\\n                start = i + 1;\\n            }\\n        }\\n\\n        return r;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-labels","has_notes":false,"flag_type":1,"frontend_id":363},{"id":1590298380,"question_id":223,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743269225,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1590298380/","is_pending":"Not Pending","title":"Rectangle Area","memory":"42.4 MB","code":"class Solution {\\n\\n    public int computeArea(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {\\n        \\n    int x5=Math.max(x1,x3);\\n    int y5=Math.max(y1,y3);\\n \\n    int x6=Math.min(x2, x4);\\n    int y6=Math.min(y2, y4);\\n    boolean flag=true;\\n    if (x5 > x6 || y5 > y6) \\n        flag=false;\\n\\n    int area1=(x2-x1)*(y2-y1);\\n    int area2=(x4-x3)*(y4-y3);\\n\\n    int ans=area1+area2;\\n    if(flag)\\n    ans-=(x6-x5)*(y6-y5);\\n\\n    return ans;\\n    }\\n}","compare_resulttitle_slug":"rectangle-area","has_notes":false,"flag_type":1,"frontend_id":362},{"id":1590297329,"question_id":62,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743269156,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1590297329/","is_pending":"Not Pending","title":"Unique Paths","memory":"40.5 MB","code":"class Solution {\\n    public int uniquePaths(int m, int n) {\\n        int[] aboveRow = new int[n];\\n        Arrays.fill(aboveRow, 1);\\n\\n        for (int row = 1; row < m; row++) {\\n            int[] currentRow = new int[n];\\n            Arrays.fill(currentRow, 1);\\n            for (int col = 1; col < n; col++) {\\n                currentRow[col] = currentRow[col - 1] + aboveRow[col];\\n            }\\n            aboveRow = currentRow;\\n        }\\n\\n        return aboveRow[n - 1];        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths","has_notes":false,"flag_type":1,"frontend_id":361},{"id":1590296519,"question_id":500,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743269100,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1590296519/","is_pending":"Not Pending","title":"Keyboard Row","memory":"41.7 MB","code":"class Solution {\\n    public String[] findWords(String[] words) {\\n        List<String> list = new ArrayList<>();\\n        for(String word:words){\\n            String temp=word.toLowerCase();\\n            char chars[]=temp.toCharArray();\\n            int a=0,b=0,c=0;\\n            for(char ch:chars){\\n                if (ch == \'q\' || ch == \'w\' || ch == \'e\' || ch == \'r\' || ch == \'t\' || ch == \'y\' || ch == \'u\' || ch == \'i\' || ch == \'o\' || ch == \'p\'){\\n                    a++;\\n                }\\n                else if (ch == \'a\' || ch == \'s\' || ch == \'d\' || ch == \'f\' || ch == \'g\' || ch == \'h\' || ch == \'j\' || ch == \'k\' || ch == \'l\'){\\n                    b++;\\n                }\\n                else if (ch == \'z\' || ch == \'x\' || ch == \'c\' || ch == \'v\' || ch == \'b\' || ch == \'n\' || ch == \'m\'){\\n                    c++;\\n                }\\n            }\\n            int n=word.length();\\n            if(a==n || b==n || c==n){\\n                list.add(word);\\n            }\\n        }\\n        String r[]=new String[list.size()];\\n        for(int i=0;i<list.size();i++){\\n            r[i]=list.get(i);\\n        }\\n        return r;\\n    }\\n}","compare_result":"1111111111111111111111111","title_slug":"keyboard-row","has_notes":false,"flag_type":1,"frontend_id":360},{"id":1590291002,"question_id":139,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743268736,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1590291002/","is_pending":"Not Pending","title":"Word Break","memory":"41.8 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public boolean wordBreak(String s, List<String> wd) {\\n        return recWay1(s, wd);\\n    }\\n\\n    boolean recWay2(String s, List<String> wd) {\\n        Boolean[] m = new Boolean[s.length() + 1];\\n        return wordBreak2(s, new HashSet<>(wd), 0, m);\\n    }\\n\\n    boolean wordBreak2(String s, Set<String> wd, int k, Boolean[] m) {\\n        int n = s.length();\\n        if (k == n) return true;\\n\\n        if (m[k] != null) return m[k];\\n\\n        for (int i = k + 1; i <= n; i++) {\\n            String word = s.substring(k, i);\\n            if (wd.contains(word) && wordBreak2(s, wd, i, m)) {\\n                return m[k] = true;\\n            }\\n        }\\n\\n        return m[k] = false;\\n    }\\n\\n    boolean recWay1(String s, List<String> wd) {\\n        Boolean[] m = new Boolean[s.length() + 1];\\n        return wordBreak(s, wd, 0, m);\\n    }\\n    \\n    boolean wordBreak(String s, List<String> wd, int k, Boolean[] m) {\\n        if (k == s.length()) {\\n            return true;\\n        }\\n        \\n        if (m[k] != null) {\\n            return m[k];\\n        }\\n        \\n        for (int i = 0; i < wd.size(); i++) {\\n            String word = wd.get(i);\\n            if (s.startsWith(word, k)) {\\n                if (wordBreak(s, wd, k + word.length(), m)) return m[k] = true;\\n            }\\n        }\\n                   \\n        return m[k] = false;\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"word-break","has_notes":false,"flag_type":1,"frontend_id":359},{"id":1590285838,"question_id":8,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743268409,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1590285838/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"42.5 MB","code":"class Solution {\\n    public int myAtoi(String s) {\\n        int sign = 1, i = 0, ans = 0;\\n        int max = 2147483647, min = -2147483648;\\n        StringBuilder sb = new StringBuilder();\\n        while(i < s.length() && s.charAt(i) == \' \') i++;\\n        if(i < s.length() && s.charAt(i) == \'-\') { sign = -1; i++; }\\n        if(i < s.length() && s.charAt(i) == \'+\') {\\n            if(i < s.length() && i != 0 && s.charAt(i - 1) == \'-\') return 0;\\n            sign = 1;\\n            i++;\\n        }\\n        \\n        while(i < s.length() && Character.isDigit(s.charAt(i))) {\\n            if(ans > ((max - (s.charAt(i) - \'0\')) / 10)) {\\n                if(sign == 1) return max;\\n                else return min;\\n            }\\n            ans = ans * 10 + s.charAt(i) - \'0\';\\n            i++;\\n        }\\n        \\n\\n        return sign * ans;\\n    }\\n}","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":358},{"id":1590283536,"question_id":48,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743268255,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1590283536/","is_pending":"Not Pending","title":"Rotate Image","memory":"42.4 MB","code":"class Solution {\\n    public void rotate(int[][] matrix) {\\n        int n = matrix.length;\\n        for (int i = 0; i < n; i++) {\\n            for (int j = i + 1; j < n; j++) {\\n                int temp = matrix[i][j];\\n                matrix[i][j] = matrix[j][i];\\n                matrix[j][i] = temp;\\n            }\\n        }\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < n / 2; j++) {\\n                int temp = matrix[i][j];\\n                matrix[i][j] = matrix[i][n - 1 - j];\\n                matrix[i][n - 1 - j] = temp;\\n            }\\n        }\\n    }\\n}","compare_result":"111111111111111111111","title_slug":"rotate-image","has_notes":false,"flag_type":1,"frontend_id":357},{"id":1590276809,"question_id":38,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743267817,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1590276809/","is_pending":"Not Pending","title":"Count and Say","memory":"41.6 MB","code":"class Solution {\\n    public String countAndSay(int n) {\\n     if(n==1)return \\"1\\";\\n     String p=countAndSay(n-1);\\n     int q=p.length();\\n     StringBuilder sb=new StringBuilder();\\n     int c=1;\\n     for(int i=1;i<q;i++){\\n        if(p.charAt(i) == p.charAt(i-1)){\\n            c++;\\n        }\\n        else{\\n            sb.append(c).append(p.charAt(i-1));\\n            c=1;\\n        }\\n     }   \\n     sb.append(c).append(p.charAt(q-1));\\n     return sb.toString();\\n    }\\n}","compare_result":"111111111111111111111111111111","title_slug":"count-and-say","has_notes":false,"flag_type":1,"frontend_id":356},{"id":1590276596,"question_id":38,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743267803,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1590276596/","is_pending":"Not Pending","title":"Count and Say","memory":"N/A","code":"class Solution {\\n    public String countAndSay(int n) {\\n     if(n==1)return \\"1\\";\\n     String p=countAndSay(n-1);\\n     int q=p.length();\\n     StringBuilder sb=new StringBuilder();\\n     int c=1;\\n     for(int i=1;i<q;i++){\\n        if(p.charAt(i) == p.charAt(i-1)){\\n            c++;\\n        }\\n        else{\\n            sb.append(count).append(p.charAt(i-1));\\n            c=1;\\n        }\\n     }   \\n     sb.append(c).append(p.charAt(q-1));\\n     return sb.toString();\\n    }\\n}","compare_result":null,"title_slug":"count-and-say","has_notes":false,"flag_type":1,"frontend_id":355},{"id":1590163413,"question_id":3001,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743261221,"status":10,"status_display":"Accepted","runtime":"390 ms","url":"/submissions/detail/1590163413/","is_pending":"Not Pending","title":"Apply Operations to Maximize Score","memory":"61.8 MB","code":"class Solution {\\n    private final int mod = (int) 1e9 + 7;\\n\\n    public int maximumScore(List<Integer> nums, int k) {\\n        int n = nums.size();\\n        int[][] arr = new int[n][0];\\n        for (int i = 0; i < n; ++i) {\\n            arr[i] = new int[] {i, primeFactors(nums.get(i)), nums.get(i)};\\n        }\\n        int[] left = new int[n];\\n        int[] right = new int[n];\\n        Arrays.fill(left, -1);\\n        Arrays.fill(right, n);\\n        Deque<Integer> stk = new ArrayDeque<>();\\n        for (int[] e : arr) {\\n            int i = e[0], f = e[1];\\n            while (!stk.isEmpty() && arr[stk.peek()][1] < f) {\\n                stk.pop();\\n            }\\n            if (!stk.isEmpty()) {\\n                left[i] = stk.peek();\\n            }\\n            stk.push(i);\\n        }\\n        stk.clear();\\n        for (int i = n - 1; i >= 0; --i) {\\n            int f = arr[i][1];\\n            while (!stk.isEmpty() && arr[stk.peek()][1] <= f) {\\n                stk.pop();\\n            }\\n            if (!stk.isEmpty()) {\\n                right[i] = stk.peek();\\n            }\\n            stk.push(i);\\n        }\\n        Arrays.sort(arr, (a, b) -> b[2] - a[2]);\\n        long ans = 1;\\n        for (int[] e : arr) {\\n            int i = e[0], x = e[2];\\n            int l = left[i], r = right[i];\\n            long cnt = (long) (i - l) * (r - i);\\n            if (cnt <= k) {\\n                ans = ans * qpow(x, cnt) % mod;\\n                k -= cnt;\\n            } else {\\n                ans = ans * qpow(x, k) % mod;\\n                break;\\n            }\\n        }\\n        return (int) ans;\\n    }\\n\\n    private int primeFactors(int n) {\\n        int i = 2;\\n        Set<Integer> ans = new HashSet<>();\\n        while (i <= n / i) {\\n            while (n % i == 0) {\\n                ans.add(i);\\n                n /= i;\\n            }\\n            ++i;\\n        }\\n        if (n > 1) {\\n            ans.add(n);\\n        }\\n        return ans.size();\\n    }\\n\\n    private int qpow(long a, long n) {\\n        long ans = 1;\\n        for (; n > 0; n >>= 1) {\\n            if ((n & 1) == 1) {\\n                ans = ans * a % mod;\\n            }\\n            a = a * a % mod;\\n        }\\n        return (int) ans;\\n    }\\n}","compare_resulttitle_slug":"apply-operations-to-maximize-score","has_notes":false,"flag_type":1,"frontend_id":354},{"id":1590099410,"question_id":3811,"lang":"java","lang_name":"Java","time":"4\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1743258814,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1590099410/","is_pending":"Not Pending","title":"Reverse Degree of a String","memory":"43.1 MB","code":"class Solution {\\n    public int reverseDegree(String s) {\\n        int sm = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            int reversedValue = 26 - (s.charAt(i) - \'a\');\\n            sm += reversedValue * (i + 1);\\n        }\\n        return sm;\\n    }\\n}\\n","compare_resulttitle_slug":"reverse-degree-of-a-string","has_notes":false,"flag_type":1,"frontend_id":353},{"id":1588751811,"question_id":2588,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743129822,"status":10,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/1588751811/","is_pending":"Not Pending","title":"Maximum Number of Points From Grid Queries","memory":"55.5 MB","code":"class Solution {\\n    public int[] maxPoints(int[][] grid, int[] queries) {\\n        int rows = grid.length, cols = grid[0].length;\\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\\n\\n        int n = queries.length;\\n        int[] r = new int[n];\\n        int[][] visited = new int[rows][cols];\\n\\n        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\\n        List<int[]> sortedQueries = new ArrayList<>();\\n\\n        for (int i = 0; i < n; i++) {\\n            sortedQueries.add(new int[]{queries[i], i});\\n        }\\n        sortedQueries.sort(Comparator.comparingInt(a -> a[0]));\\n\\n        minHeap.offer(new int[]{grid[0][0], 0, 0});\\n        visited[0][0] = 1;\\n        int points = 0;\\n\\n        for (int[] q : sortedQueries) {\\n            int queryVal = q[0], queryIdx = q[1];\\n\\n            while (!minHeap.isEmpty() && minHeap.peek()[0] < queryVal) {\\n                int[] top = minHeap.poll();\\n                int row = top[1], col = top[2];\\n                points++;\\n\\n                for (int[] dir : directions) {\\n                    int nr = row + dir[0], nc = col + dir[1];\\n                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && visited[nr][nc] == 0) {\\n                        minHeap.offer(new int[]{grid[nr][nc], nr, nc});\\n                        visited[nr][nc] = 1;\\n                    }\\n                }\\n            }\\n            r[queryIdx] = points;\\n        }\\n        return r;\\n    }\\n}","compare_result":"111111111111111111111","title_slug":"maximum-number-of-points-from-grid-queries","has_notes":false,"flag_type":1,"frontend_id":352},{"id":1587949863,"question_id":143,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743068808,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1587949863/","is_pending":"Not Pending","title":"Reorder List","memory":"48.1 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode findMid(ListNode head){\\n        ListNode s = head;\\n        ListNode fast = head;\\n\\n        while(fast != null && fast.next != null){\\n            s = s.next;\\n            fast = fast.next.next; \\n        }\\n        return s;\\n    }\\n\\n    public void reorderList(ListNode head) {\\n        if (head == null || head.next == null) return;\\n        ListNode mid = findMid(head);\\n        ListNode prev = null;\\n        ListNode curr = mid;\\n        ListNode next;\\n\\n        while (curr != null) {\\n            next = curr.next;\\n            curr.next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        ListNode left = head;\\n        ListNode right = prev;\\n        while (right != null && right.next != null) {\\n            ListNode temp1 = left.next;\\n            ListNode temp2 = right.next;\\n\\n            left.next = right;\\n            right.next = temp1;\\n\\n            left = temp1;\\n            right = temp2;\\n        }\\n    }\\n}","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1,"frontend_id":351}],"has_next":true,"last_key":""}'
2025-08-25 23:30:44,322 [INFO] __main__.py:188 - Skipping longest-palindrome-after-substring-concatenation-ii 2025-03-30 08.14.53 because its status is 'Time Limit Exceeded'
2025-08-25 23:30:44,322 [INFO] __main__.py:188 - Skipping longest-palindrome-after-substring-concatenation-ii 2025-03-30 08.11.02 because its status is 'Time Limit Exceeded'
2025-08-25 23:30:44,671 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:44,673 [INFO] __main__.py:245 - Writing longest-palindrome-after-substring-concatenation-i/2025-03-30 08.07.45 - Accepted - runtime 400ms - memory 45.5MB.java
2025-08-25 23:30:44,675 [INFO] __main__.py:188 - Skipping longest-palindrome-after-substring-concatenation-i 2025-03-30 08.07.35 because its status is 'Compile Error'
2025-08-25 23:30:44,675 [INFO] __main__.py:208 - Skipping longest-palindrome-after-substring-concatenation-i 2025-03-30 08.05.54 in java because a more recent submission has already been exported
2025-08-25 23:30:45,054 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:45,056 [INFO] __main__.py:245 - Writing minimum-cost-to-reach-every-position/2025-03-30 08.04.18 - Accepted - runtime 1ms - memory 45.1MB.java
2025-08-25 23:30:45,058 [INFO] __main__.py:208 - Skipping minimum-cost-to-reach-every-position 2025-03-30 08.03.15 in java because a more recent submission has already been exported
2025-08-25 23:30:45,386 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:45,386 [INFO] __main__.py:245 - Writing partition-labels/2025-03-30 08.00.23 - Accepted - runtime 9ms - memory 42.9MB.java
2025-08-25 23:30:45,719 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:45,719 [INFO] __main__.py:245 - Writing rectangle-area/2025-03-29 22.57.05 - Accepted - runtime 1ms - memory 42.4MB.java
2025-08-25 23:30:45,725 [INFO] __main__.py:208 - Skipping unique-paths 2025-03-29 22.55.56 in java because a more recent submission has already been exported
2025-08-25 23:30:46,059 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:46,061 [INFO] __main__.py:245 - Writing keyboard-row/2025-03-29 22.55.00 - Accepted - runtime 0ms - memory 41.7MB.java
2025-08-25 23:30:46,392 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:46,395 [INFO] __main__.py:245 - Writing word-break/2025-03-29 22.48.56 - Accepted - runtime 1ms - memory 41.8MB.java
2025-08-25 23:30:46,713 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:46,719 [INFO] __main__.py:245 - Writing string-to-integer-atoi/2025-03-29 22.43.29 - Accepted - runtime 1ms - memory 42.5MB.java
2025-08-25 23:30:47,420 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:47,432 [INFO] __main__.py:245 - Writing rotate-image/2025-03-29 22.40.55 - Accepted - runtime 0ms - memory 42.4MB.java
2025-08-25 23:30:47,434 [INFO] __main__.py:208 - Skipping count-and-say 2025-03-29 22.33.37 in java because a more recent submission has already been exported
2025-08-25 23:30:47,434 [INFO] __main__.py:188 - Skipping count-and-say 2025-03-29 22.33.23 because its status is 'Compile Error'
2025-08-25 23:30:47,801 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:47,809 [INFO] __main__.py:245 - Writing apply-operations-to-maximize-score/2025-03-29 20.43.41 - Accepted - runtime 390ms - memory 61.8MB.java
2025-08-25 23:30:48,226 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:48,231 [INFO] __main__.py:245 - Writing reverse-degree-of-a-string/2025-03-29 20.03.34 - Accepted - runtime 1ms - memory 43.1MB.java
2025-08-25 23:30:48,763 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:48,768 [INFO] __main__.py:245 - Writing maximum-number-of-points-from-grid-queries/2025-03-28 08.13.42 - Accepted - runtime 164ms - memory 55.5MB.java
2025-08-25 23:30:49,104 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:49,111 [INFO] __main__.py:245 - Writing reorder-list/2025-03-27 15.16.48 - Accepted - runtime 2ms - memory 48.1MB.java
2025-08-25 23:30:54,115 [DEBUG] leetcode.py:150 - Exporting submissions from 300 to 320
2025-08-25 23:30:54,560 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=300&limit=20 HTTP/11" 200 None
2025-08-25 23:30:54,562 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1587949684,"question_id":143,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743068795,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1587949684/","is_pending":"Not Pending","title":"Reorder List","memory":"N/A","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode findMid(ListNode head){\\n        ListNode s = head;\\n        ListNode fast = head;\\n\\n        while(fast != null && fast.next != null){\\n            s = slow.next;\\n            fast = fast.next.next; \\n        }\\n        return s;\\n    }\\n\\n    public void reorderList(ListNode head) {\\n        if (head == null || head.next == null) return;\\n        ListNode mid = findMid(head);\\n        ListNode prev = null;\\n        ListNode curr = mid;\\n        ListNode next;\\n\\n        while (curr != null) {\\n            next = curr.next;\\n            curr.next = prev;\\n            prev = curr;\\n            curr = next;\\n        }\\n        ListNode left = head;\\n        ListNode right = prev;\\n        while (right != null && right.next != null) {\\n            ListNode temp1 = left.next;\\n            ListNode temp2 = right.next;\\n\\n            left.next = right;\\n            right.next = temp1;\\n\\n            left = temp1;\\n            right = temp2;\\n        }\\n    }\\n}","compare_result":null,"title_slug":"reorder-list","has_notes":false,"flag_type":1,"frontend_id":350},{"id":1587937706,"question_id":328,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743067940,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1587937706/","is_pending":"Not Pending","title":"Odd Even Linked List","memory":"44.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode oddEvenList(ListNode head) {\\n        if(head == null || head.next == null) return head;\\n        ListNode o = head, even = head.next, evenHead = even;\\n        while(even!=null && even.next != null){\\n            o.next = even.next;\\n            o = o.next;\\n            even.next = even.next.next;\\n            even = even.next;\\n        }\\n        o.next = evenHead;\\n        return head;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"odd-even-linked-list","has_notes":false,"flag_type":1,"frontend_id":349},{"id":1587931047,"question_id":148,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743067470,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1587931047/","is_pending":"Not Pending","title":"Sort List","memory":"57.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\npublic class Solution {\\n  \\n  public ListNode sortList(ListNode head) {\\n    if (head == null || head.next == null)\\n      return head;\\n    ListNode prev = null, slow = head, fast = head;\\n    \\n    while (fast != null && fast.next != null) {\\n      prev = slow;\\n      slow = slow.next;\\n      fast = fast.next.next;\\n    }\\n    prev.next = null;\\n    ListNode l1 = sortList(head);\\n    ListNode l2 = sortList(slow);\\n    return merge(l1, l2);\\n  }\\n  \\n  ListNode merge(ListNode l1, ListNode l2) {\\n    ListNode l = new ListNode(0), pp = l;\\n    \\n    while (l1 != null && l2 != null) {\\n      if (l1.val < l2.val) {\\n        pp.next = l1;\\n        l1 = l1.next;\\n      } else {\\n        pp.next = l2;\\n        l2 = l2.next;\\n      }\\n      pp = pp.next;\\n    }\\n    \\n    if (l1 != null)\\n      pp.next = l1;\\n    \\n    if (l2 != null)\\n      pp.next = l2;\\n    \\n    return l.next;\\n  }\\n\\n}","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1,"frontend_id":348},{"id":1587886987,"question_id":147,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743064271,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1587886987/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"44.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n   public ListNode insertionSortList(ListNode head) {\\n\\t\\tif( head == null ){\\n\\t\\t\\treturn head;\\n\\t\\t}\\n\\t\\t\\n\\t\\tListNode h = new ListNode(0); \\n\\t\\tListNode cur = head;\\n\\t\\tListNode pre = h; \\n\\t\\tListNode next = null;\\n\\t\\twhile( cur != null ){\\n\\t\\t\\tnext = cur.next;\\n\\t\\t\\twhile( pre.next != null && pre.next.val < cur.val ){\\n\\t\\t\\t\\tpre = pre.next;\\n\\t\\t\\t}\\n\\t\\t\\tcur.next = pre.next;\\n\\t\\t\\tpre.next = cur;\\n\\t\\t\\tpre = h;\\n\\t\\t\\tcur = next;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn h.next;\\n\\t}\\n}","compare_result":"1111111111111111111","title_slug":"insertion-sort-list","has_notes":false,"flag_type":1,"frontend_id":347},{"id":1587873188,"question_id":206,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743063169,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1587873188/","is_pending":"Not Pending","title":"Reverse Linked List","memory":"42.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode reverseList(ListNode head) {\\n        ListNode p=null;\\n        while(head!=null)\\n        {\\n        ListNode n=head.next;\\n        head.next=p;\\n        p=head;\\n        head=n;\\n        }\\n        return p;\\n\\n    }\\n}","compare_result":"1111111111111111111111111111","title_slug":"reverse-linked-list","has_notes":false,"flag_type":1,"frontend_id":346},{"id":1587557137,"question_id":2888,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743039203,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1587557137/","is_pending":"Not Pending","title":"Minimum Index of a Valid Split","memory":"62 MB","code":"class Solution {\\n    public int minimumIndex(List<Integer> nums) {\\n        int n = nums.size(), count = 0, res = 0, target = 0;\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n\\n        for(int num : nums) {\\n            int cur = map.getOrDefault(num, 0) + 1;\\n            map.put(num, cur);\\n            if(cur > count) {\\n                target = num;\\n                count = cur;\\n            }\\n        }\\n\\n        int left = 0;\\n        for(int i = 0; i < n; i++) {\\n            if(nums.get(i) == target) {\\n                left++;\\n            }\\n            \\n            if(left * 2 > (i + 1) && (count - left) * 2 > (n - i - 1)) {\\n                return i;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n}","compare_resulttitle_slug":"minimum-index-of-a-valid-split","has_notes":false,"flag_type":1,"frontend_id":345},{"id":1587104491,"question_id":2160,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1743005561,"status":10,"status_display":"Accepted","runtime":"133 ms","url":"/submissions/detail/1587104491/","is_pending":"Not Pending","title":"Minimum Operations to Make a Uni-Value Grid","memory":"72.6 MB","code":"class Solution {\\n    public int minOperations(int[][] grid, int x) {\\n        List<Integer> values = new ArrayList<>();\\n        \\n        for (int[] row : grid) {\\n            for (int val : row) {\\n                values.add(val);\\n            }\\n        }\\n\\n        Collections.sort(values);\\n\\n        for (int val : values) {\\n            if (Math.abs(val - values.get(0)) % x != 0) {\\n                return -1;\\n            }\\n        }\\n\\n        int median = values.get(values.size() / 2);\\n        int operations = 0;\\n\\n        for (int val : values) {\\n            operations += Math.abs(val - median) / x;\\n        }\\n\\n        return operations;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-make-a-uni-value-grid","has_notes":false,"flag_type":1,"frontend_id":344},{"id":1585097426,"question_id":3657,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1742872936,"status":10,"status_display":"Accepted","runtime":"101 ms","url":"/submissions/detail/1585097426/","is_pending":"Not Pending","title":"Check if Grid can be Cut into Sections","memory":"122.3 MB","code":"class Solution {\\n    public boolean checkValidCuts(int n, int[][] rectangles) {\\n        int[][] xIntervals = new int[rectangles.length][2];\\n        int[][] yIntervals = new int[rectangles.length][2];\\n\\n        for (int i = 0; i < rectangles.length; i++) {\\n            xIntervals[i][0] = rectangles[i][0];\\n            xIntervals[i][1] = rectangles[i][2];\\n            yIntervals[i][0] = rectangles[i][1];\\n            yIntervals[i][1] = rectangles[i][3];\\n        }\\n\\n        return check(xIntervals) || check(yIntervals);\\n    }\\n\\n    private boolean check(int[][] intervals) {\\n        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\\n        \\n        int s = 0;\\n        int maxEnd = intervals[0][1];\\n\\n        for (int[] interval : intervals) {\\n            if (maxEnd <= interval[0]) {\\n                s++;\\n            }\\n            maxEnd = Math.max(maxEnd, interval[1]);\\n        }\\n\\n        return s>= 2;\\n    }\\n}","compare_resulttitle_slug":"check-if-grid-can-be-cut-into-sections","has_notes":false,"flag_type":1,"frontend_id":343},{"id":1583831394,"question_id":3430,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1742778943,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1583831394/","is_pending":"Not Pending","title":"Count Days Without Meetings","memory":"100.3 MB","code":"class Solution {\\n    public int countDays(int days, int[][] meetings) {\\n        Arrays.sort(meetings, (a, b) -> Integer.compare(a[0], b[0]));\\n\\n        int r = 0;\\n        int lastmeet = 0;\\n        for(int[] i : meetings){\\n            if(lastmeet < i[0])\\n                r+= i[0] - lastmeet - 1;\\n            lastmeet = lastmeet > i[1] ? lastmeet : i[1];\\n        }\\n        if(lastmeet <= days)\\n            r += days - lastmeet;\\n        \\n        return r;\\n    }\\n}","compare_resulttitle_slug":"count-days-without-meetings","has_notes":false,"flag_type":1,"frontend_id":342},{"id":1583168044,"question_id":2090,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1742722490,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1583168044/","is_pending":"Not Pending","title":"Number of Ways to Arrive at Destination","memory":"49.1 MB","code":"class Solution {\\n    public int countPaths(int n, int[][] roads) {\\n        List<List<int[]>> graph = new ArrayList<>();\\n        for (int i = 0; i < n; i++) {\\n            graph.add(new ArrayList<>());\\n        }\\n        \\n        for (int[] road : roads) {\\n            int u = road[0], v = road[1], time = road[2];\\n            graph.get(u).add(new int[]{v, time});\\n            graph.get(v).add(new int[]{u, time});\\n        }\\n\\n        long[] dist = new long[n];\\n        int[] ways = new int[n];\\n        Arrays.fill(dist, Long.MAX_VALUE);\\n        dist[0] = 0;\\n        ways[0] = 1;\\n\\n        PriorityQueue<long[]> pq = new PriorityQueue<>(Comparator.comparingLong(a -> a[0]));\\n        pq.offer(new long[]{0, 0});\\n\\n        int MOD = 1_000_000_007;\\n\\n        while (!pq.isEmpty()) {\\n            long[] curr = pq.poll();\\n            long d = curr[0];\\n            int node = (int) curr[1];\\n\\n            if (d > dist[node]) continue;\\n\\n            for (int[] neighbor : graph.get(node)) {\\n                int nextNode = neighbor[0];\\n                int time = neighbor[1];\\n\\n                if (dist[node] + time < dist[nextNode]) {\\n                    dist[nextNode] = dist[node] + time;\\n                    ways[nextNode] = ways[node];\\n                    pq.offer(new long[]{dist[nextNode], nextNode});\\n                } else if (dist[node] + time == dist[nextNode]) {\\n                    ways[nextNode] = (ways[nextNode] + ways[node]) % MOD;\\n                }\\n            }\\n        }\\n\\n        return ways[n - 1];\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-arrive-at-destination","has_notes":false,"flag_type":1,"frontend_id":341},{"id":1582119949,"question_id":2793,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months","timestamp":1742634461,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1582119949/","is_pending":"Not Pending","title":"Count the Number of Complete Components","memory":"45.6 MB","code":"class Solution {\\n    int[] parent;\\n    int[] rank;\\n\\n    public int countCompleteComponents(int n, int[][] edges) {\\n        parent = new int[n];\\n        rank = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            parent[i] = i;\\n        }\\n\\n        for (int[] edge : edges) {\\n            union(edge[0], edge[1]);\\n        }\\n\\n        Map<Integer, Set<Integer>> componentVertices = new HashMap<>();\\n        Map<Integer, Integer> componentEdges = new HashMap<>();\\n\\n        for (int i = 0; i < n; i++) {\\n            int root = find(i);\\n            componentVertices.computeIfAbsent(root, k -> new HashSet<>()).add(i);\\n        }\\n\\n        for (int[] edge : edges) {\\n            int root = find(edge[0]);\\n            componentEdges.put(root, componentEdges.getOrDefault(root, 0) + 1);\\n        }\\n\\n        int completeCount = 0;\\n        for (int root : componentVertices.keySet()) {\\n            int numVertices = componentVertices.get(root).size();\\n            int expectedEdges = numVertices * (numVertices - 1) / 2;\\n\\n            if (componentEdges.getOrDefault(root, 0) == expectedEdges) {\\n                completeCount++;\\n            }\\n        }\\n\\n        return completeCount;\\n    }\\n\\n    int find(int x) {\\n        if (parent[x] != x) {\\n            parent[x] = find(parent[x]);\\n        }\\n        return parent[x];\\n    }\\n\\n    void union(int x, int y) {\\n        int rootX = find(x);\\n        int rootY = find(y);\\n        if (rootX == rootY) return;\\n\\n        if (rank[rootX] < rank[rootY]) {\\n            parent[rootX] = rootY;\\n        } else if (rank[rootX] > rank[rootY]) {\\n            parent[rootY] = rootX;\\n        } else {\\n            parent[rootY] = rootX;\\n            rank[rootX]++;\\n        }\\n    }\\n}","compare_resulttitle_slug":"count-the-number-of-complete-components","has_notes":false,"flag_type":1,"frontend_id":340},{"id":1581589073,"question_id":2220,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742579688,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1581589073/","is_pending":"Not Pending","title":"Find All Possible Recipes from Given Supplies","memory":"47.1 MB","code":"class Solution {\\n    private Set<String> availableSupplies;\\n    private Map<String, List<String>> recipeToIngredients;\\n    private Map<String, Integer> visited;\\n    private List<String> result;\\n\\n    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {\\n        availableSupplies = new HashSet<>(Arrays.asList(supplies));\\n        recipeToIngredients = new HashMap<>();\\n        visited = new HashMap<>();\\n        result = new ArrayList<>();\\n\\n        for (int i = 0; i < recipes.length; i++) {\\n            recipeToIngredients.put(recipes[i], ingredients.get(i));\\n        }\\n\\n        for (String recipe : recipes) {\\n            canMake(recipe);\\n        }\\n\\n        return result;\\n    }\\n\\n    private boolean canMake(String recipe) {\\n        if (visited.containsKey(recipe)) {\\n            return visited.get(recipe) == 1;\\n        }\\n\\n        if (availableSupplies.contains(recipe)) {\\n            return true;\\n        }\\n\\n        if (!recipeToIngredients.containsKey(recipe)) {\\n            return false;\\n        }\\n\\n        visited.put(recipe, 0);\\n\\n        for (String ingredient : recipeToIngredients.get(recipe)) {\\n            if (!canMake(ingredient)) {\\n                visited.put(recipe, -1);\\n                return false;\\n            }\\n        }\\n\\n        visited.put(recipe, 1);\\n        result.add(recipe);\\n        return true;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-possible-recipes-from-given-supplies","has_notes":false,"flag_type":1,"frontend_id":339},{"id":1580221103,"question_id":3348,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742473845,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1580221103/","is_pending":"Not Pending","title":"Minimum Cost Walk in Weighted Graph","memory":"125.7 MB","code":"class Solution {\\n    private int findRoot(int[] parent, int node) {\\n        if (parent[node] != node) {\\n            parent[node] = findRoot(parent, parent[node]);\\n        }\\n        return parent[node];\\n    }\\n\\n    public int[] minimumCost(int n, int[][] edges, int[][] query) {\\n        int[] parent = new int[n];\\n        int[] minPathCost = new int[n];\\n        Arrays.fill(minPathCost, -1);\\n\\n        for (int i = 0; i < n; i++) {\\n            parent[i] = i;\\n        }\\n\\n        for (int[] edge : edges) {\\n            int source = edge[0], target = edge[1], weight = edge[2];\\n            int sourceRoot = findRoot(parent, source);\\n            int targetRoot = findRoot(parent, target);\\n\\n            minPathCost[targetRoot] &= weight;\\n\\n            if (sourceRoot != targetRoot) {\\n                minPathCost[targetRoot] &= minPathCost[sourceRoot];\\n                parent[sourceRoot] = targetRoot;\\n            }\\n        }\\n\\n        int[] r = new int[query.length];\\n        for (int i = 0; i < query.length; i++) {\\n            int start = query[i][0], end = query[i][1];\\n            if (start == end) {\\n                r[i] = 0;\\n            } else if (findRoot(parent, start) != findRoot(parent, end)) {\\n                r[i] = -1;\\n            } else {\\n                r[i] = minPathCost[findRoot(parent, start)];\\n            }\\n        }\\n        return r;\\n    }\\n}","compare_resulttitle_slug":"minimum-cost-walk-in-weighted-graph","has_notes":false,"flag_type":1,"frontend_id":338},{"id":1579017849,"question_id":3475,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742385992,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1579017849/","is_pending":"Not Pending","title":"Minimum Operations to Make Binary Array Elements Equal to One I","memory":"57.2 MB","code":"class Solution {\\n    public int minOperations(int[] nums) {\\n        int c = 0;\\n        int n = nums.length;\\n\\n        for (int i = 0; i < n - 2; i++) {\\n            if (nums[i] == 0) {\\n                nums[i] ^= 1;\\n                nums[i + 1] ^= 1;\\n                nums[i + 2] ^= 1;\\n                c++;\\n            }\\n        }\\n\\n        return (nums[n - 2] == 1 && nums[n - 1] == 1) ? c : -1;\\n    }\\n}","compare_resulttitle_slug":"minimum-operations-to-make-binary-array-elements-equal-to-one-i","has_notes":false,"flag_type":1,"frontend_id":337},{"id":1578072593,"question_id":2478,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742312434,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1578072593/","is_pending":"Not Pending","title":"Longest Nice Subarray","memory":"56.1 MB","code":"class Solution {\\n    public int longestNiceSubarray(int[] nums) {\\n        int n = nums.length;\\n        int m = 1;\\n        int left = 0;\\n        int usedBits = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            while ((usedBits & nums[right]) != 0) {\\n                usedBits ^= nums[left];\\n                left++;\\n            }\\n            \\n            usedBits |= nums[right];\\n            m = Math.max(m, right - left + 1);\\n        }\\n        \\n        return m;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-nice-subarray","has_notes":false,"flag_type":1,"frontend_id":336},{"id":1576835096,"question_id":2308,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742220972,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1576835096/","is_pending":"Not Pending","title":"Divide Array Into Equal Pairs","memory":"44.4 MB","code":"class Solution {\\n    public boolean divideArray(int[] nums)\\n     {\\n        HashMap<Integer,Integer> hm=new HashMap<>();\\n        int n=nums.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            hm.put(nums[i],hm.getOrDefault(nums[i],0)+1);\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(hm.get(nums[i])%2!=0)\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"divide-array-into-equal-pairs","has_notes":false,"flag_type":1,"frontend_id":335},{"id":1575673315,"question_id":2665,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742130888,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1575673315/","is_pending":"Not Pending","title":"Minimum Time to Repair Cars","memory":"56.7 MB","code":"class Solution {\\n    public boolean timeIsSuff(int[] ranks, int cars, long minGiven) {\\n        long car = 0;\\n        for (int r : ranks) {\\n            long c2 = minGiven / r;\\n            long c = (long) Math.sqrt(c2);\\n            car += c;\\n        }\\n        return car >= cars;\\n    }\\n\\n    public long repairCars(int[] ranks, int cars) {\\n        long l = 1, r = (long) 1e14;\\n        while (l < r) {\\n            long mid = (l + r) / 2;\\n            if (timeIsSuff(ranks, cars, mid)) {\\n                r = mid;\\n            } else {\\n                l = mid + 1;\\n            }\\n        }\\n        return l;\\n    }\\n}","compare_resulttitle_slug":"minimum-time-to-repair-cars","has_notes":false,"flag_type":1,"frontend_id":334},{"id":1575139234,"question_id":3795,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742094076,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1575139234/","is_pending":"Not Pending","title":"Zero Array Transformation IV","memory":"N/A","code":"class Solution {\\n    public int minZeroArray(int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        \\n        for (int k = 0; k < queries.length; k++) {\\n            int li = queries[k][0], ri = queries[k][1], vali = queries[k][2];\\n            \\n            int[] v = Arrays.copyOf(nums, n);\\n            \\n            for (int i = li; i <= ri; i++) {\\n                nums[i] = Math.max(0, nums[i] - vali);\\n            }\\n            \\n            boolean iz = true;\\n            for (int num : nums) {\\n                if (num != 0) {\\n                    iz = false;\\n                    break;\\n                }\\n            }\\n            \\n            if (iz) return k + 1;\\n        }\\n        \\n        return -1;\\n    }\\n}","compare_resulttitle_slug":"zero-array-transformation-iv","has_notes":false,"flag_type":1,"frontend_id":333},{"id":1575109524,"question_id":3788,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742093144,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1575109524/","is_pending":"Not Pending","title":"Maximum Unique Subarray Sum After Deletion","memory":"N/A","code":"class Solution {\\n    public int maxSum(int[] nums) {\\n        HashSet<Integer> hs = new HashSet<>();\\n        int l = 0, r = 0, s = 0, cs = 0;\\n        \\n        while (r < nums.length) {\\n            while (hs.contains(nums[r])) {\\n                hs.remove(nums[l]);\\n                cs -= nums[l];\\n                l++;\\n            }\\n            \\n            hs.add(nums[r]);\\n            cs += nums[r];\\n            s = Math.max(s, cs);\\n            r++;\\n        }\\n        \\n        return s;\\n    }\\n}","compare_resulttitle_slug":"maximum-unique-subarray-sum-after-deletion","has_notes":false,"flag_type":1,"frontend_id":332},{"id":1575107219,"question_id":3788,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742093072,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1575107219/","is_pending":"Not Pending","title":"Maximum Unique Subarray Sum After Deletion","memory":"N/A","code":"class Solution {\\n    public int maxSum(int[] nums) {\\n        HashSet<Integer> hs = new HashSet<>();\\n        int l = 0, r = 0, s = Integer.MIN_VALUE, cs = 0;\\n        \\n        while (r < nums.length) {\\n            while (hs.contains(nums[r])) {\\n                hs.remove(nums[l]);\\n                cs -= nums[l];\\n                l++;\\n            }\\n            \\n            hs.add(nums[r]);\\n            cs += nums[r];\\n            s = Math.max(s, cs);\\n            r++;\\n        }\\n        \\n        return s;\\n    }\\n}","compare_resulttitle_slug":"maximum-unique-subarray-sum-after-deletion","has_notes":false,"flag_type":1,"frontend_id":331}],"has_next":true,"last_key":""}'
2025-08-25 23:30:54,562 [INFO] __main__.py:188 - Skipping reorder-list 2025-03-27 15.16.35 because its status is 'Compile Error'
2025-08-25 23:30:54,908 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:54,911 [INFO] __main__.py:245 - Writing odd-even-linked-list/2025-03-27 15.02.20 - Accepted - runtime 0ms - memory 44.5MB.java
2025-08-25 23:30:55,250 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:55,252 [INFO] __main__.py:245 - Writing sort-list/2025-03-27 14.54.30 - Accepted - runtime 9ms - memory 57.5MB.java
2025-08-25 23:30:55,684 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:55,684 [INFO] __main__.py:245 - Writing insertion-sort-list/2025-03-27 14.01.11 - Accepted - runtime 18ms - memory 44.5MB.java
2025-08-25 23:30:56,053 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:56,057 [INFO] __main__.py:245 - Writing reverse-linked-list/2025-03-27 13.42.49 - Accepted - runtime 0ms - memory 42.5MB.java
2025-08-25 23:30:56,448 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:56,450 [INFO] __main__.py:245 - Writing minimum-index-of-a-valid-split/2025-03-27 07.03.23 - Accepted - runtime 27ms - memory 62MB.java
2025-08-25 23:30:56,790 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:56,790 [INFO] __main__.py:245 - Writing minimum-operations-to-make-a-uni-value-grid/2025-03-26 21.42.41 - Accepted - runtime 133ms - memory 72.6MB.java
2025-08-25 23:30:57,280 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:57,292 [INFO] __main__.py:245 - Writing check-if-grid-can-be-cut-into-sections/2025-03-25 08.52.16 - Accepted - runtime 101ms - memory 122.3MB.java
2025-08-25 23:30:57,622 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:57,628 [INFO] __main__.py:245 - Writing count-days-without-meetings/2025-03-24 06.45.43 - Accepted - runtime 38ms - memory 100.3MB.java
2025-08-25 23:30:57,962 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:57,972 [INFO] __main__.py:245 - Writing number-of-ways-to-arrive-at-destination/2025-03-23 15.04.50 - Accepted - runtime 15ms - memory 49.1MB.java
2025-08-25 23:30:58,309 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:58,311 [INFO] __main__.py:245 - Writing count-the-number-of-complete-components/2025-03-22 14.37.41 - Accepted - runtime 13ms - memory 45.6MB.java
2025-08-25 23:30:58,662 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:58,666 [INFO] __main__.py:245 - Writing find-all-possible-recipes-from-given-supplies/2025-03-21 23.24.48 - Accepted - runtime 31ms - memory 47.1MB.java
2025-08-25 23:30:59,165 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:59,167 [INFO] __main__.py:245 - Writing minimum-cost-walk-in-weighted-graph/2025-03-20 18.00.45 - Accepted - runtime 8ms - memory 125.7MB.java
2025-08-25 23:30:59,500 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:59,502 [INFO] __main__.py:245 - Writing minimum-operations-to-make-binary-array-elements-equal-to-one-i/2025-03-19 17.36.32 - Accepted - runtime 7ms - memory 57.2MB.java
2025-08-25 23:30:59,826 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:30:59,835 [INFO] __main__.py:245 - Writing longest-nice-subarray/2025-03-18 21.10.34 - Accepted - runtime 3ms - memory 56.1MB.java
2025-08-25 23:31:00,205 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:00,205 [INFO] __main__.py:245 - Writing divide-array-into-equal-pairs/2025-03-17 19.46.12 - Accepted - runtime 9ms - memory 44.4MB.java
2025-08-25 23:31:00,576 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:00,576 [INFO] __main__.py:245 - Writing minimum-time-to-repair-cars/2025-03-16 18.44.48 - Accepted - runtime 40ms - memory 56.7MB.java
2025-08-25 23:31:00,576 [INFO] __main__.py:188 - Skipping zero-array-transformation-iv 2025-03-16 08.31.16 because its status is 'Wrong Answer'
2025-08-25 23:31:00,576 [INFO] __main__.py:188 - Skipping maximum-unique-subarray-sum-after-deletion 2025-03-16 08.15.44 because its status is 'Wrong Answer'
2025-08-25 23:31:00,576 [INFO] __main__.py:188 - Skipping maximum-unique-subarray-sum-after-deletion 2025-03-16 08.14.32 because its status is 'Wrong Answer'
2025-08-25 23:31:05,582 [DEBUG] leetcode.py:150 - Exporting submissions from 320 to 340
2025-08-25 23:31:06,521 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=320&limit=20 HTTP/11" 200 None
2025-08-25 23:31:06,539 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1575104933,"question_id":3788,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742093004,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1575104933/","is_pending":"Not Pending","title":"Maximum Unique Subarray Sum After Deletion","memory":"N/A","code":"class Solution {\\n    public int maxSum(int[] nums) {\\n        HashSet<Integer> hs = new HashSet<>();\\n        int l = 0, r = 0, s = 0, cs = 0; \\n        while (r < nums.length) {\\n            while (hs.contains(nums[r])) {\\n                hs.remove(nums[l]);\\n                cs -= nums[l];\\n                l++;\\n            } \\n            hs.add(nums[r]);\\n            cs += nums[r];\\n            s = Math.max(s, cs);\\n            r++;\\n        }\\n        return s;\\n    }\\n}","compare_resulttitle_slug":"maximum-unique-subarray-sum-after-deletion","has_notes":false,"flag_type":1,"frontend_id":330},{"id":1574580364,"question_id":3799,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742050729,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1574580364/","is_pending":"Not Pending","title":"Unique 3-Digit Even Numbers","memory":"44.8 MB","code":"class Solution {\\n    public int totalNumbers(int[] digits) \\n    {\\n        HashSet<Integer> hs=new HashSet<>();\\n        int n=digits.length;\\n        for(int i=0;i<n;i++)\\n            {\\n                for(int j=0;j<n;j++)\\n                    {\\n                        for(int k=0;k<n;k++)\\n                            {\\n                                if(i!=j&&j!=k&&i!=k)\\n                                {\\n                                    int num=digits[i]*100+digits[j]*10+digits[k];\\n                                    if(digits[i]!=0&&digits[k]%2==0)\\n                                    {\\n                                        hs.add(num);\\n                                    }\\n                                }\\n                            }\\n                    }\\n            }\\n        return hs.size();\\n    }\\n}","compare_resulttitle_slug":"unique-3-digit-even-numbers","has_notes":false,"flag_type":1,"frontend_id":329},{"id":1574143735,"question_id":263,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742016886,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1574143735/","is_pending":"Not Pending","title":"Ugly Number","memory":"40.9 MB","code":"class Solution {\\n    public boolean isUgly(int n) {\\n        if (n <= 0) return false;\\n        int[] factors = {2, 3, 5};\\n        \\n        for (int factor : factors) {\\n            while (n % factor == 0) {\\n                n /= factor;\\n            }\\n        }\\n        \\n        return n == 1;\\n    }\\n}","compare_resulttitle_slug":"ugly-number","has_notes":false,"flag_type":1,"frontend_id":328},{"id":1574130697,"question_id":70,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742015787,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1574130697/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"40.2 MB","code":"class Solution {\\n    public int climbStairs(int n) {\\n        Map<Integer, Integer> memo = new HashMap<>();\\n        return climbStairs(n, memo);\\n    }\\n    \\n    private int climbStairs(int n, Map<Integer, Integer> memo) {\\n        if (n == 0 || n == 1) {\\n            return 1;\\n        }\\n        if (!memo.containsKey(n)) {\\n            memo.put(n, climbStairs(n-1, memo) + climbStairs(n-2, memo));\\n        }\\n        return memo.get(n);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":327},{"id":1574129767,"question_id":70,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742015705,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1574129767/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"N/A","code":"class Solution {\\n    public int climbStairs(int n) {\\n        if (n == 0 || n == 1) {\\n            return 1;\\n        }\\n        return climbStairs(n-1) + climbStairs(n-2);\\n    }\\n}","compare_result":"111111111111111111111111111111100000000000000","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":326},{"id":1574126500,"question_id":383,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742015423,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1574126500/","is_pending":"Not Pending","title":"Ransom Note","memory":"45.5 MB","code":"class Solution {\\n    public boolean canConstruct(String ransomNote, String magazine) \\n    {\\n        HashMap<Character,Integer> hm=new HashMap<>();\\n        for(char c:magazine.toCharArray())\\n        {\\n           hm.put(c,hm.getOrDefault(c,0)+1);\\n        }\\n        for(char c:ransomNote.toCharArray())\\n        {\\n            if(!hm.containsKey(c)||hm.get(c)<=0)\\n            {\\n                return false;\\n            }\\n            hm.put(c,hm.get(c)-1);\\n        }\\n        return true;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ransom-note","has_notes":false,"flag_type":1,"frontend_id":325},{"id":1574095297,"question_id":2690,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 1\xc2\xa0week","timestamp":1742012530,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/1574095297/","is_pending":"Not Pending","title":"House Robber IV","memory":"55.4 MB","code":"class Solution {\\n    private boolean canStealKHouses(int[] nums, int k, int capability) {\\n        int c = 0;\\n        int i = 0;\\n        while (i < nums.length) {\\n            if (nums[i] <= capability) {\\n                c++;\\n                i += 2;\\n            } else {\\n                i++;\\n            }\\n        }\\n        return c>= k;\\n    }\\n    public int minCapability(int[] nums, int k) {\\n        int left = Arrays.stream(nums).min().getAsInt();\\n        int right = Arrays.stream(nums).max().getAsInt(); \\n        while (left < right) {\\n            int mid = left + (right - left) / 2;\\n            if (canStealKHouses(nums, k, mid)) {\\n                right = mid;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }   \\n        return left;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iv","has_notes":false,"flag_type":1,"frontend_id":324},{"id":1573234454,"question_id":1335,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741933323,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1573234454/","is_pending":"Not Pending","title":"Maximum Candies Allocated to K Children","memory":"63 MB","code":"class Solution {\\n    public int maximumCandies(int[] candies, long k) {\\n        int left = 1, right = 10_000_000;\\n        int r = 0;\\n\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            long childrenCount = 0;\\n\\n            for (int candy : candies) {\\n                childrenCount += candy / mid;\\n            }\\n\\n            if (childrenCount >= k) {\\n                r = mid;\\n                left = mid + 1;\\n            } else {\\n                right = mid - 1;\\n            }\\n        }\\n\\n        return r;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-candies-allocated-to-k-children","has_notes":false,"flag_type":1,"frontend_id":323},{"id":1572530788,"question_id":3643,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741874701,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1572530788/","is_pending":"Not Pending","title":"Zero Array Transformation II","memory":"111.8 MB","code":"class Solution {\\n    public int minZeroArray(int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        \\n        if (Arrays.stream(nums).allMatch(x -> x == 0)) return 0;\\n        int left = 1, right = queries.length;\\n        if (!canMakeZeroArray(right, nums, queries)) return -1;\\n        while (left < right) {\\n            int mid = left + (right - left) / 2;\\n            if (canMakeZeroArray(mid, nums, queries)) right = mid;\\n            else left = mid + 1;\\n        }\\n        return left;\\n    }\\n\\n    private boolean canMakeZeroArray(int k, int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        int[] diff = new int[n + 1];\\n        for (int i = 0; i < k; i++) {\\n            int left = queries[i][0], right = queries[i][1], val = queries[i][2];\\n            diff[left] += val;\\n            diff[right + 1] -= val;\\n        }\\n        int c = 0;\\n        for (int i = 0; i < n; i++) {\\n            c += diff[i];\\n            if (c < nums[i]) return false;\\n        }\\n        return true;\\n    }\\n}","compare_resulttitle_slug":"zero-array-transformation-ii","has_notes":false,"flag_type":1,"frontend_id":322},{"id":1571395557,"question_id":2614,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741785109,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1571395557/","is_pending":"Not Pending","title":"Maximum Count of Positive Integer and Negative Integer","memory":"44.8 MB","code":"class Solution {\\n    public int maximumCount(int[] nums) \\n    {\\n        int n=nums.length;\\n        /*int low=0;\\n        int high=n-1;\\n        while(low<=high){\\n            int mid=low+(high-low)/2;\\n            if(nums[mid]>0){\\n                high=mid-1;\\n            }\\n            else if()\\n        }*/\\n        int p=0;\\n        int ne=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]>0)\\n            {\\n                p++;\\n            }\\n            else if(nums[i]<0)\\n            {\\n                ne++;\\n            }\\n        }\\n        int a=Math.max(p,ne);\\n        return a;\\n        \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-count-of-positive-integer-and-negative-integer","has_notes":false,"flag_type":1,"frontend_id":321},{"id":1570207118,"question_id":1460,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741694672,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1570207118/","is_pending":"Not Pending","title":"Number of Substrings Containing All Three Characters","memory":"44.6 MB","code":"class Solution {\\n    public int numberOfSubstrings(String s) {\\n        int c = 0;\\n        int left = 0;\\n        int[] charCount = new int[3];\\n\\n        for (int right = 0; right < s.length(); right++) {\\n            charCount[s.charAt(right) - \'a\']++;\\n\\n            while (charCount[0] > 0 && charCount[1] > 0 && charCount[2] > 0) {\\n                c += s.length() - right;\\n                charCount[s.charAt(left) - \'a\']--;\\n                left++;\\n            }\\n        }\\n\\n        return c;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"number-of-substrings-containing-all-three-characters","has_notes":false,"flag_type":1,"frontend_id":320},{"id":1569469380,"question_id":1128,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741631996,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1569469380/","is_pending":"Not Pending","title":"Remove All Adjacent Duplicates In String","memory":"45.7 MB","code":"class Solution {\\n        public String removeDuplicates(String S) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char c : S.toCharArray()) {\\n            int size = sb.length();\\n            if (size > 0 && sb.charAt(size - 1) == c) {\\n                sb.deleteCharAt(size - 1);\\n            } else {\\n                sb.append(c);\\n            }\\n        }\\n        return sb.toString();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-all-adjacent-duplicates-in-string","has_notes":false,"flag_type":1,"frontend_id":319},{"id":1569468056,"question_id":1128,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741631915,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1569468056/","is_pending":"Not Pending","title":"Remove All Adjacent Duplicates In String","memory":"N/A","code":"    public String removeDuplicates(String S) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char c : S.toCharArray()) {\\n            int size = sb.length();\\n            if (size > 0 && sb.charAt(size - 1) == c) {\\n                sb.deleteCharAt(size - 1);\\n            } else {\\n                sb.append(c);\\n            }\\n        }\\n        return sb.toString();\\n    }","compare_result":null,"title_slug":"remove-all-adjacent-duplicates-in-string","has_notes":false,"flag_type":1,"frontend_id":318},{"id":1569466050,"question_id":1128,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741631797,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1569466050/","is_pending":"Not Pending","title":"Remove All Adjacent Duplicates In String","memory":"N/A","code":"    public String removeDuplicates(String s) {\\n        int i = 0, n = s.length();\\n        char[] res = s.toCharArray();\\n        for (int j = 0; j < n; ++j, ++i) {\\n            res[i] = res[j];\\n            if (i > 0 && res[i - 1] == res[i]) // count = 2\\n                i -= 2;\\n        }\\n        return new String(res, 0, i);\\n    }","compare_result":null,"title_slug":"remove-all-adjacent-duplicates-in-string","has_notes":false,"flag_type":1,"frontend_id":317},{"id":1569249784,"question_id":3569,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741620877,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/1569249784/","is_pending":"Not Pending","title":"Count of Substrings Containing Every Vowel and K Consonants II","memory":"46.5 MB","code":"class Solution {\\n    public long countOfSubstrings(String word, int k) {\\n        int[][] frequencies = new int[2][128];\\n        frequencies[0][\'a\'] = 1;\\n        frequencies[0][\'e\'] = 1;\\n        frequencies[0][\'i\'] = 1;\\n        frequencies[0][\'o\'] = 1;\\n        frequencies[0][\'u\'] = 1;\\n\\n        long response = 0;\\n        int currentK = 0, vowels = 0, extraLeft = 0;\\n\\n        for (int right = 0, left = 0; right < word.length(); right++) {\\n            char rightChar = word.charAt(right);\\n\\n            if (frequencies[0][rightChar] == 1) {\\n                if (++frequencies[1][rightChar] == 1) vowels++;\\n            } else {\\n                currentK++;\\n            }\\n\\n            while (currentK > k) {\\n                char leftChar = word.charAt(left);\\n                if (frequencies[0][leftChar] == 1) {\\n                    if (--frequencies[1][leftChar] == 0) vowels--;\\n                } else {\\n                    currentK--;\\n                }\\n                left++;\\n                extraLeft = 0;\\n            }\\n\\n            while (vowels == 5 && currentK == k && left < right && frequencies[0][word.charAt(left)] == 1 && frequencies[1][word.charAt(left)] > 1) {\\n                extraLeft++;\\n                frequencies[1][word.charAt(left)]--;\\n                left++;\\n            }\\n\\n            if (currentK == k && vowels == 5) {\\n                response += (1 + extraLeft);\\n            }\\n        }\\n\\n        return response;\\n    }\\n}","compare_resulttitle_slug":"count-of-substrings-containing-every-vowel-and-k-consonants-ii","has_notes":false,"flag_type":1,"frontend_id":316},{"id":1568125894,"question_id":3483,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741528035,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1568125894/","is_pending":"Not Pending","title":"Alternating Groups II","memory":"63.6 MB","code":"class Solution {\\n    public int numberOfAlternatingGroups(int[] colors, int k) {\\n        int r=0;\\n        int left=0;\\n        int n = colors.length;\\n        for(int right=1;right < (n + k -1); right++){ \\n            if(colors[right%n] == colors[(right-1)%n]){\\n                left = right;\\n            }\\n            if(right - left + 1 == k){\\n                r++;\\n                left++; \\n            }\\n        }\\n        return r;\\n    }\\n}","compare_resulttitle_slug":"alternating-groups-ii","has_notes":false,"flag_type":1,"frontend_id":315},{"id":1567609751,"question_id":3759,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741489753,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1567609751/","is_pending":"Not Pending","title":"Choose K Elements With Maximum Sum","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public long[] findMaxSum(int[] nums1, int[] nums2, int k) {\\n        int n = nums1.length;\\n        long[] answer = new long[n];\\n        \\n        for (int i = 0; i < n; i++) {\\n            PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\\n            for (int j = 0; j < n; j++) {\\n                if (nums1[j] < nums1[i]) {\\n                    pq.add(nums2[j]);\\n                }\\n            }\\n            long sum = 0;\\n            for (int count = 0; count < k && !pq.isEmpty(); count++) {\\n                sum += pq.poll();\\n            }\\n            answer[i] = sum;\\n        }\\n        return answer;\\n    }\\n}\\n","compare_resulttitle_slug":"choose-k-elements-with-maximum-sum","has_notes":false,"flag_type":1,"frontend_id":314},{"id":1567602156,"question_id":3759,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741489476,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1567602156/","is_pending":"Not Pending","title":"Choose K Elements With Maximum Sum","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public long[] findMaxSum(int[] nums1, int[] nums2, int k) {\\n        int n = nums1.length;\\n        long[] r = new long[n];\\n        for (int i = 0; i < n; i++) {\\n            PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\\n            for (int j = 0; j < n; j++) {\\n                if (nums1[j] < nums1[i]) pq.add(nums2[j]);\\n            }\\n            long s = 0;\\n            for (int count = 0; count < k && !pq.isEmpty(); count++) {\\n                s+= pq.poll();\\n            }\\n            r[i] = s;\\n        }\\n        return r;\\n    }\\n}\\n","compare_resulttitle_slug":"choose-k-elements-with-maximum-sum","has_notes":false,"flag_type":1,"frontend_id":313},{"id":1567597857,"question_id":3790,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741489321,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1567597857/","is_pending":"Not Pending","title":"Fruits Into Baskets II","memory":"44.6 MB","code":"class Solution {\\n    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {\\n        int num=fruits.length;\\n        boolean[] z=new boolean[num];\\n        int ctt=0;\\n        for (int i :fruits){\\n            boolean plo=false;\\n            for(int j=0;j<num;j++){\\n                if(!z[j] && baskets[j]>=i){\\n                    z[j]=true;\\n                    plo=true;\\n                    break;\\n                }\\n            }\\n            if(!plo) ctt++;\\n        }\\n        return ctt;\\n    }\\n}","compare_resulttitle_slug":"fruits-into-baskets-ii","has_notes":false,"flag_type":1,"frontend_id":312},{"id":1566801818,"question_id":2463,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741422721,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1566801818/","is_pending":"Not Pending","title":"Minimum Recolors to Get K Consecutive Black Blocks","memory":"41.2 MB","code":"class Solution {\\n    public int minimumRecolors(String blocks, int k) {\\n        int blackCount = 0, a = Integer.MAX_VALUE;\\n    \\n        for (int i = 0; i < blocks.length(); i++) {\\n            if (i - k >= 0 && blocks.charAt(i - k) == \'B\') blackCount--;\\n            if (blocks.charAt(i) == \'B\') blackCount++;\\n            a = Math.min(a, k - blackCount);\\n        }\\n        \\n        return a;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-recolors-to-get-k-consecutive-black-blocks","has_notes":false,"flag_type":1,"frontend_id":311}],"has_next":true,"last_key":""}'
2025-08-25 23:31:06,539 [INFO] __main__.py:188 - Skipping maximum-unique-subarray-sum-after-deletion 2025-03-16 08.13.24 because its status is 'Wrong Answer'
2025-08-25 23:31:06,878 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:06,883 [INFO] __main__.py:245 - Writing unique-3-digit-even-numbers/2025-03-15 20.28.49 - Accepted - runtime 5ms - memory 44.8MB.java
2025-08-25 23:31:07,253 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:07,255 [INFO] __main__.py:245 - Writing ugly-number/2025-03-15 11.04.46 - Accepted - runtime 1ms - memory 40.9MB.java
2025-08-25 23:31:07,576 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:07,584 [INFO] __main__.py:245 - Writing climbing-stairs/2025-03-15 10.46.27 - Accepted - runtime 0ms - memory 40.2MB.java
2025-08-25 23:31:07,586 [INFO] __main__.py:188 - Skipping climbing-stairs 2025-03-15 10.45.05 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:08,481 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:08,483 [INFO] __main__.py:245 - Writing ransom-note/2025-03-15 10.40.23 - Accepted - runtime 14ms - memory 45.5MB.java
2025-08-25 23:31:08,850 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:08,850 [INFO] __main__.py:245 - Writing house-robber-iv/2025-03-15 09.52.10 - Accepted - runtime 25ms - memory 55.4MB.java
2025-08-25 23:31:09,183 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:09,198 [INFO] __main__.py:245 - Writing maximum-candies-allocated-to-k-children/2025-03-14 11.52.03 - Accepted - runtime 33ms - memory 63MB.java
2025-08-25 23:31:09,538 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:09,546 [INFO] __main__.py:245 - Writing zero-array-transformation-ii/2025-03-13 19.35.01 - Accepted - runtime 20ms - memory 111.8MB.java
2025-08-25 23:31:09,873 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:09,873 [INFO] __main__.py:245 - Writing maximum-count-of-positive-integer-and-negative-integer/2025-03-12 18.41.49 - Accepted - runtime 0ms - memory 44.8MB.java
2025-08-25 23:31:10,232 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:10,232 [INFO] __main__.py:245 - Writing number-of-substrings-containing-all-three-characters/2025-03-11 17.34.32 - Accepted - runtime 15ms - memory 44.6MB.java
2025-08-25 23:31:10,734 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:10,734 [INFO] __main__.py:245 - Writing remove-all-adjacent-duplicates-in-string/2025-03-11 00.09.56 - Accepted - runtime 10ms - memory 45.7MB.java
2025-08-25 23:31:10,736 [INFO] __main__.py:188 - Skipping remove-all-adjacent-duplicates-in-string 2025-03-11 00.08.35 because its status is 'Compile Error'
2025-08-25 23:31:10,736 [INFO] __main__.py:188 - Skipping remove-all-adjacent-duplicates-in-string 2025-03-11 00.06.37 because its status is 'Compile Error'
2025-08-25 23:31:11,687 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:11,705 [INFO] __main__.py:245 - Writing count-of-substrings-containing-every-vowel-and-k-consonants-ii/2025-03-10 21.04.37 - Accepted - runtime 53ms - memory 46.5MB.java
2025-08-25 23:31:12,325 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:12,325 [INFO] __main__.py:245 - Writing alternating-groups-ii/2025-03-09 19.17.15 - Accepted - runtime 5ms - memory 63.6MB.java
2025-08-25 23:31:12,337 [INFO] __main__.py:188 - Skipping choose-k-elements-with-maximum-sum 2025-03-09 08.39.13 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:12,337 [INFO] __main__.py:188 - Skipping choose-k-elements-with-maximum-sum 2025-03-09 08.34.36 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:12,337 [INFO] __main__.py:208 - Skipping fruits-into-baskets-ii 2025-03-09 08.32.01 in java because a more recent submission has already been exported
2025-08-25 23:31:12,788 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:12,788 [INFO] __main__.py:245 - Writing minimum-recolors-to-get-k-consecutive-black-blocks/2025-03-08 14.02.01 - Accepted - runtime 1ms - memory 41.2MB.java
2025-08-25 23:31:17,793 [DEBUG] leetcode.py:150 - Exporting submissions from 340 to 360
2025-08-25 23:31:18,319 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=340&limit=20 HTTP/11" 200 None
2025-08-25 23:31:18,319 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1566801544,"question_id":2463,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1741422701,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1566801544/","is_pending":"Not Pending","title":"Minimum Recolors to Get K Consecutive Black Blocks","memory":"N/A","code":"class Solution {\\n    public int minimumRecolors(String blocks, int k) {\\n        int blackCount = 0, a = Integer.MAX_VALUE;\\n    \\n        for (int i = 0; i < blocks.length(); i++) {\\n            if (i - k >= 0 && blocks.charAt(i - k) == \'B\') blackCount--;\\n            if (blocks.charAt(i) == \'B\') blackCount++;\\n            a = Math.min(ans, k - blackCount);\\n        }\\n        \\n        return a;\\n    }\\n}","compare_result":null,"title_slug":"minimum-recolors-to-get-k-consecutive-black-blocks","has_notes":false,"flag_type":1,"frontend_id":310},{"id":1565498051,"question_id":2610,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741316446,"status":10,"status_display":"Accepted","runtime":"434 ms","url":"/submissions/detail/1565498051/","is_pending":"Not Pending","title":"Closest Prime Numbers in Range","memory":"41.1 MB","code":"class Solution {\\n    public int[] closestPrimes(int left, int right) {\\n        int res[] = new int[2];\\n        res[0] = -1;\\n        res[1] = -1;\\n        int min = Integer.MAX_VALUE;\\n        for(int i=left;i<right;i++){\\n            if(isPrime(i)){\\n                for(int j = i+1;j<=right;j++){\\n                    if(isPrime(j)){\\n                        if(min>j-i){\\n                            res[0] = i;\\n                            res[1] = j;\\n                            min = j-i;\\n                        }\\n                        break;\\n                    }\\n                }\\n            }\\n            if(min==1 || min==2) return res;\\n        }\\n        return res;\\n    }\\n    public boolean isPrime(int n){\\n        if(n==1) return false;\\n        int i = 2;\\n        while(i<n){\\n            if(n%i==0) return false;\\n            i++;\\n        }\\n        return true;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"closest-prime-numbers-in-range","has_notes":false,"flag_type":1,"frontend_id":309},{"id":1565376883,"question_id":415,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741302444,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1565376883/","is_pending":"Not Pending","title":"Add Strings","memory":"44.2 MB","code":"import java.math.BigInteger;\\n\\nclass Solution {\\n    public String addStrings(String num1, String num2) {\\n          BigInteger bigNum1 = new BigInteger(num1);\\n        BigInteger bigNum2 = new BigInteger(num2);\\n        BigInteger s = bigNum1.add(bigNum2);\\n\\n        return String.valueOf(s);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-strings","has_notes":false,"flag_type":1,"frontend_id":308},{"id":1565375818,"question_id":125,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741302304,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1565375818/","is_pending":"Not Pending","title":"Valid Palindrome","memory":"45 MB","code":"class Solution {\\n    public boolean isPalindrome(String s) {\\n        s = s.toLowerCase().replaceAll(\\"[^a-z0-9]\\", \\"\\");\\n        int left = 0;\\n        int right = s.length() - 1;\\n\\n        while (left < right) {\\n            if (s.charAt(left) != s.charAt(right)) {\\n                return false;\\n            }\\n            left++;\\n            right--;\\n        }\\n        return true;        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome","has_notes":false,"flag_type":1,"frontend_id":307},{"id":1564997326,"question_id":3227,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741274260,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1564997326/","is_pending":"Not Pending","title":"Find Missing and Repeated Values","memory":"45.6 MB","code":"class Solution {\\n    public int[] findMissingAndRepeatedValues(int[][] grid) {\\n        int n = grid.length;\\n        int size = n * n;\\n        int[] count = new int[size + 1];\\n\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < n; j++) {\\n                count[grid[i][j]]++;\\n            }\\n        }\\n\\n        int a = -1, b = -1;\\n\\n        for (int num = 1; num <= size; num++) {\\n            if (count[num] == 2) {\\n                a = num;\\n            } else if (count[num] == 0) {\\n                b = num;\\n            }\\n        }\\n\\n        return new int[]{a, b};\\n    }\\n}","compare_resulttitle_slug":"find-missing-and-repeated-values","has_notes":false,"flag_type":1,"frontend_id":306},{"id":1564020016,"question_id":258,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741196369,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1564020016/","is_pending":"Not Pending","title":"Add Digits","memory":"41.1 MB","code":"class Solution {\\n    public int addDigits(int num){\\n        if(num==0) return 0;\\n        else if(num%9==0) return 9;\\n        else return num%9;\\n        \\n    }\\n} ","compare_resulttitle_slug":"add-digits","has_notes":false,"flag_type":1,"frontend_id":305},{"id":1564019003,"question_id":258,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741196320,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1564019003/","is_pending":"Not Pending","title":"Add Digits","memory":"N/A","code":"class Solution {\\npublic:\\n    int addDigits(int num) {\\n        while (num >= 10) {\\n            int sum = 0;\\n            while (num > 0) {\\n                sum += num % 10;\\n                num /= 10;   \\n            }\\n            num = sum;\\n        }\\n        return num;\\n    }\\n};","compare_result":null,"title_slug":"add-digits","has_notes":false,"flag_type":1,"frontend_id":304},{"id":1564004247,"question_id":70,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741195611,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1564004247/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"N/A","code":"class Solution {\\n    public int climbStairs(int n) {\\n        if (n == 0 || n == 1) {\\n            return 1;\\n        }\\n        return climbStairs(n-1) + climbStairs(n-2);\\n    }\\n}","compare_result":"111111111111111111111111111111100000000000000","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":303},{"id":1564000049,"question_id":29,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741195408,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1564000049/","is_pending":"Not Pending","title":"Divide Two Integers","memory":"41.2 MB","code":"class Solution {\\n    public int divide(int dividend, int divisor) {\\n        int n = 0;\\n        long c = 0;\\n        long sign = 1;\\n        if (divisor == 1) return dividend;\\n        if ((dividend < 0 && divisor >= 0) || (dividend >= 0 && divisor < 0)) sign = -1;\\n        long dd = Math.abs((long) dividend);\\n        long dr = Math.abs((long) divisor);\\n        for (int i = 30; i >= 0; i--) {\\n            if (dd >= (dr << i)) {\\n                c += (1 << i);\\n                dd -= (dr << i);\\n            }\\n        }\\n        return (int) (c * sign);\\n    }\\n}","compare_resulttitle_slug":"divide-two-integers","has_notes":false,"flag_type":1,"frontend_id":302},{"id":1563777370,"question_id":344,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741182622,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1563777370/","is_pending":"Not Pending","title":"Reverse String","memory":"45.7 MB","code":"class Solution {\\n    public void reverseString(char[] s) {\\n        int l=0;\\n        int r=s.length-1;\\n        while(l<r)\\n        {\\n            char t=s[r];\\n            s[r]=s[l];\\n            s[l]=t;\\n            l++;\\n            r--;\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-string","has_notes":false,"flag_type":1,"frontend_id":301},{"id":1563166432,"question_id":2649,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741139058,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1563166432/","is_pending":"Not Pending","title":"Count Total Number of Colored Cells","memory":"40.3 MB","code":"class Solution {\\n    public long coloredCells(int n) {\\n        long s=1; \\n        for(int i=2; i<=n; i++){\\n            s+=(i-1)*4; \\n        }\\n        return s;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-total-number-of-colored-cells","has_notes":false,"flag_type":1,"frontend_id":300},{"id":1563166061,"question_id":2649,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741139019,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1563166061/","is_pending":"Not Pending","title":"Count Total Number of Colored Cells","memory":"N/A","code":"class Solution {\\n    public long coloredCells(int n) \\n    {\\n        class Solution {\\n    public long coloredCells(int n) {\\n        long s=1; \\n        for(int i=2; i<=n; i++){\\n            s+=(i-1)*4; \\n        }\\n        return s;\\n    }\\n}\\n    }\\n}","compare_result":null,"title_slug":"count-total-number-of-colored-cells","has_notes":false,"flag_type":1,"frontend_id":299},{"id":1562407481,"question_id":14,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741079240,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1562407481/","is_pending":"Not Pending","title":"Longest Common Prefix","memory":"41.7 MB","code":"class Solution {\\n    public String longestCommonPrefix(String[] strs) {\\n        if (strs == null || strs.length == 0) return \\"\\";\\n        \\n        String p = strs[0];\\n        int prefLen = p.length();\\n\\n        for (int i = 1; i < strs.length; i++) {\\n            String s = strs[i];\\n            while (prefLen > s.length() || !p.equals(s.substring(0, prefLen))) {\\n                prefLen--;\\n                if (prefLen == 0) {\\n                    return \\"\\";\\n                }\\n                p = p.substring(0, prefLen);\\n            }\\n        }\\n\\n        return p;        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-common-prefix","has_notes":false,"flag_type":1,"frontend_id":298},{"id":1562401533,"question_id":1889,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741078760,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1562401533/","is_pending":"Not Pending","title":"Check if Number is a Sum of Powers of Three","memory":"40.5 MB","code":"class Solution {\\n    public boolean checkPowersOfThree(int n) {\\n        String b=Integer.toString(n,3);\\n        return !b.contains(\\"2\\");\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-number-is-a-sum-of-powers-of-three","has_notes":false,"flag_type":1,"frontend_id":297},{"id":1562025188,"question_id":1444,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741051543,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1562025188/","is_pending":"Not Pending","title":"Number of Steps to Reduce a Number to Zero","memory":"40.8 MB","code":"class Solution {\\n    public int numberOfSteps(int num) \\n    {\\n        return h(num,0);\\n    }\\n    private int h(int num,int s)\\n    {\\n        if(num==0)\\n        {\\n            return s;\\n        }\\n        if(num%2==0)\\n        {\\n            return h(num/2,s+1);\\n        }\\n        return h(num-1,s+1);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-steps-to-reduce-a-number-to-zero","has_notes":false,"flag_type":1,"frontend_id":296},{"id":1561710181,"question_id":697,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741023716,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1561710181/","is_pending":"Not Pending","title":"Degree of an Array","memory":"49.6 MB","code":"class Solution {\\n    public int findShortestSubArray(int[] nums) {\\n        // The int is an array of [firstEncounter, lastEncounter, frequency]\\n        HashMap<Integer, int[]> map = new HashMap<>();\\n        for(int i = 0; i < nums.length; i++){\\n\\n       \\n            if(!map.containsKey(nums[i])){\\n                map.put(nums[i], new int[]{i, i, 1});\\n            } \\n\\n            else {\\n                int[] arr = map.get(nums[i]);\\n                arr[1] = i;\\n                arr[2]++;\\n                map.put(nums[i], arr);\\n            }\\n        }\\n        int maxFreq = Integer.MIN_VALUE;\\n        int m= Integer.MAX_VALUE;\\n        for(int[] value : map.values()){\\n            if(value[2] > maxFreq){\\n                maxFreq = value[2];\\n                m = value[1] - value[0] + 1;\\n            } \\n            else if(value[2] == maxFreq){\\n                m = Math.min(m, value[1] - value[0] + 1);\\n            }\\n        }\\n        return m;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array","has_notes":false,"flag_type":1,"frontend_id":295},{"id":1561709769,"question_id":697,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741023696,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1561709769/","is_pending":"Not Pending","title":"Degree of an Array","memory":"N/A","code":"class Solution {\\n    public int findShortestSubArray(int[] nums) {\\n        // The int is an array of [firstEncounter, lastEncounter, frequency]\\n        HashMap<Integer, int[]> map = new HashMap<>();\\n        for(int i = 0; i < nums.length; i++){\\n\\n       \\n            if(!map.containsKey(nums[i])){\\n                map.put(nums[i], new int[]{i, i, 1});\\n            } \\n\\n            else {\\n                int[] arr = map.get(nums[i]);\\n                arr[1] = i;\\n                arr[2]++;\\n                map.put(nums[i], arr);\\n            }\\n        }\\n        int maxFreq = Integer.MIN_VALUE;\\n        int minDist = Integer.MAX_VALUE;\\n        for(int[] value : map.values()){\\n            if(value[2] > maxFreq){\\n                maxFreq = value[2];\\n                m = value[1] - value[0] + 1;\\n            } \\n            else if(value[2] == maxFreq){\\n                m = Math.min(m, value[1] - value[0] + 1);\\n            }\\n        }\\n        return m;\\n    }\\n}","compare_result":null,"title_slug":"degree-of-an-array","has_notes":false,"flag_type":1,"frontend_id":294},{"id":1561463740,"question_id":496,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1741009801,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1561463740/","is_pending":"Not Pending","title":"Next Greater Element I","memory":"43.8 MB","code":"class Solution {\\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\\n        Stack<Integer> stack = new Stack<>();\\n        Map<Integer, Integer> m = new HashMap<>();\\n        for (int i = nums2.length - 1; i >= 0; i--) {\\n            while (!stack.isEmpty() && stack.peek() <= nums2[i]) {  \\n                stack.pop();\\n            }\\n            if (stack.isEmpty()) {  \\n                m.put(nums2[i], -1);\\n            } else {\\n                m.put(nums2[i],stack.peek()); \\n            }\\n            stack.push(nums2[i]);\\n        }\\n        for(int i =0;i<nums1.length;i++){\\n            nums1[i] = m.get(nums1[i]);\\n        }\\n        return nums1;\\n    }\\n}","compare_result":"1111111111111111","title_slug":"next-greater-element-i","has_notes":false,"flag_type":1,"frontend_id":293},{"id":1560910127,"question_id":2265,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740966526,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1560910127/","is_pending":"Not Pending","title":"Partition Array According to Given Pivot","memory":"68.3 MB","code":"class Solution {\\n    public int[] pivotArray(int[] nums, int pivot) \\n    {\\n        int n=nums.length;\\n        int arr[]=new int[n];\\n        int l=0,r=n-1;\\n        for(int i=0,j=n-1;i<n;i++,j--)\\n        {\\n            if(nums[i]<pivot)\\n            {\\n                arr[l]=nums[i];\\n                l++;\\n            }\\n            if(nums[j]>pivot)\\n            {\\n                arr[r]=nums[j];\\n                r--;\\n            }\\n        }\\n        while(l<=r)\\n        {\\n            arr[l]=pivot;\\n            l++;\\n        }\\n       return arr;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"partition-array-according-to-given-pivot","has_notes":false,"flag_type":1,"frontend_id":292},{"id":1560065020,"question_id":41,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740896994,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1560065020/","is_pending":"Not Pending","title":"First Missing Positive","memory":"60.2 MB","code":"class Solution {\\n    public int firstMissingPositive(int[] nums) \\n    {\\n        int n=nums.length;\\n        HashSet<Integer> h=new HashSet<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]>0)\\n            {\\n                h.add(nums[i]);\\n            }\\n        }\\n        int a=0;\\n        for(int i=1;i<=n+1;i++)\\n        {\\n            if(!h.contains(i))\\n            {\\n                a=i;\\n                break;\\n            }\\n        }\\n        return a;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"first-missing-positive","has_notes":false,"flag_type":1,"frontend_id":291}],"has_next":true,"last_key":""}'
2025-08-25 23:31:18,321 [INFO] __main__.py:188 - Skipping minimum-recolors-to-get-k-consecutive-black-blocks 2025-03-08 14.01.41 because its status is 'Compile Error'
2025-08-25 23:31:18,644 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:18,646 [INFO] __main__.py:245 - Writing closest-prime-numbers-in-range/2025-03-07 08.30.46 - Accepted - runtime 434ms - memory 41.1MB.java
2025-08-25 23:31:18,985 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:18,987 [INFO] __main__.py:245 - Writing add-strings/2025-03-07 04.37.24 - Accepted - runtime 21ms - memory 44.2MB.java
2025-08-25 23:31:19,316 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:19,318 [INFO] __main__.py:245 - Writing valid-palindrome/2025-03-07 04.35.04 - Accepted - runtime 14ms - memory 45MB.java
2025-08-25 23:31:19,755 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:19,759 [INFO] __main__.py:245 - Writing find-missing-and-repeated-values/2025-03-06 20.47.40 - Accepted - runtime 1ms - memory 45.6MB.java
2025-08-25 23:31:20,095 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:20,097 [INFO] __main__.py:245 - Writing add-digits/2025-03-05 23.09.29 - Accepted - runtime 1ms - memory 41.1MB.java
2025-08-25 23:31:20,097 [INFO] __main__.py:188 - Skipping add-digits 2025-03-05 23.08.40 because its status is 'Compile Error'
2025-08-25 23:31:20,099 [INFO] __main__.py:188 - Skipping climbing-stairs 2025-03-05 22.56.51 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:20,481 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:20,481 [INFO] __main__.py:245 - Writing divide-two-integers/2025-03-05 22.53.28 - Accepted - runtime 1ms - memory 41.2MB.java
2025-08-25 23:31:20,825 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:20,827 [INFO] __main__.py:245 - Writing reverse-string/2025-03-05 19.20.22 - Accepted - runtime 0ms - memory 45.7MB.java
2025-08-25 23:31:21,169 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:21,175 [INFO] __main__.py:245 - Writing count-total-number-of-colored-cells/2025-03-05 07.14.18 - Accepted - runtime 3ms - memory 40.3MB.java
2025-08-25 23:31:21,177 [INFO] __main__.py:188 - Skipping count-total-number-of-colored-cells 2025-03-05 07.13.39 because its status is 'Compile Error'
2025-08-25 23:31:21,660 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:21,671 [INFO] __main__.py:245 - Writing longest-common-prefix/2025-03-04 14.37.20 - Accepted - runtime 0ms - memory 41.7MB.java
2025-08-25 23:31:21,990 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:21,990 [INFO] __main__.py:245 - Writing check-if-number-is-a-sum-of-powers-of-three/2025-03-04 14.29.20 - Accepted - runtime 0ms - memory 40.5MB.java
2025-08-25 23:31:22,417 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:22,421 [INFO] __main__.py:245 - Writing number-of-steps-to-reduce-a-number-to-zero/2025-03-04 06.55.43 - Accepted - runtime 0ms - memory 40.8MB.java
2025-08-25 23:31:22,752 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:22,752 [INFO] __main__.py:245 - Writing degree-of-an-array/2025-03-03 23.11.56 - Accepted - runtime 14ms - memory 49.6MB.java
2025-08-25 23:31:22,752 [INFO] __main__.py:188 - Skipping degree-of-an-array 2025-03-03 23.11.36 because its status is 'Compile Error'
2025-08-25 23:31:23,233 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:23,237 [INFO] __main__.py:245 - Writing next-greater-element-i/2025-03-03 19.20.01 - Accepted - runtime 3ms - memory 43.8MB.java
2025-08-25 23:31:23,604 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:23,604 [INFO] __main__.py:245 - Writing partition-array-according-to-given-pivot/2025-03-03 07.18.46 - Accepted - runtime 4ms - memory 68.3MB.java
2025-08-25 23:31:24,259 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:24,261 [INFO] __main__.py:245 - Writing first-missing-positive/2025-03-02 11.59.54 - Accepted - runtime 13ms - memory 60.2MB.java
2025-08-25 23:31:29,265 [DEBUG] leetcode.py:150 - Exporting submissions from 360 to 380
2025-08-25 23:31:29,794 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=360&limit=20 HTTP/11" 200 None
2025-08-25 23:31:29,794 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1559992564,"question_id":2707,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740892171,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1559992564/","is_pending":"Not Pending","title":"Merge Two 2D Arrays by Summing Values","memory":"45.3 MB","code":"class Solution \\n{\\n    public int[][] mergeArrays(int[][] nums1, int[][] nums2) \\n    {\\n        ArrayList<int[]> result = new ArrayList<>();\\n        int i = 0, j = 0;\\n        while (i < nums1.length && j < nums2.length) \\n        {\\n            int[] temp = new int[2];\\n            \\n            if (nums1[i][0] == nums2[j][0]) \\n            {\\n                temp[0] = nums1[i][0];\\n                temp[1] = nums1[i][1] + nums2[j][1];\\n                i++;\\n                j++;\\n            } \\n            else if (nums1[i][0] < nums2[j][0]) \\n            {\\n                temp[0] = nums1[i][0];\\n                temp[1] = nums1[i][1];\\n                i++;\\n            } \\n            else \\n            {\\n                temp[0] = nums2[j][0];\\n                temp[1] = nums2[j][1];\\n                j++;\\n            }\\n\\n            result.add(temp);\\n        }\\n        while (i < nums1.length) \\n        {\\n            int[] temp = nums1[i++];\\n            result.add(temp);\\n        }\\n        while (j < nums2.length) \\n        {\\n            int[] temp = nums2[j++];\\n            result.add(temp);\\n        }\\n        int[][] tuples = new int[result.size()][2];\\n        for (i = 0; i < tuples.length; i++) \\n        {\\n            tuples[i] = result.get(i);\\n        }\\n\\n        return tuples;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"merge-two-2d-arrays-by-summing-values","has_notes":false,"flag_type":1,"frontend_id":290},{"id":1559884914,"question_id":3786,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740885517,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1559884914/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence After at Most K Operations","memory":"N/A","code":"class Solution {\\n    public int longestPalindromicSubsequence(String s, int k) {\\n        int n = s.length();\\n        int[][] arr = new int[n][n];\\n\\n        for (int i = 0; i < n; i++) {\\n            arr[i][i] = 1;\\n        }\\n\\n        for (int len = 2; len <= n; len++) {\\n            for (int i = 0; i <= n - len; i++) {\\n                int j = i + len - 1;\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    arr[i][j] = arr[i + 1][j - 1] + 2;\\n                } else {\\n                    arr[i][j] = Math.max(arr[i + 1][j], arr[i][j - 1]);\\n                }\\n            }\\n        }\\n\\n        int m = arr[0][n - 1];\\n        for (int i = 0; i < n; i++) {\\n            for (int j = i; j < n; j++) {\\n                int c = (j - i + 1) - arr[i][j];\\n                if (c <= k) {\\n                    m = Math.max(m, arr[i][j] + k - c);\\n                }\\n            }\\n        }\\n\\n        return m;\\n    }\\n}\\n","compare_result":"1000000000000000000000000000000000100000000000000000000000000000000001000000000000000000000100000000000000000000000000000000010000000000000000000000000001000000000000000000000000000000000000000001000100000000000000000000000000000000000010000000000000000000100000000100000010000000000000000100000000000000000000000000000000000000000000000000000001000000000000000000000000000001000000000000010000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000","title_slug":"longest-palindromic-subsequence-after-at-most-k-operations","has_notes":false,"flag_type":1,"frontend_id":289},{"id":1559878892,"question_id":3786,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740885250,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1559878892/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence After at Most K Operations","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int longestPalindromicSubsequence(String s, int k) {\\n        Map<String, Integer> hm = new HashMap<>();\\n        return d(s.toCharArray(), k, 0, hm);\\n    }\\n\\n    private int d(char[] s, int k, int ind, Map<String, Integer> hm) {\\n        if (k == 0 || ind == s.length) {\\n            return ml(new String(s));\\n        }\\n\\n        String key = new String(s) + \\",\\" + k;\\n        if (hm.containsKey(key)) return hm.get(key);\\n\\n        int ml = ml(new String(s));\\n\\n        char o = s[ind];\\n        for (int i = 0; i < 2; i++) {\\n            s[ind] = (char) (((s[ind] - \'a\' + (i == 0 ? 1 : -1) + 26) % 26) + \'a\');\\n            ml = Math.max(ml, d(s, k - 1, ind + 1, hm));\\n            s[ind] = o;\\n        }\\n\\n        hm.put(key, ml);\\n        return ml;\\n    }\\n\\n    private int ml(String s) {\\n        int n = s.length();\\n        int[][] arr = new int[n][n];\\n\\n        for (int i = n - 1; i >= 0; i--) {\\n            arr[i][i] = 1;\\n            for (int j = i + 1; j < n; j++) {\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    arr[i][j] = 2 + arr[i + 1][j - 1];\\n                } else {\\n                    arr[i][j] = Math.max(arr[i + 1][j], arr[i][j - 1]);\\n                }\\n            }\\n        }\\n        return arr[0][n - 1];\\n    }\\n}\\n","compare_result":"0111111111111001101100100110011001110001000000001110000000110010000000000000000000000100000000000001000000001000000000000010000000000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-subsequence-after-at-most-k-operations","has_notes":false,"flag_type":1,"frontend_id":288},{"id":1559861881,"question_id":3786,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740884543,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1559861881/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence After at Most K Operations","memory":"N/A","code":"class Solution {\\n    public int longestPalindromicSubsequence(String s, int k) {\\n        return pal(s.toCharArray(), 0, s.length() - 1, k);\\n    }\\n    private int pal(char[] s, int l, int r, int k) {\\n        if (l > r) return 0;\\n        if (l == r) return 1;\\n        if (s[l] == s[r]) {\\n            return 2 + pal(s, l + 1, r - 1, k);\\n        }\\n        int m = 0;\\n        if (k > 0) {\\n            char ol = s[l];\\n            s[l] = (char) (((s[l] - \'a\' + 1) % 26) + \'a\');\\n            m = Math.max(m, pal(s, l, r, k - 1));\\n            s[l] = (char) (((ol - \'a\' - 1 + 26) % 26) + \'a\');\\n            m = Math.max(m, pal(s, l, r, k - 1));\\n            s[l] = ol;\\n        }\\n        if (k > 0) {\\n            char or = s[r];\\n            s[r] = (char) (((s[r] - \'a\' + 1) % 26) + \'a\');\\n            m = Math.max(m, pal(s, l, r, k - 1));\\n            s[r] = (char) (((or - \'a\' - 1 + 26) % 26) + \'a\');\\n            m = Math.max(m, pal(s, l, r, k - 1));\\n            s[r] = or;\\n        }\\n        m = Math.max(m, pal(s, l + 1, r, k));\\n        m = Math.max(m, pal(s, l, r - 1, k));\\n        return m;\\n    }\\n}\\n","compare_result":"1111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-subsequence-after-at-most-k-operations","has_notes":false,"flag_type":1,"frontend_id":287},{"id":1559835120,"question_id":3705,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740883556,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1559835120/","is_pending":"Not Pending","title":"Find the Largest Almost Missing Integer","memory":"44.6 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public int largestInteger(int[] nums, int k) {\\n        HashMap<Integer, Integer> h = new HashMap<>();\\n        for (int i = 0; i <= nums.length - k; i++) {\\n            Set<Integer> s = new HashSet<>();\\n            for (int j = i; j < i + k; j++) {\\n                s.add(nums[j]);\\n            }\\n            for (int num : s) {\\n                h.put(num,h.getOrDefault(num, 0) + 1);\\n            }\\n        }\\n        int a= -1;\\n        for (int num :h.keySet()) {\\n            if (h.get(num) == 1) {\\n                a = Math.max(a, num);\\n            }\\n        }    \\n        return a;\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-largest-almost-missing-integer","has_notes":false,"flag_type":1,"frontend_id":286},{"id":1559598009,"question_id":837,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740858311,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1559598009/","is_pending":"Not Pending","title":"Most Common Word","memory":"43.3 MB","code":"class Solution {\\n    public String mostCommonWord(String paragraph, String[] banned) \\n    {\\n        paragraph = paragraph.toLowerCase().replaceAll(\\"[^a-zA-Z]\\", \\" \\");\\n\\n         List bannedList = Arrays.asList(banned);\\n\\n         String[] words = paragraph.split(\\" \\");\\n\\n         HashMap<String, Integer> numOfWords = new HashMap<>();\\n\\n         int maxNum = 0;\\n         String m= \\"\\";\\n\\n         for (String s : words)\\n         {\\n        \\t if (!s.equals(\\"\\"))\\n        \\t {\\n        \\t\\t if (numOfWords.get(s) == null)\\n                 {\\n                     numOfWords.put(s, 1);\\n                 }\\n                 else numOfWords.put(s, numOfWords.get(s) + 1);\\n        \\t }\\n             \\n         }    \\n         for (Map.Entry<String, Integer> set : numOfWords.entrySet()) \\n         {\\n             int value = set.getValue();\\n             String key = set.getKey();\\n             if (value > maxNum && !bannedList.contains(key))\\n             {\\n                 maxNum = value;\\n                 m = key;\\n             }\\n         }\\n\\n         return m;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"most-common-word","has_notes":false,"flag_type":1,"frontend_id":285},{"id":1559588940,"question_id":920,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740857589,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1559588940/","is_pending":"Not Pending","title":"Uncommon Words from Two Sentences","memory":"42.2 MB","code":"class Solution {\\n    public String[] uncommonFromSentences(String s1, String s2) \\n    {\\n        String w1[]=s1.split(\\" \\");\\n        HashMap<String,Integer> h=new HashMap<>();\\n        for(String w:w1)\\n        {\\n            h.put(w,h.getOrDefault(w,0)+1);\\n        }\\n        String w2[]=s2.split(\\" \\");\\n        for(String w:w2)\\n        {\\n            h.put(w,h.getOrDefault(w,0)+1);\\n        }\\n        ArrayList<String> as=new ArrayList<>();\\n        for(Map.Entry<String,Integer> entry:h.entrySet())\\n        {\\n            if(entry.getValue()==1)\\n            {\\n                as.add(entry.getKey());\\n            }\\n        }\\n        return as.toArray(new String[0]);\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"uncommon-words-from-two-sentences","has_notes":false,"flag_type":1,"frontend_id":284},{"id":1559271070,"question_id":3785,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740840829,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1559271070/","is_pending":"Not Pending","title":"Find the Number of Copy Arrays","memory":"88.7 MB","code":"class Solution {\\n    public int countArrays(int[] original, int[][] bounds) {\\n        int n = original.length;\\n        int[][] arr = new int[n][2];\\n        \\n        for (int i = 0; i < n; i++) {\\n            arr[i][0] = bounds[i][0];\\n            arr[i][1] = bounds[i][1];\\n        }\\n        \\n        for (int i = 1; i < n; i++) {\\n            int diff = original[i] - original[i - 1];\\n            int n1 = arr[i - 1][0] + diff;\\n            int n2 = arr[i - 1][1] + diff;\\n            arr[i][0] = Math.max(arr[i][0], n1);\\n            arr[i][1] = Math.min(arr[i][1], n2);\\n            if (arr[i][0] > arr[i][1]) {\\n                return 0;\\n            }\\n        }\\n        \\n        return arr[n - 1][1] - arr[n - 1][0] + 1;\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-number-of-copy-arrays","has_notes":false,"flag_type":1,"frontend_id":283},{"id":1559266681,"question_id":3785,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740840693,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1559266681/","is_pending":"Not Pending","title":"Find the Number of Copy Arrays","memory":"89 MB","code":"class Solution {\\n    public int countArrays(int[] original, int[][] bounds) {\\n        int n = original.length;\\n        int[][] dp = new int[n][2];\\n        \\n        for (int i = 0; i < n; i++) {\\n            dp[i][0] = bounds[i][0];\\n            dp[i][1] = bounds[i][1];\\n        }\\n        \\n        for (int i = 1; i < n; i++) {\\n            int diff = original[i] - original[i - 1];\\n            int newLower = dp[i - 1][0] + diff;\\n            int newUpper = dp[i - 1][1] + diff;\\n            dp[i][0] = Math.max(dp[i][0], newLower);\\n            dp[i][1] = Math.min(dp[i][1], newUpper);\\n            if (dp[i][0] > dp[i][1]) {\\n                return 0;\\n            }\\n        }\\n        \\n        return dp[n - 1][1] - dp[n - 1][0] + 1;\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-number-of-copy-arrays","has_notes":false,"flag_type":1,"frontend_id":282},{"id":1559258325,"question_id":3785,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740840433,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1559258325/","is_pending":"Not Pending","title":"Find the Number of Copy Arrays","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int countArrays(int[] original, int[][] bounds) {\\n        int n = original.length;\\n        long m = 1000000007;\\n        long[] arr = new long[n];\\n        Arrays.fill(arr, 0);\\n        arr[0] = bounds[0][1] - bounds[0][0] + 1;\\n        for (int i = 1; i < n; i++) \\n        {\\n            long[] brr = new long[n];\\n            Arrays.fill(brr, 0);\\n            int diff = original[i] - original[i - 1];\\n            int min = bounds[i][0], max = bounds[i][1];\\n            int p = bounds[i - 1][0], pm = bounds[i - 1][1];\\n            int n1 = Math.max(p + diff, min);\\n            int n2 = Math.min(pm + diff, max);\\n            if (n1 > n2) return 0;\\n            brr[i] = (n2 - n1 + 1) % m;\\n            arr[i] = brr[i];\\n        }\\n        return (int) arr[n - 1];\\n    }\\n}\\n","compare_resulttitle_slug":"find-the-number-of-copy-arrays","has_notes":false,"flag_type":1,"frontend_id":281},{"id":1559227414,"question_id":3778,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740839572,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1559227414/","is_pending":"Not Pending","title":"Transform Array by Parity","memory":"45 MB","code":"class Solution {\\n    public int[] transformArray(int[] nums) \\n    {\\n        int n=nums.length;\\n        for(int i=0;i<n;i++)\\n            {\\n                if(nums[i]%2==0)\\n\\n                {\\n                    nums[i]=0;\\n                }\\n                else\\n                {\\n                    nums[i]=1;\\n                }\\n            }\\n        Arrays.sort(nums);\\n        return nums;\\n    }\\n}","compare_resulttitle_slug":"transform-array-by-parity","has_notes":false,"flag_type":1,"frontend_id":280},{"id":1559196082,"question_id":389,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740837729,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1559196082/","is_pending":"Not Pending","title":"Find the Difference","memory":"42 MB","code":"class Solution {\\n    public char findTheDifference(String s, String t) {\\n        HashMap<Character,Integer> m=new HashMap<>();\\n        char f=\'a\';\\n        for(int i=0;i<s.length();i++){\\n            if(m.containsKey(s.charAt(i))){\\n                m.put(s.charAt(i),m.get(s.charAt(i))+1);\\n            }\\n            else{\\n                m.put(s.charAt(i),1);\\n            }\\n        }\\n        for(int i=0;i<t.length();i++){\\n            char c=t.charAt(i);\\n            if(m.containsKey(c)){\\n                if(m.get(c)>0){\\n                  m.put(c,m.get(c)-1);\\n                }\\n                else{\\n                    f=c;  \\n                }\\n            }\\n            else{\\n              f=c;  \\n            }\\n        }\\n       return f ;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-difference","has_notes":false,"flag_type":1,"frontend_id":279},{"id":1559195939,"question_id":389,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740837719,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1559195939/","is_pending":"Not Pending","title":"Find the Difference","memory":"N/A","code":"class Solution {\\n    public char findTheDifference(String s, String t) {\\n        HashMap<Character,Integer> m=new HashMap<>();\\n        char f=\'a\';\\n        for(int i=0;i<s.length();i++){\\n            if(m.containsKey(s.charAt(i))){\\n                map.put(s.charAt(i),m.get(s.charAt(i))+1);\\n            }\\n            else{\\n                m.put(s.charAt(i),1);\\n            }\\n        }\\n        for(int i=0;i<t.length();i++){\\n            char c=t.charAt(i);\\n            if(m.containsKey(c)){\\n                if(m.get(c)>0){\\n                  m.put(c,m.get(c)-1);\\n                }\\n                else{\\n                    f=c;  \\n                }\\n            }\\n            else{\\n              f=c;  \\n            }\\n        }\\n       return f ;\\n    }\\n}","compare_result":null,"title_slug":"find-the-difference","has_notes":false,"flag_type":1,"frontend_id":278},{"id":1559184991,"question_id":387,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740836950,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1559184991/","is_pending":"Not Pending","title":"First Unique Character in a String","memory":"45.3 MB","code":"class Solution {\\n    public int firstUniqChar(String s)\\n     {\\n        int n=s.length();\\n        HashMap<Character,Integer> h=new HashMap<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            h.put(s.charAt(i),h.getOrDefault(s.charAt(i),0)+1);\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(h.get(s.charAt(i))==1)\\n            {\\n                return i;\\n            }\\n        }\\n        return -1;\\n\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"first-unique-character-in-a-string","has_notes":false,"flag_type":1,"frontend_id":277},{"id":1559173464,"question_id":350,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740836103,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1559173464/","is_pending":"Not Pending","title":"Intersection of Two Arrays II","memory":"43.8 MB","code":"class Solution {\\n    public int[] intersect(int[] nums1, int[] nums2) \\n    {\\n     HashMap<Integer, Integer> map = new HashMap<>();\\n    ArrayList<Integer> list = new ArrayList<>();\\n    for( int num: nums1){\\n        map.put(num,map.getOrDefault(num, 0) + 1);\\n    }\\n    for(int num: nums2){\\n        if(map.getOrDefault(num, 0) > 0){\\n            list.add(num);\\n            map.put(num, map.get(num)-1);        \\n        }\\n    }\\n    int r[] = new int[list.size()];\\n    int i = 0;\\n    for(int num: list){\\n        r[i++] = num;\\n    }\\n    return r;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"intersection-of-two-arrays-ii","has_notes":false,"flag_type":1,"frontend_id":276},{"id":1559159283,"question_id":2551,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1740835055,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1559159283/","is_pending":"Not Pending","title":"Apply Operations to an Array","memory":"43.6 MB","code":"class Solution {\\n    public int[] applyOperations(int[] nums) \\n    {\\n        int n=nums.length;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n            {\\n                nums[i]*=2;\\n                nums[i+1]=0;\\n            }\\n        }\\n        int l=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                int t=nums[i];\\n                nums[i]=nums[l];\\n                nums[l]=t;\\n                l++;\\n            }\\n        }\\n        return nums;\\n    }\\n}","compare_result":"111111111111111111111111111111111111","title_slug":"apply-operations-to-an-array","has_notes":false,"flag_type":1,"frontend_id":275},{"id":1558412816,"question_id":448,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740764526,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1558412816/","is_pending":"Not Pending","title":"Find All Numbers Disappeared in an Array","memory":"61 MB","code":"class Solution {\\n    public List<Integer> findDisappearedNumbers(int[] nums) \\n    {\\n        int n=nums.length;\\n        ArrayList<Integer> al=new ArrayList<>();\\n        HashSet<Integer> h=new HashSet<>();\\n        for(int i:nums)\\n        {\\n            h.add(i);\\n        }\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(!h.contains(i))\\n            {\\n                al.add(i);\\n            }\\n        }\\n        return al;\\n    }\\n}","compare_result":"11111111111111111111111111111111111","title_slug":"find-all-numbers-disappeared-in-an-array","has_notes":false,"flag_type":1,"frontend_id":274},{"id":1558393890,"question_id":442,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740763406,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/1558393890/","is_pending":"Not Pending","title":"Find All Duplicates in an Array","memory":"59.1 MB","code":"class Solution {\\n    public List<Integer> findDuplicates(int[] nums) \\n    {\\n        int n=nums.length;\\n       ArrayList<Integer> al=new ArrayList<>();\\n       HashMap<Integer,Integer> h=new HashMap<>();\\n       for(int i=0;i<n;i++)\\n       {\\n         h.put(nums[i],h.getOrDefault(nums[i],0)+1);\\n       } \\n       for(Map.Entry<Integer,Integer> e:h.entrySet())\\n       {\\n        if(e.getValue()>1)\\n        {\\n            al.add(e.getKey());\\n        }\\n       }\\n       return al;\\n    }\\n}","compare_result":"11111111111111111111111111111","title_slug":"find-all-duplicates-in-an-array","has_notes":false,"flag_type":1,"frontend_id":273},{"id":1557703842,"question_id":1170,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740706696,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1557703842/","is_pending":"Not Pending","title":"Shortest Common Supersequence ","memory":"50.4 MB","code":"class Solution {\\n    public String shortestCommonSupersequence(String str1, String str2) {\\n        int [][] dp= new int [str1.length()+1][str2.length()+1];\\n\\n        for(int i=0;i<dp.length;i++){\\n            for(int j=0;j<dp[0].length;j++){\\n                if(i==0 || j==0 ){\\n                    dp[i][j]=0;\\n                } \\n                else if(str1.charAt(i-1)==str2.charAt(j-1)){\\n                    dp[i][j]=dp[i-1][j-1]+1;\\n                }\\n                else{\\n                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);\\n                }\\n            }\\n        }\\n\\n        int row=dp.length-1;\\n        int col=dp[0].length-1;\\n        StringBuilder s=new StringBuilder(\\"\\");\\n        while(row>0 && col>0){\\n            if(str1.charAt(row-1)==str2.charAt(col-1)){\\n                s.append(str1.charAt(row-1));\\n                row--;\\n                col--;\\n            }\\n            else if(dp[row-1][col]>dp[row][col-1]){\\n                \\n                s.append(str1.charAt(row-1));\\n                row--;\\n            }\\n            else{\\n                s.append(str2.charAt(col-1));\\n                col--;\\n            }\\n        }\\n\\n        while(row>0){\\n            \\n            s.append(str1.charAt(row-1));\\n            row--;\\n        }\\n        while(col>0){\\n            \\n            s.append(str2.charAt(col-1));\\n            col--;\\n        }\\n        return s.reverse().toString();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"shortest-common-supersequence","has_notes":false,"flag_type":1,"frontend_id":272},{"id":1557142639,"question_id":905,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740661668,"status":10,"status_display":"Accepted","runtime":"170 ms","url":"/submissions/detail/1557142639/","is_pending":"Not Pending","title":"Length of Longest Fibonacci Subsequence","memory":"45.5 MB","code":"class Solution {\\n\\n    public int lenLongestFibSubseq(int[] arr) {\\n        int n = arr.length;\\n        Set<Integer> numSet = new HashSet<>();\\n        for (int num : arr) {\\n            numSet.add(num);\\n        }\\n        int m = 0;\\n        for (int start = 0; start < n; ++start) {\\n            for (int next = start + 1; next < n; ++next) {\\n                int prev = arr[next];\\n                int curr = arr[start] + arr[next];\\n                int len = 2;\\n                while (numSet.contains(curr)) {\\n                    int temp = curr;\\n                    curr += prev;\\n                    prev = temp;\\n                    m = Math.max(m, ++len);\\n                }\\n            }\\n        }\\n\\n        return m;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"length-of-longest-fibonacci-subsequence","has_notes":false,"flag_type":1,"frontend_id":271}],"has_next":true,"last_key":""}'
2025-08-25 23:31:30,150 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:30,152 [INFO] __main__.py:245 - Writing merge-two-2d-arrays-by-summing-values/2025-03-02 10.39.31 - Accepted - runtime 1ms - memory 45.3MB.java
2025-08-25 23:31:30,154 [INFO] __main__.py:188 - Skipping longest-palindromic-subsequence-after-at-most-k-operations 2025-03-02 08.48.37 because its status is 'Wrong Answer'
2025-08-25 23:31:30,154 [INFO] __main__.py:188 - Skipping longest-palindromic-subsequence-after-at-most-k-operations 2025-03-02 08.44.10 because its status is 'Wrong Answer'
2025-08-25 23:31:30,154 [INFO] __main__.py:188 - Skipping longest-palindromic-subsequence-after-at-most-k-operations 2025-03-02 08.32.23 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:30,706 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:30,708 [INFO] __main__.py:245 - Writing find-the-largest-almost-missing-integer/2025-03-02 08.15.56 - Accepted - runtime 6ms - memory 44.6MB.java
2025-08-25 23:31:31,042 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:31,042 [INFO] __main__.py:245 - Writing most-common-word/2025-03-02 01.15.11 - Accepted - runtime 15ms - memory 43.3MB.java
2025-08-25 23:31:31,534 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:31,539 [INFO] __main__.py:245 - Writing uncommon-words-from-two-sentences/2025-03-02 01.03.09 - Accepted - runtime 2ms - memory 42.2MB.java
2025-08-25 23:31:32,046 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:32,048 [INFO] __main__.py:245 - Writing find-the-number-of-copy-arrays/2025-03-01 20.23.49 - Accepted - runtime 15ms - memory 88.7MB.java
2025-08-25 23:31:32,050 [INFO] __main__.py:208 - Skipping find-the-number-of-copy-arrays 2025-03-01 20.21.33 in java because a more recent submission has already been exported
2025-08-25 23:31:32,050 [INFO] __main__.py:188 - Skipping find-the-number-of-copy-arrays 2025-03-01 20.17.13 because its status is 'Wrong Answer'
2025-08-25 23:31:32,393 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:32,396 [INFO] __main__.py:245 - Writing transform-array-by-parity/2025-03-01 20.02.52 - Accepted - runtime 2ms - memory 45MB.java
2025-08-25 23:31:32,725 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:32,736 [INFO] __main__.py:245 - Writing find-the-difference/2025-03-01 19.32.09 - Accepted - runtime 15ms - memory 42MB.java
2025-08-25 23:31:32,738 [INFO] __main__.py:188 - Skipping find-the-difference 2025-03-01 19.31.59 because its status is 'Compile Error'
2025-08-25 23:31:33,067 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:33,069 [INFO] __main__.py:245 - Writing first-unique-character-in-a-string/2025-03-01 19.19.10 - Accepted - runtime 34ms - memory 45.3MB.java
2025-08-25 23:31:33,406 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:33,408 [INFO] __main__.py:245 - Writing intersection-of-two-arrays-ii/2025-03-01 19.05.03 - Accepted - runtime 3ms - memory 43.8MB.java
2025-08-25 23:31:33,764 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:33,768 [INFO] __main__.py:245 - Writing apply-operations-to-an-array/2025-03-01 18.47.35 - Accepted - runtime 1ms - memory 43.6MB.java
2025-08-25 23:31:34,182 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:34,187 [INFO] __main__.py:245 - Writing find-all-numbers-disappeared-in-an-array/2025-02-28 23.12.06 - Accepted - runtime 20ms - memory 61MB.java
2025-08-25 23:31:35,215 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:35,217 [INFO] __main__.py:245 - Writing find-all-duplicates-in-an-array/2025-02-28 22.53.26 - Accepted - runtime 29ms - memory 59.1MB.java
2025-08-25 23:31:35,545 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:35,550 [INFO] __main__.py:245 - Writing shortest-common-supersequence/2025-02-28 07.08.16 - Accepted - runtime 23ms - memory 50.4MB.java
2025-08-25 23:31:35,876 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:35,878 [INFO] __main__.py:245 - Writing length-of-longest-fibonacci-subsequence/2025-02-27 18.37.48 - Accepted - runtime 170ms - memory 45.5MB.java
2025-08-25 23:31:40,881 [DEBUG] leetcode.py:150 - Exporting submissions from 380 to 400
2025-08-25 23:31:41,518 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=380&limit=20 HTTP/11" 200 None
2025-08-25 23:31:41,536 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1556604713,"question_id":49,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740616118,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1556604713/","is_pending":"Not Pending","title":"Group Anagrams","memory":"48 MB","code":"class Solution \\n{\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        Map<String, List<String>> m = new HashMap<>();\\n        \\n        for (String word : strs) {\\n            char[] chars = word.toCharArray();\\n            Arrays.sort(chars);\\n            String sortedWord = new String(chars);\\n            \\n            if (!m.containsKey(sortedWord)) {\\n                m.put(sortedWord, new ArrayList<>());\\n            }\\n            \\n            m.get(sortedWord).add(word);\\n        }\\n        \\n        return new ArrayList<>(m.values());\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1,"frontend_id":270},{"id":1556418293,"question_id":899,"lang":"java","lang_name":"Java","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740596429,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1556418293/","is_pending":"Not Pending","title":"Binary Gap","memory":"41.1 MB","code":"class Solution {\\n    public int binaryGap(int n) \\n    {\\n        char arr[]=Integer.toBinaryString(n).toCharArray();\\n        List<Integer> l=new ArrayList<>();\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]==\'1\') l.add(i);\\n        }\\n        if(l.size()==1) return 0;\\n        int a=0;\\n        for(int i=0;i<l.size()-1;i++)\\n        {\\n           a= Math.max(a,l.get(i+1)-l.get(i));\\n        }\\n      return a;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-gap","has_notes":false,"flag_type":1,"frontend_id":269},{"id":1556071327,"question_id":1849,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740574628,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1556071327/","is_pending":"Not Pending","title":"Maximum Absolute Sum of Any Subarray","memory":"57 MB","code":"class Solution {\\n    public int maxAbsoluteSum(int[] nums) \\n    {\\n        int max=Integer.MIN_VALUE;\\n        int min=Integer.MAX_VALUE;\\n        int c1=0,c2=0;\\n        for(int i:nums)\\n        {\\n            c1+=i;\\n            c2+=i;\\n            max=Math.max(c1,max);\\n            min=Math.min(c2,min);\\n            if(c1<0) c1=0;\\n            if(c2>0) c2=0;\\n        }\\n        min=Math.abs(min);\\n        return Math.max(min,max);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-absolute-sum-of-any-subarray","has_notes":false,"flag_type":1,"frontend_id":268},{"id":1555270416,"question_id":290,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740507694,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1555270416/","is_pending":"Not Pending","title":"Word Pattern","memory":"41.3 MB","code":"class Solution {\\n    public boolean wordPattern(String pattern, String s) \\n    {\\n        String words[]=s.split(\\" \\");\\n        if(pattern.length()!=words.length) return false;\\n        HashMap<Character,String> h1=new HashMap<>();\\n        HashSet<String> h2=new HashSet<>();\\n        for(int i=0;i<pattern.length();i++)\\n        {\\n            char c=pattern.charAt(i);\\n            String w=words[i];\\n            if(h1.containsKey(c))\\n            {\\n                if(!h1.get(c).equals(w))\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                if(h2.contains(w))\\n                {\\n                    return false;\\n                }\\n            }\\n            h1.put(c,w);\\n            h2.add(w);\\n        }\\n      return true;       \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"word-pattern","has_notes":false,"flag_type":1,"frontend_id":267},{"id":1555269431,"question_id":290,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740507641,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1555269431/","is_pending":"Not Pending","title":"Word Pattern","memory":"N/A","code":"class Solution {\\n    public boolean wordPattern(String pattern, String s) \\n    {\\n        String words[]=s.split(\\" \\");\\n        HashMap<Character,String> h1=new HashMap<>();\\n        HashSet<String> h2=new HashSet<>();\\n        for(int i=0;i<pattern.length();i++)\\n        {\\n            char c=pattern.charAt(i);\\n            String w=words[i];\\n            if(h1.containsKey(c))\\n            {\\n                if(!h1.get(c).equals(w))\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                if(h2.contains(w))\\n                {\\n                    return false;\\n                }\\n            }\\n            h1.put(c,w);\\n            h2.add(w);\\n        }\\n      return true;       \\n    }\\n}","compare_result":"11111111111111110111000000000000000000000000","title_slug":"word-pattern","has_notes":false,"flag_type":1,"frontend_id":266},{"id":1554742011,"question_id":1786,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740472163,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1554742011/","is_pending":"Not Pending","title":"Count the Number of Consistent Strings","memory":"45.4 MB","code":"class Solution {\\n    public int countConsistentStrings(String a, String[] words) {\\n        HashSet<Character> s=new HashSet<>();\\n        for(int i=0;i<a.length();i++) {\\n            s.add(a.charAt(i));\\n        }\\n        int co=0,n=words.length;\\n        for(int i=0;i<words.length;i++) {\\n            char c[]=words[i].toCharArray();\\n            for(int j=0;j<c.length;j++) {\\n                if(!s.contains(c[j])) {\\n                    co++;\\n                    break;\\n                }                    \\n            }\\n        }\\n        return n-co;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-the-number-of-consistent-strings","has_notes":false,"flag_type":1,"frontend_id":265},{"id":1554658738,"question_id":11,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740466012,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1554658738/","is_pending":"Not Pending","title":"Container With Most Water","memory":"57.9 MB","code":"class Solution {\\n    public int maxArea(int[] height) {\\n        int m = 0;\\n        int l = 0;\\n        int r = height.length - 1;\\n\\n        while (l < r) {\\n            m = Math.max(m, (r - l) * Math.min(height[l], height[r]));\\n\\n            if (height[l] < height[r]) {\\n                l++;\\n            } else {\\n                r--;\\n            }\\n        }\\n\\n        return m;        \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"container-with-most-water","has_notes":false,"flag_type":1,"frontend_id":264},{"id":1554559581,"question_id":374,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740459993,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1554559581/","is_pending":"Not Pending","title":"Guess Number Higher or Lower","memory":"40.1 MB","code":"/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) {\\n        int low = 0;\\n        int high = n;\\n        int mid = 0;\\n\\n        while (low <= high) {\\n            mid = low + (high - low) / 2;\\n\\n            if (guess(mid) == 0)\\n                return mid;\\n            if (guess(mid) == -1)\\n                high = mid - 1;\\n            if (guess(mid) == 1)\\n                low = mid + 1;\\n        }\\n\\n        return -1;\\n    }\\n}","compare_result":"1111111111111111111111111","title_slug":"guess-number-higher-or-lower","has_notes":false,"flag_type":1,"frontend_id":263},{"id":1554558354,"question_id":1528,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740459916,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1554558354/","is_pending":"Not Pending","title":"Kids With the Greatest Number of Candies","memory":"42.3 MB","code":"class Solution {\\n    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {\\n        int m = 0;\\n        for (int candy : candies) {\\n            m = Math.max(m, candy);\\n        }    \\n        List<Boolean> result = new ArrayList<>();    \\n        for (int candy : candies) {\\n            if (candy + extraCandies >= m) {\\n                result.add(true);\\n            } else {\\n                result.add(false);\\n            }\\n        }   \\n        return result;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kids-with-the-greatest-number-of-candies","has_notes":false,"flag_type":1,"frontend_id":262},{"id":1554553592,"question_id":1894,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740459624,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1554553592/","is_pending":"Not Pending","title":"Merge Strings Alternately","memory":"41.8 MB","code":"class Solution {\\n    public String mergeAlternately(String word1, String word2) {\\n        StringBuilder m = new StringBuilder();\\n        int ml = Math.max(word1.length(), word2.length());\\n\\n        for (int i = 0; i < ml; i++) {\\n            if (i < word1.length()) {\\n                m.append(word1.charAt(i));\\n            }\\n            if (i < word2.length()) {\\n                m.append(word2.charAt(i));\\n            }\\n        }\\n        return m.toString();        \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-strings-alternately","has_notes":false,"flag_type":1,"frontend_id":261},{"id":1554547895,"question_id":605,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740459257,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1554547895/","is_pending":"Not Pending","title":"Can Place Flowers","memory":"45.6 MB","code":"class Solution {\\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\\n        for (int i = 0; i < flowerbed.length; i++) {\\n            boolean l= i == 0 || flowerbed[i - 1] == 0;\\n            boolean r = i == flowerbed.length - 1 || flowerbed[i + 1] == 0;    \\n            if (l && r && flowerbed[i] == 0) {\\n                flowerbed[i] = 1;\\n                n--;\\n            }\\n        }\\n        return n <= 0;        \\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"can-place-flowers","has_notes":false,"flag_type":1,"frontend_id":260},{"id":1554413810,"question_id":1777,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740448440,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1554413810/","is_pending":"Not Pending","title":"Determine if Two Strings Are Close","memory":"45.4 MB","code":"class Solution {\\n    public boolean closeStrings(String word1, String word2) {\\n        int[] f1 = new int[26];\\n        int[] f2 = new int[26];\\n        for (char ch : word1.toCharArray()) {\\n            f1[ch - \'a\']++;\\n        }\\n        for (char ch : word2.toCharArray()) {\\n            f2[ch - \'a\']++;\\n        }\\n        for (int i = 0; i < 26; i++) {\\n            if ((f1[i] == 0 && f2[i] != 0) || (f1[i] != 0 && f2[i] == 0)) {\\n                return false;\\n            }\\n        }\\n        Arrays.sort(f1);\\n        Arrays.sort(f2);\\n        for (int i = 0; i < 26; i++) {\\n            if (f1[i] != f2[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"determine-if-two-strings-are-close","has_notes":false,"flag_type":1,"frontend_id":259},{"id":1554399812,"question_id":345,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740446984,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1554399812/","is_pending":"Not Pending","title":"Reverse Vowels of a String","memory":"44.6 MB","code":"class Solution {\\n    public String reverseVowels(String s) \\n    {\\n      char arr[]=s.toCharArray();\\n      HashSet<Character> h=new HashSet<>(Arrays.asList(\'a\',\'e\',\'i\',\'o\',\'u\',\'A\',\'E\',\'I\',\'O\',\'U\'));\\n      int l=0,r=arr.length-1;\\n      while(l<r)\\n      {\\n        while(l<r&&!h.contains(arr[l]))\\n        {\\n            l++;\\n        }\\n        while(l<r&&!h.contains(arr[r]))\\n        {\\n            r--;\\n        }\\n        if(l<r)\\n        {\\n            char temp=arr[l];\\n            arr[l]=arr[r];\\n            arr[r]=temp;\\n            l++;\\n            r--;\\n        }\\n      }\\n      return new String(arr);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-vowels-of-a-string","has_notes":false,"flag_type":1,"frontend_id":258},{"id":1554380134,"question_id":1631,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740444813,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1554380134/","is_pending":"Not Pending","title":"Number of Sub-arrays With Odd Sum","memory":"57.8 MB","code":"class Solution {\\n    public int numOfSubarrays(int[] arr) \\n    {\\n       int s=0,e=1,o=0,r=0,mod=1000000007;\\n       for(int n:arr)\\n       {\\n         s+=n;\\n         if(s%2==0)\\n         {\\n            e++;\\n            r=(r+o)%mod;\\n         }\\n         else\\n         {\\n            o++;\\n            r=(r+e)%mod;\\n         }\\n       }\\n      return r;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-sub-arrays-with-odd-sum","has_notes":false,"flag_type":1,"frontend_id":257},{"id":1553942033,"question_id":2564,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740410748,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1553942033/","is_pending":"Not Pending","title":"Most Profitable Path in a Tree","memory":"109.5 MB","code":"class Solution {\\n    List<List<Integer>>adj;\\n    int[] distFromBob;\\n    int n;\\n\\n    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {\\n\\n    adj = new ArrayList<>();\\n    n = amount.length;\\n\\n    distFromBob = new int[n];\\n\\n    for(int i=0; i<n; i++)\\n    adj.add(new ArrayList());\\n\\n    for(int [] d : edges)\\n    {\\n     adj.get(d[0]).add(d[1]);\\n     adj.get(d[1]).add(d[0]);   \\n    } \\n\\n    return util(0, 0, 0, bob, amount);   \\n    }\\n\\n    public int util(int src, int parent, int time, int bob,  int amount[])\\n    {\\n     int maxIncome = 0;\\n     int maxChild = Integer.MIN_VALUE;\\n\\n     if(src==bob)\\n     distFromBob[src] = 0;\\n     else\\n     distFromBob[src] = n;\\n     \\n    for(int node : adj.get(src))\\n    {\\n     if(node!=parent)\\n     {\\n     maxChild = Math.max(maxChild, util(node, src, time+1, bob, amount));\\n     distFromBob[src] = Math.min(distFromBob[src], distFromBob[node]+1);\\n     }  \\n    }\\n\\n    if(distFromBob[src]>time)\\n    maxIncome += amount[src];\\n    else if(distFromBob[src]==time)\\n    maxIncome += amount[src]/2;\\n    \\n    return maxChild == Integer.MIN_VALUE ? maxIncome : maxIncome + maxChild;\\n    }\\n}","compare_result":"1111111111111111111111111111111","title_slug":"most-profitable-path-in-a-tree","has_notes":false,"flag_type":1,"frontend_id":256},{"id":1553132113,"question_id":205,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740339885,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1553132113/","is_pending":"Not Pending","title":"Isomorphic Strings","memory":"42.4 MB","code":"class Solution {\\n    public boolean isIsomorphic(String s, String t) \\n    {\\n        HashMap<Character,Integer> hs=new HashMap<>();\\n        HashMap<Character,Integer> ht=new HashMap<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(!hs.containsKey(s.charAt(i)))\\n            {\\n                hs.put(s.charAt(i),i);\\n            }\\n            if(!ht.containsKey(t.charAt(i)))\\n            {\\n                ht.put(t.charAt(i),i);\\n            }\\n            if(!hs.get(s.charAt(i)).equals(ht.get(t.charAt(i))))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"isomorphic-strings","has_notes":false,"flag_type":1,"frontend_id":255},{"id":1553123074,"question_id":67,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740339145,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1553123074/","is_pending":"Not Pending","title":"Add Binary","memory":"42.1 MB","code":"class Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder result = new StringBuilder();\\n        int i = a.length() - 1, j = b.length() - 1, carry = 0;\\n        while (i >= 0 || j >= 0 || carry == 1) {\\n            int total = carry;\\n            if (i >= 0) total += a.charAt(i--) - \'0\';\\n            if (j >= 0) total += b.charAt(j--) - \'0\';\\n            result.append(total % 2);\\n            carry = total / 2;\\n        }\\n        return result.reverse().toString();\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-binary","has_notes":false,"flag_type":1,"frontend_id":254},{"id":1553042343,"question_id":18,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740333500,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1553042343/","is_pending":"Not Pending","title":"4Sum","memory":"44.2 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public List<List<Integer>> fourSum(int[] nums, int target) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        int n = nums.length;\\n        if (n < 4) return result;\\n        Arrays.sort(nums);\\n        for (int i = 0; i < n - 3; i++) {\\n            if (i > 0 && nums[i] == nums[i - 1]) continue; \\n            for (int j = i + 1; j < n - 2; j++) {\\n                if (j > i + 1 && nums[j] == nums[j - 1]) continue;\\n                int left = j + 1, right = n - 1;\\n                while (left < right) {\\n                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];\\n                    if (sum == target) {\\n                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));\\n                        while (left < right && nums[left] == nums[left + 1]) left++;\\n                        while (left < right && nums[right] == nums[right - 1]) right--;\\n                        left++;\\n                        right--;\\n                    } else if (sum < target) {\\n                        left++;\\n                    } else {\\n                        right--;\\n                    }\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"4sum","has_notes":false,"flag_type":1,"frontend_id":253},{"id":1553039904,"question_id":18,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740333355,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1553039904/","is_pending":"Not Pending","title":"4Sum","memory":"N/A","code":"class Solution{\\n    public List<List<Integer>> fourSum(int[] nums, int target){\\n        List<List<Integer>> a = new ArrayList<>();\\n        Set<List<Integer>> s = new HashSet<>();\\n        int n = nums.length;\\n        for (int i = 0; i < n - 3; i++) {\\n            for (int j = i + 1; j < n; j++) {\\n                for (int k = j + 1; k < n; k++) {\\n                    for (int l = k + 1; l < n; l++) {\\n                        int sum = nums[i] + nums[j] + nums[k] + nums[l];\\n                        if (sum == target) {\\n                            List<Integer> lst = new ArrayList<>();\\n                            lst.addAll(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));\\n                            Collections.sort(lst);\\n                            s.add(lst);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        for (List<Integer> list : s) {\\n            a.add(list);\\n        }\\n        return a;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000","title_slug":"4sum","has_notes":false,"flag_type":1,"frontend_id":252},{"id":1552986349,"question_id":16,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740330115,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1552986349/","is_pending":"Not Pending","title":"3Sum Closest","memory":"43.1 MB","code":"class Solution {\\n    public int threeSumClosest(int[] nums, int target) {\\n        Arrays.sort(nums);\\n        int ans=0;\\n        int diff = Integer.MAX_VALUE;\\n        for(int i = 0;i<nums.length-2;i++){\\n            int cur = nums[i];\\n            int s = i+1;\\n            int e = nums.length-1;\\n            while(s<e){\\n                int sum = nums[s]+nums[e];    \\n                if(Math.abs(target-(sum+cur))<diff){\\n                    diff = Math.abs(target-(sum+cur));\\n                    ans = sum+cur;\\n                }\\n                if(sum>target-cur){\\n                    e--;\\n                }else{\\n                    s++;\\n                }               \\n            }\\n        }\\n        return ans;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum-closest","has_notes":false,"flag_type":1,"frontend_id":251}],"has_next":true,"last_key":""}'
2025-08-25 23:31:41,870 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:41,876 [INFO] __main__.py:245 - Writing group-anagrams/2025-02-27 05.58.38 - Accepted - runtime 6ms - memory 48MB.java
2025-08-25 23:31:42,220 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:42,223 [INFO] __main__.py:245 - Writing binary-gap/2025-02-27 00.30.29 - Accepted - runtime 1ms - memory 41.1MB.java
2025-08-25 23:31:42,580 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:42,582 [INFO] __main__.py:245 - Writing maximum-absolute-sum-of-any-subarray/2025-02-26 18.27.08 - Accepted - runtime 4ms - memory 57MB.java
2025-08-25 23:31:43,504 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:43,504 [INFO] __main__.py:245 - Writing word-pattern/2025-02-25 23.51.34 - Accepted - runtime 1ms - memory 41.3MB.java
2025-08-25 23:31:43,509 [INFO] __main__.py:188 - Skipping word-pattern 2025-02-25 23.50.41 because its status is 'Wrong Answer'
2025-08-25 23:31:43,906 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:43,910 [INFO] __main__.py:245 - Writing count-the-number-of-consistent-strings/2025-02-25 13.59.23 - Accepted - runtime 11ms - memory 45.4MB.java
2025-08-25 23:31:44,236 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:44,236 [INFO] __main__.py:245 - Writing container-with-most-water/2025-02-25 12.16.52 - Accepted - runtime 5ms - memory 57.9MB.java
2025-08-25 23:31:44,644 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:44,646 [INFO] __main__.py:245 - Writing guess-number-higher-or-lower/2025-02-25 10.36.33 - Accepted - runtime 0ms - memory 40.1MB.java
2025-08-25 23:31:45,025 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:45,093 [INFO] __main__.py:245 - Writing kids-with-the-greatest-number-of-candies/2025-02-25 10.35.16 - Accepted - runtime 1ms - memory 42.3MB.java
2025-08-25 23:31:45,658 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:45,660 [INFO] __main__.py:245 - Writing merge-strings-alternately/2025-02-25 10.30.24 - Accepted - runtime 1ms - memory 41.8MB.java
2025-08-25 23:31:46,163 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:46,169 [INFO] __main__.py:245 - Writing can-place-flowers/2025-02-25 10.24.17 - Accepted - runtime 1ms - memory 45.6MB.java
2025-08-25 23:31:46,560 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:46,564 [INFO] __main__.py:245 - Writing determine-if-two-strings-are-close/2025-02-25 07.24.00 - Accepted - runtime 10ms - memory 45.4MB.java
2025-08-25 23:31:46,905 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:46,909 [INFO] __main__.py:245 - Writing reverse-vowels-of-a-string/2025-02-25 06.59.44 - Accepted - runtime 4ms - memory 44.6MB.java
2025-08-25 23:31:47,297 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:47,297 [INFO] __main__.py:245 - Writing number-of-sub-arrays-with-odd-sum/2025-02-25 06.23.33 - Accepted - runtime 7ms - memory 57.8MB.java
2025-08-25 23:31:47,616 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:47,622 [INFO] __main__.py:245 - Writing most-profitable-path-in-a-tree/2025-02-24 20.55.48 - Accepted - runtime 40ms - memory 109.5MB.java
2025-08-25 23:31:48,112 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:48,114 [INFO] __main__.py:245 - Writing isomorphic-strings/2025-02-24 01.14.45 - Accepted - runtime 17ms - memory 42.4MB.java
2025-08-25 23:31:48,430 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:48,446 [INFO] __main__.py:245 - Writing add-binary/2025-02-24 01.02.25 - Accepted - runtime 1ms - memory 42.1MB.java
2025-08-25 23:31:48,947 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:48,949 [INFO] __main__.py:245 - Writing 4sum/2025-02-23 23.28.20 - Accepted - runtime 19ms - memory 44.2MB.java
2025-08-25 23:31:48,952 [INFO] __main__.py:188 - Skipping 4sum 2025-02-23 23.25.55 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:49,289 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:49,292 [INFO] __main__.py:245 - Writing 3sum-closest/2025-02-23 22.31.55 - Accepted - runtime 14ms - memory 43.1MB.java
2025-08-25 23:31:54,295 [DEBUG] leetcode.py:150 - Exporting submissions from 400 to 420
2025-08-25 23:31:54,871 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=400&limit=20 HTTP/11" 200 None
2025-08-25 23:31:54,873 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1552968175,"question_id":15,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740328915,"status":10,"status_display":"Accepted","runtime":"850 ms","url":"/submissions/detail/1552968175/","is_pending":"Not Pending","title":"3Sum","memory":"52.5 MB","code":"class Solution {\\n    public List<List<Integer>> threeSum(int[] nums) \\n    {\\n        int t=0;\\n        Arrays.sort(nums);\\n        int n=nums.length;\\n        Set<List<Integer>> s=new HashSet<>();\\n        List<List<Integer>> li=new ArrayList<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            int l=i+1;\\n            int r=n-1;\\n            while(l<r)\\n            {\\n            int sum=nums[i]+nums[l]+nums[r];\\n            if(sum==t)\\n            {\\n                s.add(Arrays.asList(nums[i],nums[l],nums[r]));\\n                l++;\\n                r--;\\n            }\\n            if(sum<t)\\n            {\\n                l++;\\n            }\\n            else if(sum>t)\\n            {\\n                r--;\\n            }\\n        }\\n        }\\n        li.addAll(s);\\n        return li;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":250},{"id":1552562352,"question_id":43,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740294508,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1552562352/","is_pending":"Not Pending","title":"Multiply Strings","memory":"42.8 MB","code":"import java.math.BigInteger;\\nclass Solution {\\n    public String multiply(String num1, String num2) \\n    {\\n        BigInteger v=new BigInteger(num1);\\n        BigInteger v2=new BigInteger(num2);\\n        BigInteger v3=v.multiply(v2);\\n        String s=String.valueOf(v3);\\n        return s;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"multiply-strings","has_notes":false,"flag_type":1,"frontend_id":249},{"id":1552558292,"question_id":43,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740294209,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1552558292/","is_pending":"Not Pending","title":"Multiply Strings","memory":"N/A","code":"class Solution {\\n    public String multiply(String num1, String num2) \\n    {\\n        int v=Integer.parseInt(num1);\\n        int v2=Integer.parseInt(num2);\\n        int a=v*v2;\\n        String s=Integer.toString(a);\\n        return s;\\n    }\\n}","compare_result":"11111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000100111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"multiply-strings","has_notes":false,"flag_type":1,"frontend_id":248},{"id":1552553876,"question_id":50,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740293893,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1552553876/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"43.3 MB","code":"class Solution {\\n    public double myPow(double x, int n)\\n     {\\n        if(n==0) return 1;\\n        double a=1.0;\\n        long p=n;\\n        if(p<0)\\n        {\\n           x=1/x;\\n           p=-p;\\n        }\\n        while(p>0)\\n        {\\n            if(p%2==1)\\n            {\\n                a*=x;\\n            }\\n           x*=x;\\n           p/=2;\\n     }\\n     return a;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":247},{"id":1552550247,"question_id":50,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740293642,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1552550247/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution {\\n    public double myPow(double x, int n)\\n     {\\n        if(n==0) return 1;\\n        double a=1.0;\\n        long p=n;\\n        if(p<0)\\n        {\\n           x=1/x;\\n           p=-p;\\n        }\\n        for(int i=0;i<p;i++)\\n        {\\n            a=a*x;\\n        } \\n        return a;\\n     }\\n    }\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":246},{"id":1552546440,"question_id":50,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740293388,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1552546440/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution {\\n    public double myPow(double x, int n)\\n     {\\n        double a=1.0;\\n        long p=n;\\n        if(p<0)\\n        {\\n           x=1/x;\\n           p=-p;\\n        }\\n        for(int i=0;i<p;i++)\\n        {\\n            a=a*x;\\n        } \\n        return a;\\n     }\\n    }\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":245},{"id":1552478933,"question_id":925,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740288617,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1552478933/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Postorder Traversal","memory":"43.4 MB","code":"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode tree(int[] preorder, int p, int pree, int[] postorder, int poss, int pose){\\n        if(p> pree || poss> pose) return null;\\n        TreeNode r= new TreeNode(preorder[p]);\\n        if(p== pree) return r;\\n        int leftch= preorder[p+1];\\n        int leftpo= -1;\\n        for(int i=poss; i<=pose; i++){\\n            if(postorder[i]==leftch){\\n                leftpo=i;\\n                break;\\n            }\\n        }\\n        int lefts= leftpo-poss+1;\\n        r.left= tree(preorder, p+1, p+ lefts, postorder, poss, leftpo);\\n        r.right= tree(preorder, p+lefts+1, pree, postorder, leftpo+1, pose-1);\\n        return r;\\n    }\\n    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {\\n        TreeNode r= tree(preorder, 0, preorder.length-1, postorder, 0, postorder.length-1);\\n        return r;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-postorder-traversal","has_notes":false,"flag_type":1,"frontend_id":244},{"id":1552397862,"question_id":3764,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740282677,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/1552397862/","is_pending":"Not Pending","title":"Maximum Sum With at Most K Elements","memory":"78.7 MB","code":"class Solution {\\n    public long maxSum(int[][] grid, int[] limits, int k) {\\n        int n=grid.length;\\n        int m=grid[0].length;\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=0;i<n;i++){\\n            Arrays.sort(grid[i]);\\n            for(int j=m-1;j>=0;j--){\\n                if(limits[i]==0) break;\\n                list.add(grid[i][j]);\\n                limits[i]--;\\n                \\n            }\\n        }\\n        Collections.sort(list);\\n        long s=0;\\n        for(int i=list.size()-1;i>=0&&k>0;i--){\\n            s+=list.get(i);\\n            k--;\\n        }\\n        return s;\\n    }\\n}","compare_resulttitle_slug":"maximum-sum-with-at-most-k-elements","has_notes":false,"flag_type":1,"frontend_id":243},{"id":1552373769,"question_id":3764,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740281714,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1552373769/","is_pending":"Not Pending","title":"Maximum Sum With at Most K Elements","memory":"N/A","code":"class Solution {\\n    public long maxSum(int[][] grid, int[] limits, int k)\\n    {\\n        List<Integer> l = new ArrayList<>();   \\n        for (int i = 0; i < grid.length; i++) {\\n            Arrays.sort(grid[i]);\\n            int c= Math.min(limits[i], grid[i].length);\\n            for (int j = grid[i].length - 1; j >= grid[i].length - c; j--) {\\n                l.add(grid[i][j]);\\n            }\\n        } \\n         l.sort(Collections.reverseOrder());     \\n        int s= 0;\\n        for (int i = 0; i < Math.min(k,l.size());i++) {\\n            s+=l.get(i);\\n        } \\n        return s;\\n    }\\n}","compare_resulttitle_slug":"maximum-sum-with-at-most-k-elements","has_notes":false,"flag_type":1,"frontend_id":242},{"id":1552321984,"question_id":3768,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740279836,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1552321984/","is_pending":"Not Pending","title":"Check If Digits Are Equal in String After Operations I","memory":"42.2 MB","code":"class Solution {\\n    public boolean hasSameDigits(String s) \\n    {\\n        int n = s.length();\\n        int arr[] = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            arr[i] = s.charAt(i) - \'0\';\\n        }\\n        while (n > 2) {\\n            for (int i = 0; i < n - 1; i++) {\\n                arr[i] = (arr[i] + arr[i + 1]) % 10;\\n            }\\n            n--;\\n        }\\n        return arr[0] == arr[1];\\n    }\\n}","compare_resulttitle_slug":"check-if-digits-are-equal-in-string-after-operations-i","has_notes":false,"flag_type":1,"frontend_id":241},{"id":1552307899,"question_id":3768,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740279355,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1552307899/","is_pending":"Not Pending","title":"Check If Digits Are Equal in String After Operations I","memory":"41.9 MB","code":"class Solution {\\n    public boolean hasSameDigits(String s) \\n    {\\n       /*while (s.length() > 2) {\\n            StringBuilder newS = new StringBuilder();\\n            \\n            for (int i = 0; i < s.length() - 1; i++) {\\n                int digit1 = s.charAt(i) - \'0\'; \\n                int digit2 = s.charAt(i + 1) - \'0\';\\n                newS.append((digit1 + digit2) % 10); \\n            }\\n            \\n            s = newS.toString(); \\n        }\\n        return s.charAt(0) == s.charAt(1);\\n        */ int n = s.length();\\n        int arr[] = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            arr[i] = s.charAt(i) - \'0\';\\n        }\\n\\n        while (n > 2) {\\n            for (int i = 0; i < n - 1; i++) {\\n                arr[i] = (arr[i] + arr[i + 1]) % 10;\\n            }\\n            n--;\\n        }\\n\\n        return arr[0] == arr[1];\\n    }\\n}","compare_resulttitle_slug":"check-if-digits-are-equal-in-string-after-operations-i","has_notes":false,"flag_type":1,"frontend_id":240},{"id":1551772121,"question_id":1093,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740234624,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1551772121/","is_pending":"Not Pending","title":"Recover a Tree From Preorder Traversal","memory":"45 MB","code":"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    private String s;\\n    private int idx, level;\\n    \\n    public TreeNode recoverFromPreorder(String traversal) {\\n        this.s = traversal;\\n        this.idx = 0;\\n        this.level = 0;\\n        TreeNode node = new TreeNode(-1);\\n        this.helper(node, 0);\\n        return node.left;\\n    }\\n\\n    private void helper(TreeNode parent, int lvl) {\\n        while (this.idx < this.s.length() && lvl == level) {\\n            int num = 0;\\n            while (this.idx < this.s.length() && Character.isDigit(this.s.charAt(this.idx))) {\\n                num = num * 10 + (this.s.charAt(this.idx++) - \'0\');\\n            }\\n            TreeNode node = new TreeNode(num);\\n            if (parent.left == null)\\n                parent.left = node;\\n            else\\n                parent.right = node;\\n            \\n            this.level = 0;\\n            while (this.idx < this.s.length() && this.s.charAt(this.idx) == \'-\') {\\n                this.level++;\\n                this.idx++;\\n            }\\n            this.helper(node, lvl + 1);\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"recover-a-tree-from-preorder-traversal","has_notes":false,"flag_type":1,"frontend_id":239},{"id":1550226976,"question_id":179,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740102877,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1550226976/","is_pending":"Not Pending","title":"Largest Number","memory":"43.2 MB","code":"class Solution {\\n    public String largestNumber(int[] nums) \\n    {\\n        int n=nums.length;\\n        String arr[]=new String[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            arr[i]=String.valueOf(nums[i]);\\n        }\\n        StringBuilder s=new StringBuilder();\\n       Arrays.sort(arr,(a,b)-> (b+a).compareTo(a+b));\\n         if(arr[0].equals(\\"0\\")){\\n            return \\"0\\";\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            s.append(arr[i]);\\n        }\\n        return s.toString();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number","has_notes":false,"flag_type":1,"frontend_id":238},{"id":1550226447,"question_id":179,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740102815,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1550226447/","is_pending":"Not Pending","title":"Largest Number","memory":"N/A","code":"class Solution {\\n    public String largestNumber(int[] nums) \\n    {\\n        int n=nums.length;\\n        String arr[]=new String[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            arr[i]=String.valueOf(nums[i]);\\n        }\\n        StringBuilder s=new StringBuilder();\\n       Arrays.sort(arr,(a,b)-> (b+a).compareTo(a+b));\\n        for(int i=0;i<n;i++)\\n        {\\n            s.append(arr[i]);\\n        }\\n        return s.toString();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111010110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number","has_notes":false,"flag_type":1,"frontend_id":237},{"id":1550209996,"question_id":164,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740100927,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1550209996/","is_pending":"Not Pending","title":"Maximum Gap","memory":"60.4 MB","code":"class Solution {\\n    public int maximumGap(int[] nums) \\n    {\\n        if(nums.length<2)\\n        {\\n            return 0;\\n        }\\n        Arrays.sort(nums);\\n        int md=0;\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            if(nums[i]-nums[i-1]>md)\\n            {\\n                md=nums[i]-nums[i-1];\\n            }\\n        }\\n        return md;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"maximum-gap","has_notes":false,"flag_type":1,"frontend_id":236},{"id":1550205932,"question_id":1387,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740100446,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1550205932/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"47.8 MB","code":"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nimport java.util.HashSet;\\n\\nclass FindElements {\\n    HashSet<Integer> set; // Stores all recovered values\\n\\n    public FindElements(TreeNode root) {\\n        set = new HashSet<>();\\n        recoverTree(root, 0);\\n    }\\n    \\n    public boolean find(int target) {\\n        return set.contains(target);\\n    }\\n\\n    private void recoverTree(TreeNode root, int value) {\\n        if (root == null) return;\\n        set.add(value);\\n        root.val = value;\\n        recoverTree(root.left, 2 * value + 1);\\n        recoverTree(root.right, 2 * value + 2);\\n    }\\n}\\n\\n/**\\n * Your FindElements object will be instantiated and called as such:\\n * FindElements obj = new FindElements(root);\\n * boolean param_1 = obj.find(target);\\n */","compare_result":"1111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree","has_notes":false,"flag_type":1,"frontend_id":235},{"id":1549845249,"question_id":283,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740069884,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1549845249/","is_pending":"Not Pending","title":"Move Zeroes","memory":"46.5 MB","code":"class Solution {\\n    public void moveZeroes(int[] nums)\\n     {\\n        int l=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]!=0)\\n            {\\n                int t=nums[i];\\n                nums[i]=nums[l];\\n                nums[l]=t;\\n                l++;\\n            }\\n        }\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"move-zeroes","has_notes":false,"flag_type":1,"frontend_id":234},{"id":1549696280,"question_id":2107,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months","timestamp":1740060676,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1549696280/","is_pending":"Not Pending","title":"Find Unique Binary String","memory":"41.7 MB","code":"class Solution {\\n    public String findDifferentBinaryString(String[] nums) \\n    {\\n        int n=nums.length;\\n        StringBuilder s=new StringBuilder();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i].charAt(i)==\'0\')\\n            {\\n                s.append(\'1\');\\n            }\\n            else\\n            {\\n                s.append(\'0\');\\n            }\\n        }\\n        return s.toString();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-unique-binary-string","has_notes":false,"flag_type":1,"frontend_id":233},{"id":1548686406,"question_id":1516,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739980861,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1548686406/","is_pending":"Not Pending","title":"The k-th Lexicographical String of All Happy Strings of Length n","memory":"45.6 MB","code":"import java.util.*;\\nclass Solution {\\n    public String getHappyString(int n, int k) {\\n        Queue<String> q = new LinkedList<>();\\n        q.offer(\\"a\\");\\n        q.offer(\\"b\\");\\n        q.offer(\\"c\\");\\n        List<String> happyStrings = new ArrayList<>();\\n        \\n        while (!q.isEmpty()) {\\n            String s = q.poll();\\n            if (s.length() == n) {\\n                happyStrings.add(s);\\n                continue;\\n            }\\n            for (char ch : new char[]{\'a\', \'b\', \'c\'}) {\\n                if (s.charAt(s.length() - 1) != ch) {\\n                    q.offer(s + ch);\\n                }\\n            }\\n        }\\n        \\n        return k > happyStrings.size() ? \\"\\" : happyStrings.get(k - 1);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-k-th-lexicographical-string-of-all-happy-strings-of-length-n","has_notes":false,"flag_type":1,"frontend_id":232},{"id":1548680523,"question_id":944,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739980509,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1548680523/","is_pending":"Not Pending","title":"Smallest Range I","memory":"45.6 MB","code":"class Solution {\\n    public int smallestRangeI(int[] nums, int k) \\n    {\\n        int n=nums.length;\\n        int min=nums[0];\\n        int max=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            if(nums[i]<min)\\n            {\\n                min=nums[i];\\n            }\\n            else if(nums[i]>max)\\n            {\\n                max=nums[i];\\n            }\\n\\n        }\\n        return (max-k)-(min+k)<0?0:(max-k)-(min+k);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-i","has_notes":false,"flag_type":1,"frontend_id":231}],"has_next":true,"last_key":""}'
2025-08-25 23:31:55,219 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:55,220 [INFO] __main__.py:245 - Writing 3sum/2025-02-23 22.11.55 - Accepted - runtime 850ms - memory 52.5MB.java
2025-08-25 23:31:55,702 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:55,704 [INFO] __main__.py:245 - Writing multiply-strings/2025-02-23 12.38.28 - Accepted - runtime 9ms - memory 42.8MB.java
2025-08-25 23:31:55,706 [INFO] __main__.py:188 - Skipping multiply-strings 2025-02-23 12.33.29 because its status is 'Wrong Answer'
2025-08-25 23:31:56,031 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:56,031 [INFO] __main__.py:245 - Writing powx-n/2025-02-23 12.28.13 - Accepted - runtime 0ms - memory 43.3MB.java
2025-08-25 23:31:56,031 [INFO] __main__.py:188 - Skipping powx-n 2025-02-23 12.24.02 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:56,031 [INFO] __main__.py:188 - Skipping powx-n 2025-02-23 12.19.48 because its status is 'Time Limit Exceeded'
2025-08-25 23:31:56,462 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:56,464 [INFO] __main__.py:245 - Writing construct-binary-tree-from-preorder-and-postorder-traversal/2025-02-23 11.00.17 - Accepted - runtime 0ms - memory 43.4MB.java
2025-08-25 23:31:56,834 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:56,836 [INFO] __main__.py:245 - Writing maximum-sum-with-at-most-k-elements/2025-02-23 09.21.17 - Accepted - runtime 111ms - memory 78.7MB.java
2025-08-25 23:31:56,838 [INFO] __main__.py:188 - Skipping maximum-sum-with-at-most-k-elements 2025-02-23 09.05.14 because its status is 'Wrong Answer'
2025-08-25 23:31:57,156 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:57,162 [INFO] __main__.py:245 - Writing check-if-digits-are-equal-in-string-after-operations-i/2025-02-23 08.33.56 - Accepted - runtime 1ms - memory 42.2MB.java
2025-08-25 23:31:57,164 [INFO] __main__.py:208 - Skipping check-if-digits-are-equal-in-string-after-operations-i 2025-02-23 08.25.55 in java because a more recent submission has already been exported
2025-08-25 23:31:57,806 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:57,806 [INFO] __main__.py:245 - Writing recover-a-tree-from-preorder-traversal/2025-02-22 20.00.24 - Accepted - runtime 1ms - memory 45MB.java
2025-08-25 23:31:58,261 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:58,263 [INFO] __main__.py:245 - Writing largest-number/2025-02-21 07.24.37 - Accepted - runtime 6ms - memory 43.2MB.java
2025-08-25 23:31:58,265 [INFO] __main__.py:188 - Skipping largest-number 2025-02-21 07.23.35 because its status is 'Wrong Answer'
2025-08-25 23:31:58,668 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:58,672 [INFO] __main__.py:245 - Writing maximum-gap/2025-02-21 06.52.07 - Accepted - runtime 39ms - memory 60.4MB.java
2025-08-25 23:31:59,076 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:59,082 [INFO] __main__.py:245 - Writing find-elements-in-a-contaminated-binary-tree/2025-02-21 06.44.06 - Accepted - runtime 21ms - memory 47.8MB.java
2025-08-25 23:31:59,084 [INFO] __main__.py:208 - Skipping move-zeroes 2025-02-20 22.14.44 in java because a more recent submission has already been exported
2025-08-25 23:31:59,435 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:59,435 [INFO] __main__.py:245 - Writing find-unique-binary-string/2025-02-20 19.41.16 - Accepted - runtime 0ms - memory 41.7MB.java
2025-08-25 23:31:59,769 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:31:59,769 [INFO] __main__.py:245 - Writing the-k-th-lexicographical-string-of-all-happy-strings-of-length-n/2025-02-19 21.31.01 - Accepted - runtime 34ms - memory 45.6MB.java
2025-08-25 23:32:00,208 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:00,212 [INFO] __main__.py:245 - Writing smallest-range-i/2025-02-19 21.25.09 - Accepted - runtime 1ms - memory 45.6MB.java
2025-08-25 23:32:05,213 [DEBUG] leetcode.py:150 - Exporting submissions from 420 to 440
2025-08-25 23:32:05,723 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=420&limit=20 HTTP/11" 200 None
2025-08-25 23:32:05,772 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1548679938,"question_id":944,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739980474,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1548679938/","is_pending":"Not Pending","title":"Smallest Range I","memory":"N/A","code":"class Solution {\\n    public int smallestRangeI(int[] nums, int k) \\n    {\\n        int n=nums.length;\\n        int min=nums[0];\\n        int max=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            if(nums[i]<min)\\n            {\\n                min=nums[i];\\n            }\\n            else if(nums[i]>min)\\n            {\\n                max=nums[i];\\n            }\\n\\n        }\\n        return (max-k)-(min+k)<0?0:(max-k)-(min+k);\\n    }\\n}","compare_result":"11111111111111011101111111111111011100101010011001110000111110110010","title_slug":"smallest-range-i","has_notes":false,"flag_type":1,"frontend_id":230},{"id":1548361860,"question_id":374,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739957002,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1548361860/","is_pending":"Not Pending","title":"Guess Number Higher or Lower","memory":"N/A","code":"/** \\n * Forward declaration of guess API.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * int guess(int num);\\n */\\n\\npublic class Solution extends GuessGame {\\n    public int guessNumber(int n) \\n    {\\n        int l=0;\\n        int h=n;\\n        int m=0;\\n        while(l<=h)\\n        {\\n             m=l+h/2;\\n            if(guess(m)==0)\\n            {\\n                return m;\\n            }\\n            else if(guess(m)==-1)\\n            {\\n                h=m-1;\\n            }\\n            else\\n            {\\n                l=m+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}","compare_result":"0000000000000000000000000","title_slug":"guess-number-higher-or-lower","has_notes":false,"flag_type":1,"frontend_id":229},{"id":1547772564,"question_id":932,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739905917,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1547772564/","is_pending":"Not Pending","title":"Monotonic Array","memory":"59.5 MB","code":"public class Solution {\\n    public boolean isMonotonic(int[] nums) {\\n        if (nums.length < 2) return true;\\n\\n        int direction = 0;  \\n\\n        for (int i = 1; i < nums.length; i++) {\\n            if (nums[i] > nums[i-1]) {  \\n                if (direction == 0) direction = 1;\\n                else if (direction == -1) return false;\\n            } else if (nums[i] < nums[i-1]) { \\n                if (direction == 0) direction = -1;\\n                else if (direction == 1) return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"monotonic-array","has_notes":false,"flag_type":1,"frontend_id":228},{"id":1547766271,"question_id":1392,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739905506,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1547766271/","is_pending":"Not Pending","title":"Find the Difference of Two Arrays","memory":"45.5 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {\\n\\n        HashSet<Integer> h1 = new HashSet<>();\\n        HashSet<Integer> h2 = new HashSet<>();\\n        for (int n : nums1) h1.add(n);\\n        for (int n : nums2) h2.add(n);\\n        for (int n : nums2) {\\n            if (h1.contains(n)) {\\n                h1.remove(n);\\n                h2.remove(n);\\n            }\\n        }\\n        List<List<Integer>> result = new ArrayList<>();\\n        result.add(new ArrayList<>(h1)); // Unique to nums1\\n        result.add(new ArrayList<>(h2)); // Unique to nums2\\n        \\n        return result;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-difference-of-two-arrays","has_notes":false,"flag_type":1,"frontend_id":227},{"id":1547749040,"question_id":28,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739904398,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1547749040/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"41.8 MB","code":"class Solution {\\n    public int strStr(String haystack, String needle) {\\n        for(int i = 0, j = needle.length(); j<=haystack.length(); i++,j++){\\n            if(haystack.substring(i,j).equals(needle)){\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":226},{"id":1547748400,"question_id":28,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739904357,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1547748400/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution {\\n    public int strStr(String haystack, String needle) \\n    {\\n        for(int i=0;j=needle.length();j<=haystack.length();i++;j++)\\n        {\\n            if(haystack.substring(i,j).equals(needle))\\n            {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}","compare_result":null,"title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":225},{"id":1547738420,"question_id":151,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739903738,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1547738420/","is_pending":"Not Pending","title":"Reverse Words in a String","memory":"43.4 MB","code":"class Solution {\\n    public String reverseWords(String s) \\n    {\\n        String st[]=s.split(\\"\\\\\\\\s+\\");\\n        StringBuilder sb=new StringBuilder();\\n        for(int i=st.length-1;i>=0;i--)\\n        {\\n            sb.append(st[i]);\\n            if(i!=0)\\n            {\\n              sb.append(\\" \\");\\n            }\\n        }\\n       return sb.toString().trim();\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-words-in-a-string","has_notes":false,"flag_type":1,"frontend_id":224},{"id":1547722146,"question_id":58,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739902853,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1547722146/","is_pending":"Not Pending","title":"Length of Last Word","memory":"41.8 MB","code":"class Solution {\\n    public int lengthOfLastWord(String s) \\n    {\\n       int l=s.length();\\n       int c=0;\\n       int i=l-1;\\n        while (i >= 0 && s.charAt(i) == \' \') {\\n            i--;\\n        }\\n         while (i >= 0 && s.charAt(i) != \' \') {\\n            c++;\\n            i--;\\n        }\\n        return c;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"length-of-last-word","has_notes":false,"flag_type":1,"frontend_id":223},{"id":1547695437,"question_id":12,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739901472,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1547695437/","is_pending":"Not Pending","title":"Integer to Roman","memory":"44.5 MB","code":"class Solution {\\n    public String intToRoman(int num) \\n    {\\n        final int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\\n        final String[] symbols = {\\"M\\", \\"CM\\", \\"D\\",  \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\"};\\n        StringBuilder s=new StringBuilder();\\n        for(int i=0;i<values.length;i++)\\n        {\\n            if(num==0)\\n            {\\n                break;\\n            }\\n            while(num>=values[i])\\n            {\\n                s.append(symbols[i]);\\n                num-=values[i];\\n            }\\n        }\\n        return s.toString();\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"integer-to-roman","has_notes":false,"flag_type":1,"frontend_id":222},{"id":1547680972,"question_id":13,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739900764,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1547680972/","is_pending":"Not Pending","title":"Roman to Integer","memory":"45.2 MB","code":"class Solution {\\n    public int romanToInt(String s) \\n    {\\n        int r=0;\\n        HashMap<Character,Integer> h=new HashMap<>();\\n        h.put(\'I\',1);\\n        h.put(\'V\',5);\\n        h.put(\'X\',10);\\n        h.put(\'L\',50);\\n        h.put(\'C\',100);\\n        h.put(\'D\',500);\\n        h.put(\'M\',1000);\\n        for(int i=0;i<s.length()-1;i++)\\n        {\\n            if(h.get(s.charAt(i))<h.get(s.charAt(i+1)))\\n            {\\n                r-=h.get(s.charAt(i));\\n            }\\n            else\\n            {\\n                r+=h.get(s.charAt(i));\\n            }\\n        }\\n        return r+h.get(s.charAt(s.length()-1));\\n    }\\n}","compare_resulttitle_slug":"roman-to-integer","has_notes":false,"flag_type":1,"frontend_id":221},{"id":1547621286,"question_id":2456,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739897801,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1547621286/","is_pending":"Not Pending","title":"Construct Smallest Number From DI String","memory":"41.6 MB","code":"class Solution {\\n    public String smallestNumber(String pattern) {\\n        StringBuilder ans = new StringBuilder(\\"1\\");\\n        StringBuilder temp = new StringBuilder();\\n        \\n        for (int i = 0; i < pattern.length(); i++) {\\n            if (pattern.charAt(i) == \'I\') {\\n                // Flush temp and add next\\n                ans.append(temp).append((char)(\'2\' + i));\\n                temp.setLength(0);\\n            } else {\\n                // Store in temp\\n                temp.insert(0, ans.charAt(ans.length() - 1));\\n                ans.setLength(ans.length() - 1);\\n                ans.append((char)(\'2\' + i));\\n            }\\n        }\\n        \\n        return ans.append(temp).toString();\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-smallest-number-from-di-string","has_notes":false,"flag_type":1,"frontend_id":220},{"id":1546755261,"question_id":817,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739832673,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1546755261/","is_pending":"Not Pending","title":"Design HashMap","memory":"55.6 MB","code":"class MyHashMap {\\n    int[] data;\\n    public MyHashMap() {\\n        data = new int[1000001];\\n        Arrays.fill(data, -1);\\n    }\\n    public void put(int key, int val) {\\n        data[key] = val;\\n    }\\n    public int get(int key) {\\n        return data[key];\\n    }\\n    public void remove(int key) {\\n        data[key] = -1;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111","title_slug":"design-hashmap","has_notes":false,"flag_type":1,"frontend_id":219},{"id":1546754725,"question_id":816,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739832614,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1546754725/","is_pending":"Not Pending","title":"Design HashSet","memory":"50 MB","code":"class MyHashSet {\\n    private boolean[] mp;\\n\\n    public MyHashSet() {\\n        mp = new boolean[1000001];\\n        Arrays.fill(mp, false);\\n    }\\n\\n    public void add(int key) {\\n        mp[key] = true;\\n    }\\n\\n    public void remove(int key) {\\n        mp[key] = false;\\n    }\\n\\n    public boolean contains(int key) {\\n        return mp[key];\\n    }\\n}","compare_result":"111111111111111111111111111111111","title_slug":"design-hashset","has_notes":false,"flag_type":1,"frontend_id":218},{"id":1546753402,"question_id":217,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739832472,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1546753402/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"58.3 MB","code":"class Solution {\\n    public boolean containsDuplicate(int[] nums)\\n     {\\n        HashSet<Integer> h=new HashSet<>();\\n        int n=nums.length;\\n        for(int k:nums)\\n        {\\n            if(h.contains(k))\\n            {\\n                return true;\\n            }\\n            h.add(k);\\n        }\\n        return false;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":217},{"id":1546728624,"question_id":219,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739829890,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1546728624/","is_pending":"Not Pending","title":"Contains Duplicate II","memory":"58.6 MB","code":"class Solution {\\n    public boolean containsNearbyDuplicate(int[] nums, int k) \\n    {\\n        HashMap<Integer,Integer> h=new HashMap<>();\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            int v=nums[i];\\n            if(h.containsKey(v)&&i-h.get(v)<=k)\\n            {\\n                return true;\\n            }\\n            h.put(v,i);\\n        }\\n        return false;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate-ii","has_notes":false,"flag_type":1,"frontend_id":216},{"id":1546722721,"question_id":202,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739829292,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1546722721/","is_pending":"Not Pending","title":"Happy Number","memory":"40.7 MB","code":"class Solution {\\n    public boolean isHappy(int n)\\n     {\\n        if(n==1||n==7) return true;\\n        else if(n<10) return false;\\n        else\\n        {\\n        int s=0;\\n        while(n>0)\\n        {\\n            int t=n%10;\\n            s+=t*t;\\n            n/=10;\\n        }\\n        return isHappy(s);\\n    }\\n}\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"happy-number","has_notes":false,"flag_type":1,"frontend_id":215},{"id":1546709875,"question_id":1,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739828044,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1546709875/","is_pending":"Not Pending","title":"Two Sum","memory":"44.6 MB","code":"class Solution \\n{\\n    public int[] twoSum(int[] nums, int target)\\n     {\\n        HashMap<Integer,Integer> h=new HashMap<>();\\n        int n=nums.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            h.put(nums[i],i);\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            int c=target-nums[i];\\n            if(h.containsKey(c)&&h.get(c)!=i)\\n            {\\n                return new int[] {i,h.get(c)};\\n            }\\n        }\\n        return new int[]{};\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":214},{"id":1546700655,"question_id":189,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739827173,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1546700655/","is_pending":"Not Pending","title":"Rotate Array","memory":"57.5 MB","code":"class Solution {\\n    public void rotate(int[] nums, int k) {\\n        int n = nums.length;\\n        k = k % n;\\n\\n        reverse(nums, 0, n - 1);\\n        reverse(nums, 0, k - 1);\\n        reverse(nums, k, n - 1);\\n    }\\n\\n    private void reverse(int[] nums, int left, int right) {\\n        while (left < right) {\\n            int temp = nums[left];\\n            nums[left] = nums[right];\\n            nums[right] = temp;\\n            left++;\\n            right--;\\n        }\\n    }\\n}\\n","compare_result":"11111111111111111111111111111111111111","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":213},{"id":1546668150,"question_id":80,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739824268,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1546668150/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array II","memory":"45.8 MB","code":"class Solution {\\n    public int removeDuplicates(int[] nums) \\n    {\\n        int n=nums.length;\\n        int ind=0;\\n        HashMap<Integer,Integer> h=new HashMap<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            h.put(nums[i],h.getOrDefault(nums[i],0)+1);\\n            if(h.get(nums[i])<=2)\\n            {\\n                nums[ind++]=nums[i];\\n            }\\n        }\\n        return ind;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array-ii","has_notes":false,"flag_type":1,"frontend_id":212},{"id":1546632144,"question_id":26,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739821492,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1546632144/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"44.9 MB","code":"class Solution {\\n    public int removeDuplicates(int[] nums) \\n    {\\n        if(nums.length==0) return 0;\\n        HashSet<Integer> hs=new HashSet<>();\\n        int ind=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(!hs.contains(nums[i]))\\n            {\\n            hs.add(nums[i]);\\n            nums[ind++]=nums[i];\\n            hs.add(nums[i]);\\n        }      \\n    }\\n    int cc= hs.size();\\n        return cc;\\n}\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":211}],"has_next":true,"last_key":""}'
2025-08-25 23:32:05,774 [INFO] __main__.py:188 - Skipping smallest-range-i 2025-02-19 21.24.34 because its status is 'Wrong Answer'
2025-08-25 23:32:05,774 [INFO] __main__.py:188 - Skipping guess-number-higher-or-lower 2025-02-19 14.53.22 because its status is 'Time Limit Exceeded'
2025-08-25 23:32:06,349 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:06,351 [INFO] __main__.py:245 - Writing monotonic-array/2025-02-19 00.41.57 - Accepted - runtime 1ms - memory 59.5MB.java
2025-08-25 23:32:06,683 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:06,685 [INFO] __main__.py:245 - Writing find-the-difference-of-two-arrays/2025-02-19 00.35.06 - Accepted - runtime 9ms - memory 45.5MB.java
2025-08-25 23:32:07,059 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:07,060 [INFO] __main__.py:245 - Writing find-the-index-of-the-first-occurrence-in-a-string/2025-02-19 00.16.38 - Accepted - runtime 0ms - memory 41.8MB.java
2025-08-25 23:32:07,062 [INFO] __main__.py:188 - Skipping find-the-index-of-the-first-occurrence-in-a-string 2025-02-19 00.15.57 because its status is 'Compile Error'
2025-08-25 23:32:07,064 [INFO] __main__.py:208 - Skipping reverse-words-in-a-string 2025-02-19 00.05.38 in java because a more recent submission has already been exported
2025-08-25 23:32:07,391 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:07,395 [INFO] __main__.py:245 - Writing length-of-last-word/2025-02-18 23.50.53 - Accepted - runtime 0ms - memory 41.8MB.java
2025-08-25 23:32:07,782 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:07,784 [INFO] __main__.py:245 - Writing integer-to-roman/2025-02-18 23.27.52 - Accepted - runtime 3ms - memory 44.5MB.java
2025-08-25 23:32:08,116 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:08,116 [INFO] __main__.py:245 - Writing roman-to-integer/2025-02-18 23.16.04 - Accepted - runtime 5ms - memory 45.2MB.java
2025-08-25 23:32:08,598 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:08,600 [INFO] __main__.py:245 - Writing construct-smallest-number-from-di-string/2025-02-18 22.26.41 - Accepted - runtime 1ms - memory 41.6MB.java
2025-08-25 23:32:08,962 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:08,965 [INFO] __main__.py:245 - Writing design-hashmap/2025-02-18 04.21.13 - Accepted - runtime 32ms - memory 55.6MB.java
2025-08-25 23:32:09,303 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:09,313 [INFO] __main__.py:245 - Writing design-hashset/2025-02-18 04.20.14 - Accepted - runtime 28ms - memory 50MB.java
2025-08-25 23:32:09,929 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:09,931 [INFO] __main__.py:245 - Writing contains-duplicate/2025-02-18 04.17.52 - Accepted - runtime 10ms - memory 58.3MB.java
2025-08-25 23:32:10,497 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:10,499 [INFO] __main__.py:245 - Writing contains-duplicate-ii/2025-02-18 03.34.50 - Accepted - runtime 18ms - memory 58.6MB.java
2025-08-25 23:32:11,163 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:11,165 [INFO] __main__.py:245 - Writing happy-number/2025-02-18 03.24.52 - Accepted - runtime 0ms - memory 40.7MB.java
2025-08-25 23:32:11,167 [INFO] __main__.py:208 - Skipping two-sum 2025-02-18 03.04.04 in java because a more recent submission has already been exported
2025-08-25 23:32:11,517 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:11,519 [INFO] __main__.py:245 - Writing rotate-array/2025-02-18 02.49.33 - Accepted - runtime 0ms - memory 57.5MB.java
2025-08-25 23:32:11,864 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:11,866 [INFO] __main__.py:245 - Writing remove-duplicates-from-sorted-array-ii/2025-02-18 02.01.08 - Accepted - runtime 5ms - memory 45.8MB.java
2025-08-25 23:32:11,868 [INFO] __main__.py:208 - Skipping remove-duplicates-from-sorted-array 2025-02-18 01.14.52 in java because a more recent submission has already been exported
2025-08-25 23:32:16,868 [DEBUG] leetcode.py:150 - Exporting submissions from 440 to 460
2025-08-25 23:32:17,293 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=440&limit=20 HTTP/11" 200 None
2025-08-25 23:32:17,333 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1546627933,"question_id":26,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739821201,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1546627933/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"N/A","code":"class Solution {\\n    public int removeDuplicates(int[] nums) \\n    {\\n        if(nums.length==0) return 0;\\n        HashSet<Integer> hs=new HashSet<>();\\n        int ind=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            hs.add(nums[i]);\\n        }\\n        for(int num:hs)\\n        {\\n            nums[ind++]=num;\\n        }\\n        int cc= hs.size();\\n        return cc;\\n    }\\n}","compare_result":"11111111111111111100000000000011111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100000111010011010110100110000111001000101110011011111000110011010000000110001110010000010000011101000000101100000110110101000101001110110000111110110111010100010010010011001101001011000011001010100001","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":210},{"id":1546626994,"question_id":26,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739821137,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1546626994/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"N/A","code":"class Solution {\\n    public int removeDuplicates(int[] nums) \\n    {\\n        HashSet<Integer> hs=new HashSet<>();\\n        int ind=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            hs.add(nums[i]);\\n        }\\n        for(int num:hs)\\n        {\\n            nums[ind++]=num;\\n        }\\n        int cc= hs.size();\\n        return cc;\\n    }\\n}","compare_result":"11111111111111111100000000000011111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100000111010011010110100110000111001000101110011011111000110011010000000110001110010000010000011101000000101100000110110101000101001110110000111110110111010100010010010011001101001011000011001010100001","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":209},{"id":1546612985,"question_id":88,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739820179,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1546612985/","is_pending":"Not Pending","title":"Merge Sorted Array","memory":"42.8 MB","code":"class Solution {\\n    public void merge(int[] nums1, int m, int[] nums2, int n) \\n    {\\n        for(int i=0;i<n;i++)\\n        {\\n            nums1[m+i]=nums2[i];\\n        }\\n        Arrays.sort(nums1);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"merge-sorted-array","has_notes":false,"flag_type":1,"frontend_id":208},{"id":1546437767,"question_id":21,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739811063,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1546437767/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"42.1 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1!=null&&list2!=null)\\n        {\\n            if(list1.val<list2.val)\\n            {\\n                list1.next=mergeTwoLists(list1.next,list2);\\n                return list1;\\n            }\\n            else\\n            {\\n                list2.next=mergeTwoLists(list1,list2.next);\\n                return list2;\\n            }\\n        }\\n        if(list1==null)\\n           return list2;\\n        return list1;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1,"frontend_id":207},{"id":1546202973,"question_id":1160,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739796978,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1546202973/","is_pending":"Not Pending","title":"Letter Tile Possibilities","memory":"41.2 MB","code":"class Solution {\\n    public int numTilePossibilities(String tiles) {\\n        char[] arr = tiles.toCharArray();\\n        return permute(0, arr);\\n    }\\n    public int permute(int start, char[] arr) {\\n        if(start == arr.length) return 0;\\n        int ans = 0;\\n        for(int i=start; i<arr.length; i++) {\\n            if(!isPermutedBefore(start, i-1, arr[i], arr)) {\\n                swap(start, i, arr);\\n                ans += 1+permute(start+1, arr);\\n                swap(start, i, arr);\\n            }\\n        }\\n        return ans;\\n    }\\n    public boolean isPermutedBefore(int i, int j, char ch, char[] arr) {\\n        while(i<=j)\\n            if(arr[i++] == ch) return true;\\n        return false;\\n    }\\n    public void swap(int i, int j, char[] arr) {\\n        char temp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = temp;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"letter-tile-possibilities","has_notes":false,"flag_type":1,"frontend_id":206},{"id":1545489150,"question_id":1848,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739736376,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1545489150/","is_pending":"Not Pending","title":"Sum of Unique Elements","memory":"41.3 MB","code":"class Solution {\\n    public int sumOfUnique(int[] nums)\\n     {\\n\\n        int s=0;\\n        int n=nums.length;\\n        HashMap<Integer,Integer> h=new HashMap<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            h.put(nums[i],h.getOrDefault(nums[i],0)+1);\\n        }\\n        for(Map.Entry<Integer,Integer> e:h.entrySet())\\n        {\\n            if(e.getValue()==1)\\n            {\\n                s+=e.getKey();\\n            }\\n        }\\n        return s;\\n    \\n     }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-unique-elements","has_notes":false,"flag_type":1,"frontend_id":205},{"id":1545469496,"question_id":1319,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739735021,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1545469496/","is_pending":"Not Pending","title":"Unique Number of Occurrences","memory":"41.9 MB","code":"class Solution {\\n    public boolean uniqueOccurrences(int[] arr) \\n    {\\n        HashMap<Integer,Integer> m=new HashMap<>();\\n        int n=arr.length;\\n        for(int num:arr)\\n        {\\n            m.put(num,m.getOrDefault(num,0)+1);\\n        }\\n        HashSet<Integer> o=new HashSet<>();\\n        for(int k:m.values())\\n        {\\n            if(!o.add(k))\\n            {\\n                 return false;\\n            }\\n        }\\n        return true;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-number-of-occurrences","has_notes":false,"flag_type":1,"frontend_id":204},{"id":1545453952,"question_id":1819,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739733979,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1545453952/","is_pending":"Not Pending","title":"Construct the Lexicographically Largest Valid Sequence","memory":"41 MB","code":"class Solution {\\n    public int[] constructDistancedSequence(int n) {\\n        int[] result = new int[2 * n - 1];\\n        boolean[] used = new boolean[n + 1];\\n        backtrack(result, used, n, 0);\\n        return result;\\n    }\\n    private boolean backtrack(int[] result, boolean[] used, int n, int index){\\n        while(index < result.length && result[index] != 0){\\n            index++;\\n        }\\n        if(index == result.length){\\n            return true;\\n        }\\n        for(int i = n; i >= 1; i--){\\n            if(used[i]) continue;\\n\\n            if(i == 1){\\n                result[index] = 1;\\n                used[1] = true;\\n                if(backtrack(result, used, n, index + 1)) return true;\\n                result[index] = 0;\\n                used[1] = false;\\n            }\\n            else{\\n                if(index + i < result.length && result[index + i] == 0){\\n                    result[index] = i;\\n                    result[index + i] = i;\\n                    used[i] = true;\\n                    if(backtrack(result, used, n, index + 1)) return true;\\n                    result[index] = 0;\\n                    result[index + i] = 0;\\n                    used[i] = false;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"11111111111111111111","title_slug":"construct-the-lexicographically-largest-valid-sequence","has_notes":false,"flag_type":1,"frontend_id":203},{"id":1545447298,"question_id":229,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739733573,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1545447298/","is_pending":"Not Pending","title":"Majority Element II","memory":"47.4 MB","code":"class Solution {\\n    public List<Integer> majorityElement(int[] nums)\\n     {\\n        HashMap<Integer,Integer> m=new HashMap<>();\\n        int n=nums.length;\\n        ArrayList<Integer> l=new ArrayList();\\n        for(int i=0;i<n;i++)\\n        {\\n            m.put(nums[i],m.getOrDefault(nums[i],0)+1);\\n        }\\n        for(int k:m.keySet())\\n        {\\n            if(m.get(k)>n/3)\\n            {\\n                l.add(k);\\n            }\\n        }\\n        return l;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"majority-element-ii","has_notes":false,"flag_type":1,"frontend_id":202},{"id":1545441821,"question_id":229,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739733194,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1545441821/","is_pending":"Not Pending","title":"Majority Element II","memory":"N/A","code":"class Solution {\\n    public List<Integer> majorityElement(int[] nums)\\n     {\\n        HashMap<Integer,Integer> m=new HashMap<>();\\n        int n=nums.length;\\n        ArrayList<Integer> l=new ArrayList();\\n        for(int i=0;i<n;i++)\\n        {\\n            m.put(nums[i],m.getOrDefault(nums[i],0)+1);\\n            if(m.get(nums[i])>n/3)\\n            {\\n                l.add(nums[i]);\\n            }\\n        }\\n        return l;\\n    }\\n}","compare_result":"11101111011111110101111111010001110010000000000001111100100000000000000000000000001001111011","title_slug":"majority-element-ii","has_notes":false,"flag_type":1,"frontend_id":201},{"id":1545428987,"question_id":169,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739732409,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1545428987/","is_pending":"Not Pending","title":"Majority Element","memory":"49.4 MB","code":"class Solution {\\n    public int majorityElement(int[] nums)\\n    {\\n      HashMap<Integer,Integer> m=new HashMap<>();\\n      int n=nums.length;\\n      for(int i=0;i<n;i++)\\n      {\\n        m.put(nums[i],m.getOrDefault(nums[i],0)+1);\\n        if(m.get(nums[i])>n/2)\\n        {\\n            return nums[i];\\n        }\\n      }\\n      return -1;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":200},{"id":1545119990,"question_id":19,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739713229,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1545119990/","is_pending":"Not Pending","title":"Remove Nth Node From End of List","memory":"42 MB","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode removeNthFromEnd(ListNode head, int n)\\n     {\\n        if(head.next==null)\\n        {\\n            return null;\\n        }\\n        int s=0;\\n        ListNode c=head;\\n        while(c!=null)\\n        {\\n            c=c.next;\\n            s++;\\n        } \\n        if(n==s)\\n        {\\n            return head.next;\\n        }\\n        int ind=s-n;\\n        int i=1;\\n        ListNode prev=head;\\n        while(i<ind)\\n        {\\n            prev=prev.next;\\n            i++;\\n        }\\n        prev.next=prev.next.next;\\n        return head;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-nth-node-from-end-of-list","has_notes":false,"flag_type":1,"frontend_id":199},{"id":1544525237,"question_id":3709,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739673755,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1544525237/","is_pending":"Not Pending","title":"Find Special Substring of Length K","memory":"42.6 MB","code":"class Solution {\\n    public boolean hasSpecialSubstring(String s, int k) {\\n        for (int i = 0; i <= s.length() - k; i++) {\\n            char ch = s.charAt(i);\\n            boolean a = true;\\n            for (int j = i; j < i + k; j++) {\\n                if (s.charAt(j) != ch) {\\n                    a = false;\\n                    break;\\n                }\\n            }\\n            if (a) {\\n                if ((i == 0 || s.charAt(i - 1) != ch) && (i + k == s.length() || s.charAt(i + k) != ch)) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}\\n","compare_resulttitle_slug":"find-special-substring-of-length-k","has_notes":false,"flag_type":1,"frontend_id":198},{"id":1543976881,"question_id":3723,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739631461,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1543976881/","is_pending":"Not Pending","title":"Sum of Good Numbers","memory":"44.3 MB","code":"class Solution \\n{\\n    public int sumOfGoodNumbers(int[] nums, int k) \\n    {\\n        int s=0;\\n        int n=nums.length;\\n       for(int i=0;i<nums.length;i++)\\n           {\\n               boolean g=true;\\n               int a=i-k;\\n               int b=i+k;\\n             if(a>=0&&nums[i]<=nums[a])\\n             {\\n                 g=false;\\n             }\\n            if(b<n&&nums[i]<=nums[b])\\n            {\\n                g=false;\\n            }\\n               if(g)\\n               {\\n                   s+=nums[i];\\n               }\\n           }\\n        \\n        return s;\\n    }\\n}","compare_resulttitle_slug":"sum-of-good-numbers","has_notes":false,"flag_type":1,"frontend_id":197},{"id":1543973827,"question_id":3723,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739631362,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1543973827/","is_pending":"Not Pending","title":"Sum of Good Numbers","memory":"N/A","code":"class Solution \\n{\\n    public int sumOfGoodNumbers(int[] nums, int k) \\n    {\\n        int s=0;\\n        int n=nums.length;\\n       for(int i=0;i<nums.length;i++)\\n           {\\n               boolean g=true;\\n               int a=i-k;\\n               int b=i+k;\\n             if(a>=0&&nums[i]<nums[a])\\n             {\\n                 g=false;\\n             }\\n            if(b<=n&&nums[i]<nums[b])\\n            {\\n                g=false;\\n            }\\n               if(g)\\n               {\\n                   s+=nums[i];\\n               }\\n           }\\n        \\n        return s;\\n    }\\n}","compare_resulttitle_slug":"sum-of-good-numbers","has_notes":false,"flag_type":1,"frontend_id":196},{"id":1543972936,"question_id":3723,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739631332,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1543972936/","is_pending":"Not Pending","title":"Sum of Good Numbers","memory":"N/A","code":"class Solution \\n{\\n    public int sumOfGoodNumbers(int[] nums, int k) \\n    {\\n        int s=0;\\n        int n=nums.length;\\n       for(int i=0;i<nums.length;i++)\\n           {\\n               boolean g=true;\\n               int a=i-k;\\n               int b=i+k;\\n             if(a>=0&&nums[i]<nums[a])\\n             {\\n                 g=false;\\n             }\\n            if(b<n&&nums[i]<nums[b])\\n            {\\n                g=false;\\n            }\\n               if(g)\\n               {\\n                   s+=nums[i];\\n               }\\n           }\\n        \\n        return s;\\n    }\\n}","compare_resulttitle_slug":"sum-of-good-numbers","has_notes":false,"flag_type":1,"frontend_id":195},{"id":1543515133,"question_id":2802,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739596960,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1543515133/","is_pending":"Not Pending","title":"Find the Punishment Number of an Integer","memory":"44.3 MB","code":"class Solution {\\n    public int punishmentNumber(int n)\\n     {\\n        int ts=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            int sq=i*i;\\n            String sqstr=Integer.toString(sq);\\n            if(canp(sqstr,0,i))\\n            {\\n                ts+=sq;\\n            }\\n        }\\n        return ts;\\n    }\\n     private boolean canp(String str, int index, int target) {\\n        if (index == str.length()) {\\n            return target == 0;\\n        }\\n\\n        int num = 0;\\n        for (int j = index; j < str.length(); j++) {\\n            num = num * 10 + (str.charAt(j) - \'0\'); \\n            if (num > target) break; \\n            if (canp(str, j + 1, target - num)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-punishment-number-of-an-integer","has_notes":false,"flag_type":1,"frontend_id":194},{"id":1543220905,"question_id":1915,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739559865,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1543220905/","is_pending":"Not Pending","title":"Check if One String Swap Can Make Strings Equal","memory":"41.7 MB","code":"class Solution {\\n    public boolean areAlmostEqual(String s1, String s2) \\n    {\\n        if(s1.equals(s2))\\n        {\\n            return true;\\n        }\\n        int n=s1.length();\\n        int f=-1;\\n        int s=-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s1.charAt(i)!=s2.charAt(i))\\n            {\\n                if(f==-1)\\n                {\\n                    f=i;\\n                }\\n                else if(s==-1)\\n                {\\n                    s=i;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        /*char arr1[]=s1.toCharArray();\\n        char arr2[]=s2.toCharArray();\\n        Arrays.sort(arr1);\\n        Arrays.sort(arr2);\\n        if(Arrays.equals(arr1,arr2))\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }*/\\n    return (s!=-1&&s1.charAt(f)==s2.charAt(s)&&s1.charAt(s)==s2.charAt(f));\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-one-string-swap-can-make-strings-equal","has_notes":false,"flag_type":1,"frontend_id":193},{"id":1543200653,"question_id":1915,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739558299,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1543200653/","is_pending":"Not Pending","title":"Check if One String Swap Can Make Strings Equal","memory":"N/A","code":"class Solution {\\n    public boolean areAlmostEqual(String s1, String s2) \\n    {\\n        char arr1[]=s1.toCharArray();\\n        char arr2[]=s2.toCharArray();\\n        Arrays.sort(arr1);\\n        Arrays.sort(arr2);\\n        if(Arrays.equals(arr1,arr2))\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n}","compare_result":"11101111111101111011010010110111001101111111111111011111111111111111111110111111111111110111111101111111111111111011011100111111111111111","title_slug":"check-if-one-string-swap-can-make-strings-equal","has_notes":false,"flag_type":1,"frontend_id":192},{"id":1541541991,"question_id":3206,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 1\xc2\xa0week","timestamp":1739437625,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1541541991/","is_pending":"Not Pending","title":"Find Common Elements Between Two Arrays","memory":"45.4 MB","code":"class Solution {\\n    public int[] findIntersectionValues(int[] nums1, int[] nums2) \\n    {\\n        int n=nums1.length;\\n        int m=nums2.length;\\n        int c1=0;\\n        int c2=0;\\n        HashMap<Integer,Integer> s=new HashMap<>();\\n        for(int i:nums1)\\n        {\\n            s.put(i,s.getOrDefault(i,0)+1);\\n        }\\n         HashMap<Integer,Integer> s2=new HashMap<>();\\n         for(int i:nums2)\\n        {\\n            s2.put(i,s.getOrDefault(i,0)+1);\\n        }\\n        for(int i:nums1)\\n        {\\n            if(s2.get(i)!=null) c1++;\\n        }\\n        for(int i:nums2)\\n        {\\n            if(s.get(i)!=null) c2++;\\n        }\\n        int a[]={c1,c2};\\n        return a;\\n\\n    }\\n}","compare_resulttitle_slug":"find-common-elements-between-two-arrays","has_notes":false,"flag_type":1,"frontend_id":191}],"has_next":true,"last_key":""}'
2025-08-25 23:32:17,333 [INFO] __main__.py:188 - Skipping remove-duplicates-from-sorted-array 2025-02-18 01.10.01 because its status is 'Wrong Answer'
2025-08-25 23:32:17,333 [INFO] __main__.py:188 - Skipping remove-duplicates-from-sorted-array 2025-02-18 01.08.57 because its status is 'Wrong Answer'
2025-08-25 23:32:17,748 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:17,760 [INFO] __main__.py:245 - Writing merge-sorted-array/2025-02-18 00.52.59 - Accepted - runtime 1ms - memory 42.8MB.java
2025-08-25 23:32:18,100 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:18,106 [INFO] __main__.py:245 - Writing merge-two-sorted-lists/2025-02-17 22.21.03 - Accepted - runtime 0ms - memory 42.1MB.java
2025-08-25 23:32:18,439 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:18,452 [INFO] __main__.py:245 - Writing letter-tile-possibilities/2025-02-17 18.26.18 - Accepted - runtime 1ms - memory 41.2MB.java
2025-08-25 23:32:18,933 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:18,935 [INFO] __main__.py:245 - Writing sum-of-unique-elements/2025-02-17 01.36.16 - Accepted - runtime 2ms - memory 41.3MB.java
2025-08-25 23:32:19,279 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:19,281 [INFO] __main__.py:245 - Writing unique-number-of-occurrences/2025-02-17 01.13.41 - Accepted - runtime 2ms - memory 41.9MB.java
2025-08-25 23:32:19,663 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:19,663 [INFO] __main__.py:245 - Writing construct-the-lexicographically-largest-valid-sequence/2025-02-17 00.56.19 - Accepted - runtime 0ms - memory 41MB.java
2025-08-25 23:32:19,982 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:19,995 [INFO] __main__.py:245 - Writing majority-element-ii/2025-02-17 00.49.33 - Accepted - runtime 10ms - memory 47.4MB.java
2025-08-25 23:32:19,997 [INFO] __main__.py:188 - Skipping majority-element-ii 2025-02-17 00.43.14 because its status is 'Wrong Answer'
2025-08-25 23:32:20,752 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:20,752 [INFO] __main__.py:245 - Writing majority-element/2025-02-17 00.30.09 - Accepted - runtime 16ms - memory 49.4MB.java
2025-08-25 23:32:21,186 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:21,188 [INFO] __main__.py:245 - Writing remove-nth-node-from-end-of-list/2025-02-16 19.10.29 - Accepted - runtime 0ms - memory 42MB.java
2025-08-25 23:32:22,089 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:22,093 [INFO] __main__.py:245 - Writing find-special-substring-of-length-k/2025-02-16 08.12.35 - Accepted - runtime 1ms - memory 42.6MB.java
2025-08-25 23:32:24,781 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:24,781 [INFO] __main__.py:245 - Writing sum-of-good-numbers/2025-02-15 20.27.41 - Accepted - runtime 1ms - memory 44.3MB.java
2025-08-25 23:32:24,785 [INFO] __main__.py:188 - Skipping sum-of-good-numbers 2025-02-15 20.26.02 because its status is 'Runtime Error'
2025-08-25 23:32:24,785 [INFO] __main__.py:188 - Skipping sum-of-good-numbers 2025-02-15 20.25.32 because its status is 'Wrong Answer'
2025-08-25 23:32:25,497 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:25,499 [INFO] __main__.py:245 - Writing find-the-punishment-number-of-an-integer/2025-02-15 10.52.40 - Accepted - runtime 23ms - memory 44.3MB.java
2025-08-25 23:32:25,821 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:25,835 [INFO] __main__.py:245 - Writing check-if-one-string-swap-can-make-strings-equal/2025-02-15 00.34.25 - Accepted - runtime 0ms - memory 41.7MB.java
2025-08-25 23:32:25,837 [INFO] __main__.py:188 - Skipping check-if-one-string-swap-can-make-strings-equal 2025-02-15 00.08.19 because its status is 'Wrong Answer'
2025-08-25 23:32:26,205 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:26,207 [INFO] __main__.py:245 - Writing find-common-elements-between-two-arrays/2025-02-13 14.37.05 - Accepted - runtime 8ms - memory 45.4MB.java
2025-08-25 23:32:31,209 [DEBUG] leetcode.py:150 - Exporting submissions from 460 to 480
2025-08-25 23:32:31,843 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=460&limit=20 HTTP/11" 200 None
2025-08-25 23:32:31,845 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1536468632,"question_id":3748,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1739071296,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1536468632/","is_pending":"Not Pending","title":"Sort Matrix by Diagonals","memory":"45.5 MB","code":"class Solution {\\n    public int[][] sortMatrix(int[][] grid) {\\n        int n = grid.length;\\n        for (int row = 0; row < n; row++) {\\n            sortDiagonal(grid, row, 0, false);\\n        }\\n        for (int col = 1; col < n; col++) {\\n            sortDiagonal(grid, 0, col, true);\\n        }\\n\\n        return grid;\\n    }\\n\\n    private void sortDiagonal(int[][] grid, int startRow, int startCol, boolean increasing) {\\n        int n = grid.length;\\n        int count = 0;\\n        int i = startRow, j = startCol;\\n        while (i < n && j < n) {\\n            count++;\\n            i++;\\n            j++;\\n        }\\n        for (int k = 0; k < count - 1; k++) {\\n            for (int l = 0; l < count - 1 - k; l++) {\\n                int row1 = startRow + l;\\n                int col1 = startCol + l;\\n                int row2 = startRow + l + 1;\\n                int col2 = startCol + l + 1;\\n                if ((increasing && grid[row1][col1] > grid[row2][col2]) || \\n                    (!increasing && grid[row1][col1] < grid[row2][col2])) {\\n                    int temp = grid[row1][col1];\\n                    grid[row1][col1] = grid[row2][col2];\\n                    grid[row2][col2] = temp;\\n                }\\n            }\\n        }\\n    }\\n}\\n","compare_resulttitle_slug":"sort-matrix-by-diagonals","has_notes":false,"flag_type":1,"frontend_id":190},{"id":1528120160,"question_id":3753,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738464800,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1528120160/","is_pending":"Not Pending","title":"Maximum Difference Between Even and Odd Frequency I","memory":"43.1 MB","code":"import java.util.HashMap;\\nimport java.util.Map;\\n\\nclass Solution {\\n    public int maxDifference(String s) {\\n        Map<Character, Integer> freqMap = new HashMap<>();\\n        \\n        for (char ch : s.toCharArray()) {\\n            freqMap.put(ch, freqMap.getOrDefault(ch, 0) + 1);\\n        }\\n\\n        int maxOdd = Integer.MIN_VALUE;\\n        int minEven = Integer.MAX_VALUE;\\n\\n        for (int freq : freqMap.values()) {\\n            if (freq % 2 == 1) {\\n                maxOdd = Math.max(maxOdd, freq);\\n            } else {\\n                minEven = Math.min(minEven, freq);\\n            }\\n        }\\n\\n        return maxOdd - minEven;\\n    }\\n}\\n","compare_resulttitle_slug":"maximum-difference-between-even-and-odd-frequency-i","has_notes":false,"flag_type":1,"frontend_id":189},{"id":1527584843,"question_id":3736,"lang":"java","lang_name":"Java","time":"6\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1738423548,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1527584843/","is_pending":"Not Pending","title":"Find Valid Pair of Adjacent Digits in String","memory":"43 MB","code":"class Solution {\\n    public String findValidPair(String s) {\\n        int[] fre= new int[10];\\n        for (char ch : s.toCharArray()) {\\n            fre[ch - \'0\']++;\\n        }\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            char first = s.charAt(i);\\n            char second = s.charAt(i + 1);\\n            if (first != second && fre[first - \'0\'] == first - \'0\' \\n                && fre[second - \'0\'] == second - \'0\') {\\n                return \\"\\" + first + second;\\n            }\\n        }\\n        return \\"\\";\\n    }\\n}","compare_resulttitle_slug":"find-valid-pair-of-adjacent-digits-in-string","has_notes":false,"flag_type":1,"frontend_id":188},{"id":1520625607,"question_id":3704,"lang":"java","lang_name":"Java","time":"7\xc2\xa0months","timestamp":1737860736,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1520625607/","is_pending":"Not Pending","title":"Count Partitions with Even Sum Difference","memory":"42.1 MB","code":"class Solution {\\n    public int countPartitions(int[] nums) {\\n        int n = nums.length;\\n        int totalSum = 0;\\n        for (int num : nums) {\\n            totalSum += num;\\n        }\\n        int leftSum = 0;\\n        int co = 0;\\n        for (int i = 0; i < n - 1; i++) {\\n            leftSum += nums[i];\\n            int rightSum = totalSum - leftSum;\\n            if ((leftSum - rightSum) % 2 == 0) {\\n                co++;\\n            }\\n        }\\n        return co;\\n    }\\n}\\n","compare_resulttitle_slug":"count-partitions-with-even-sum-difference","has_notes":false,"flag_type":1,"frontend_id":187},{"id":1497992922,"question_id":3702,"lang":"java","lang_name":"Java","time":"7\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1736044884,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1497992922/","is_pending":"Not Pending","title":"Maximum Subarray With Equal Products","memory":"42.9 MB","code":"class Solution {\\n    public int maxLength(int[] nums) {\\n        int n = nums.length;\\n        int maxLength = 0;\\n        for (int i = 0; i < n; i++) {\\n            int prod = 1, gcd = 0, lcm = 1;\\n            for (int j = i; j < n; j++) {\\n                prod *= nums[j];\\n                gcd = gcd == 0 ? nums[j] : gcd(gcd, nums[j]);\\n                lcm = lcm / gcd(lcm, nums[j]) * nums[j];\\n                if (prod == lcm * gcd) {\\n                    maxLength = Math.max(maxLength, j - i + 1);\\n                }\\n            }\\n        }\\n\\n        return maxLength;\\n    }\\n    private int gcd(int a, int b) {\\n        return b == 0 ? a : gcd(b, a % b);\\n    }\\n}\\n","compare_resulttitle_slug":"maximum-subarray-with-equal-products","has_notes":false,"flag_type":1,"frontend_id":186},{"id":1490572693,"question_id":494,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1735383603,"status":10,"status_display":"Accepted","runtime":"633 ms","url":"/submissions/detail/1490572693/","is_pending":"Not Pending","title":"Target Sum","memory":"41.4 MB","code":"class Solution {\\n    public int findTargetSumWays(int[] nums, int target) {\\n        return helper(nums, target, 0, 0);\\n    }\\n\\n    private int helper(int[] arr, int target, int idx, int sum) {\\n        if (idx >= arr.length)\\n            return sum == target ? 1 : 0;\\n        \\n        int subtract = helper(arr, target, idx + 1, sum - arr[idx]);\\n        int add = helper(arr, target, idx + 1, sum + arr[idx]);\\n\\n        return subtract + add;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false,"flag_type":1,"frontend_id":185},{"id":1490572063,"question_id":1063,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1735383538,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1490572063/","is_pending":"Not Pending","title":"Best Sightseeing Pair","memory":"53.4 MB","code":"class Solution {\\n    public int maxScoreSightseeingPair(int[] values) {\\n        int ans = Integer.MIN_VALUE;\\n        int m = values[0];\\n\\n        for (int i = 1; i < values.length; i++) {\\n            if (values[i] - i + m > ans) \\n                ans = values[i] - i + m;\\n            \\n            if (values[i] + i > m) \\n                m = values[i] + i;\\n        }\\n\\n        return ans;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"best-sightseeing-pair","has_notes":false,"flag_type":1,"frontend_id":184},{"id":1490571340,"question_id":689,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1735383463,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1490571340/","is_pending":"Not Pending","title":"Maximum Sum of 3 Non-Overlapping Subarrays","memory":"49.1 MB","code":"class Solution {\\n    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {\\n        // Total possible subarrays of length k\\n        int n = nums.length - k + 1;\\n\\n        // Array to store the sum of all subarrays of length k\\n        int[] sums = new int[n];\\n        int windowSum = 0;\\n\\n        // Calculate the sum of the first subarray of length k\\n        for (int i = 0; i < k; i++) {\\n            windowSum += nums[i];\\n        }\\n        sums[0] = windowSum;\\n\\n        // Calculate the sum of remaining subarrays using a sliding window approach\\n        for (int i = k; i < nums.length; i++) {\\n            windowSum = windowSum - nums[i - k] + nums[i];\\n            sums[i - k + 1] = windowSum;\\n        }\\n\\n        // DP memoization table to store results for subproblems\\n        int[][] memo = new int[n][4];\\n        for (int[] row : memo) {\\n            Arrays.fill(row, -1); // Initialize with -1 (indicating not calculated yet)\\n        }\\n\\n        // List to store the indices of the optimal subarrays\\n        List<Integer> indices = new ArrayList<>();\\n\\n        // Use DP to calculate the maximum sum of three non-overlapping subarrays\\n        dp(sums, k, 0, 3, memo);\\n\\n        // Reconstruct the indices of the selected subarrays\\n        dfs(sums, k, 0, 3, memo, indices);\\n\\n        // Convert the indices list to an array for the result\\n        int[] result = new int[3];\\n        for (int i = 0; i < 3; i++) {\\n            result[i] = indices.get(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    // DP function to calculate the maximum sum using memoization\\n    private int dp(int[] sums, int k, int idx, int rem, int[][] memo) {\\n        // Base case: If no subarrays left to pick, return 0\\n        if (rem == 0) return 0;\\n\\n        // Base case: If the index goes out of bounds, return a very low value\\n        if (idx >= sums.length) {\\n            return (rem > 0) ? Integer.MIN_VALUE : 0;\\n        }\\n\\n        // If the result is already computed, return it\\n        if (memo[idx][rem] != -1) {\\n            return memo[idx][rem];\\n        }\\n\\n        // Option 1: Include the current subarray and move k steps forward\\n        int include = sums[idx] + dp(sums, k, idx + k, rem - 1, memo);\\n\\n        // Option 2: Skip the current subarray and move to the next index\\n        int exclude = dp(sums, k, idx + 1, rem, memo);\\n\\n        // Store the maximum of include and exclude in the memoization table\\n        return memo[idx][rem] = Math.max(include, exclude);\\n    }\\n\\n    // DFS function to reconstruct the indices of the chosen subarrays\\n    private void dfs(int[] sums, int k, int idx, int rem, int[][] memo, List<Integer> indices) {\\n        // Base case: If no subarrays left to pick, return\\n        if (rem == 0) return;\\n\\n        // Base case: If the index goes out of bounds, return\\n        if (idx >= sums.length) return;\\n\\n        // Compute the \\"include\\" and \\"exclude\\" options to determine the path\\n        int include = sums[idx] + dp(sums, k, idx + k, rem - 1, memo);\\n        int exclude = dp(sums, k, idx + 1, rem, memo);\\n\\n        // If including the current subarray is optimal, add its index and move forward\\n        if (include >= exclude) {\\n            indices.add(idx);\\n            dfs(sums, k, idx + k, rem - 1, memo, indices);\\n        } else {\\n            // Otherwise, skip the current subarray and move to the next index\\n            dfs(sums, k, idx + 1, rem, memo, indices);\\n        }\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"maximum-sum-of-3-non-overlapping-subarrays","has_notes":false,"flag_type":1,"frontend_id":183},{"id":1487744123,"question_id":515,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1735107656,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1487744123/","is_pending":"Not Pending","title":"Find Largest Value in Each Tree Row","memory":"46 MB","code":"class Solution {\\n    private List<Integer> res;\\n    public List<Integer> largestValues(TreeNode root) {\\n        res = new ArrayList<>();\\n        dfs(root, 0);\\n\\n        return res;\\n    }\\n\\n    private void dfs(TreeNode root, int level) {\\n        if (root != null) {\\n            int val = root.val;\\n            \\n            if (res.size() == level) \\n                res.add(val);\\n            else \\n                res.set(level, Math.max(res.get(level), val));\\n            \\n            dfs(root.left, level + 1);\\n            dfs(root.right, level + 1);\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-largest-value-in-each-tree-row","has_notes":false,"flag_type":1,"frontend_id":182},{"id":1486748562,"question_id":3439,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1735004798,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/1486748562/","is_pending":"Not Pending","title":"Find Minimum Diameter After Merging Two Trees","memory":"138.5 MB","code":"import java.util.*;\\n\\nclass Solution {\\n    int dia; // Variable to keep track of the maximum diameter found\\n\\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\\n        int n1 = edges1.length + 1; // Number of nodes in the first tree\\n        int n2 = edges2.length + 1; // Number of nodes in the second tree\\n\\n        // Initialize adjacency lists for both trees\\n        ArrayList<Integer>[] graph1 = new ArrayList[n1];\\n        ArrayList<Integer>[] graph2 = new ArrayList[n2];\\n\\n        for (int i = 0; i < n1; i++) graph1[i] = new ArrayList<>();\\n        for (int i = 0; i < n2; i++) graph2[i] = new ArrayList<>();\\n\\n        // Fill adjacency list for the first tree\\n        for (int i = 0; i < edges1.length; i++) {\\n            int u = edges1[i][0];\\n            int v = edges1[i][1];\\n            graph1[u].add(v);\\n            graph1[v].add(u);\\n        }\\n\\n        // Fill adjacency list for the second tree\\n        for (int i = 0; i < edges2.length; i++) {\\n            int u = edges2[i][0];\\n            int v = edges2[i][1];\\n            graph2[u].add(v);\\n            graph2[v].add(u);\\n        }\\n\\n        // Calculate diameter of the first tree\\n        dia = -1;\\n        boolean[] visited1 = new boolean[n1]; // Visited array to prevent revisiting nodes\\n        getDia(0, graph1, visited1);\\n        int d1 = dia;\\n\\n        // Calculate diameter of the second tree\\n        dia = -1;\\n        boolean[] visited2 = new boolean[n2]; // Visited array to prevent revisiting nodes\\n        getDia(0, graph2, visited2);\\n        int d2 = dia;\\n\\n        // Calculate the potential new diameter if we connect the two trees\\n        int cand = (d1 + 1) / 2 + (d2 + 1) / 2 + 1;\\n\\n        // The minimum diameter after merging is the maximum of the potential new diameter and the original diameters\\n        return Math.max(cand, Math.max(d1, d2));\\n    }\\n\\n    private int getDia(int src, ArrayList<Integer>[] graph, boolean[] visited) {\\n        visited[src] = true; // Mark the current node as visited\\n        int dch = -1; // Deepest Child Height\\n        int sdch = -1; // Second Deepest Child Height\\n\\n        // Explore all children of the current node\\n        for (int child : graph[src]) {\\n            if (!visited[child]) {\\n                int ch = getDia(child, graph, visited); // Calculate the height of the child\'s subtree\\n                // Update the deepest and second deepest child heights\\n                if (ch > dch) {\\n                    sdch = dch;\\n                    dch = ch;\\n                } else if (ch > sdch) {\\n                    sdch = ch;\\n                }\\n            }\\n        }\\n\\n        // Update the maximum diameter if the current path through this node is longer\\n        if (dch + sdch + 2 > dia) dia = dch + sdch + 2;\\n        dch += 1; // Increment the deepest child height for the current node\\n        return dch;\\n    }\\n}","compare_resulttitle_slug":"find-minimum-diameter-after-merging-two-trees","has_notes":false,"flag_type":1,"frontend_id":181},{"id":1486472810,"question_id":2558,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1734973345,"status":10,"status_display":"Accepted","runtime":"563 ms","url":"/submissions/detail/1486472810/","is_pending":"Not Pending","title":"Minimum Number of Operations to Sort a Binary Tree by Level","memory":"68.7 MB","code":"class Solution {\\n\\n    private int indexOf(int[] arr, int ele) {\\n        for (int i = 0; i < arr.length; i++)\\n            if (arr[i] == ele)\\n                return i;\\n\\n        return -1;\\n    }\\n\\n    private void swap(int[] arr, int i, int j) {\\n        int temp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = temp;\\n    }\\n\\n    private int minSwaps(int[] arr, int N) {\\n        int ans = 0;\\n        int[] temp = Arrays.copyOfRange(arr, 0, N);\\n        Arrays.sort(temp);\\n\\n        for (int i = 0; i < N; i++) {\\n            if (arr[i] != temp[i]) {\\n                ans++;\\n                swap(arr, i, indexOf(arr, temp[i]));\\n            }\\n        }\\n        return ans;\\n    }\\n\\n    public int minimumOperations(TreeNode root) {\\n        Queue<TreeNode> q = new LinkedList<>();\\n        q.add(root);\\n        int count = 0;\\n\\n        while (!q.isEmpty()) {\\n            TreeNode curr = q.peek();\\n            int size = q.size();\\n\\n            for (int i = 0; i < size; i++) {\\n                curr = q.remove();\\n                if (curr.left != null)\\n                    q.add(curr.left);\\n\\n                if (curr.right != null)\\n                    q.add(curr.right);\\n            }\\n\\n            int[] arr = new int[q.size()];\\n            int k = 0;\\n            for (TreeNode num : q)\\n                arr[k++] = num.val;\\n\\n            count += minSwaps(arr, k);\\n        }\\n        return count;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-operations-to-sort-a-binary-tree-by-level","has_notes":false,"flag_type":1,"frontend_id":180},{"id":1485393819,"question_id":3181,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1734866994,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/1485393819/","is_pending":"Not Pending","title":"Find Building Where Alice and Bob Can Meet","memory":"73.5 MB","code":"class Solution {\\n    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\\n        int n = heights.length;\\n        int[][] st = new int[n][20];\\n        int[] Log = new int[n + 1];\\n        Log[0] = -1;\\n        \\n        for (int i = 1; i <= n; i++) {\\n            Log[i] = Log[i >> 1] + 1;\\n        }\\n\\n        for (int i = 0; i < n; i++) {\\n            st[i][0] = heights[i];\\n        }\\n\\n        for (int i = 1; i < 20; i++) {\\n            for (int j = 0; j + (1 << i) <= n; j++) {\\n                st[j][i] = Math.max(st[j][i - 1], st[j + (1 << (i - 1))][i - 1]);\\n            }\\n        }\\n\\n        int[] res = new int[queries.length];\\n        \\n        for (int i = 0; i < queries.length; i++) {\\n            int l = queries[i][0], r = queries[i][1];\\n            if (l > r) {\\n                int temp = l;\\n                l = r;\\n                r = temp;\\n            }\\n\\n            if (l == r) {\\n                res[i] = l;\\n                continue;\\n            }\\n\\n            if (heights[r] > heights[l]) {\\n                res[i] = r;\\n                continue;\\n            }\\n\\n            int maxHeight = Math.max(heights[l], heights[r]);\\n            int left = r + 1, right = n, mid;\\n\\n            while (left < right) {\\n                mid = (left + right) / 2;\\n                int k = Log[mid - r + 1];\\n                int maxInRange = Math.max(st[r][k], st[mid - (1 << k) + 1][k]);\\n\\n                if (maxInRange > maxHeight) {\\n                    right = mid;\\n                } else {\\n                    left = mid + 1;\\n                }\\n            }\\n\\n            res[i] = (left == n) ? -1 : left;\\n        }\\n\\n        return res;\\n    }\\n}","compare_resulttitle_slug":"find-building-where-alice-and-bob-can-meet","has_notes":false,"flag_type":1,"frontend_id":179},{"id":1485066392,"question_id":3620,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1734837215,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1485066392/","is_pending":"Not Pending","title":"Maximum Number of Distinct Elements After Operations","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int maxDistinctElements(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        Set<Integer> distinctElements = new HashSet<>();\\n        \\n        for (int num : nums) {\\n            if (!distinctElements.contains(num)) {\\n                distinctElements.add(num);\\n            } else {\\n                for (int delta = 1; delta <= k; delta++) {\\n                    if (!distinctElements.contains(num - delta)) {\\n                        distinctElements.add(num - delta);\\n                        break;\\n                    } else if (!distinctElements.contains(num + delta)) {\\n                        distinctElements.add(num + delta);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return distinctElements.size();\\n    }\\n}\\n","compare_resulttitle_slug":"maximum-number-of-distinct-elements-after-operations","has_notes":false,"flag_type":1,"frontend_id":178},{"id":1485064949,"question_id":3620,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1734837147,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1485064949/","is_pending":"Not Pending","title":"Maximum Number of Distinct Elements After Operations","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int maxDistinctElements(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        Set<Integer> distinctElements = new HashSet<>();\\n        \\n        for (int num : nums) {\\n            boolean added = false;\\n            for (int delta = -k; delta <= k; delta++) {\\n                int candidate = num + delta;\\n                if (!distinctElements.contains(candidate)) {\\n                    distinctElements.add(candidate);\\n                    added = true;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return distinctElements.size();\\n    }\\n}\\n","compare_resulttitle_slug":"maximum-number-of-distinct-elements-after-operations","has_notes":false,"flag_type":1,"frontend_id":177},{"id":1485046067,"question_id":3656,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months","timestamp":1734836241,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1485046067/","is_pending":"Not Pending","title":"Minimum Number of Operations to Make Elements in Array Distinct","memory":"44.8 MB","code":"import java.util.HashSet;\\n\\nclass Solution {\\n    public int minimumOperations(int[] nums) {\\n        int operat = 0;\\n        \\n        while (true) {\\n            HashSet<Integer> seen = new HashSet<>();\\n            boolean allDistinct = true;\\n            for (int num : nums) {\\n                if (!seen.add(num)) {  \\n                    allDistinct = false;\\n                    break;\\n                }\\n            }\\n            if (allDistinct) {\\n                break;\\n            }\\n            if (nums.length >= 3) {\\n                int[] newArray = new int[nums.length - 3];\\n                System.arraycopy(nums, 3, newArray, 0, newArray.length);\\n                nums = newArray;\\n            } else {\\n                nums = new int[0]; \\n            }\\n            \\n            operat++;\\n        }\\n        \\n        return operat;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-number-of-operations-to-make-elements-in-array-distinct","has_notes":false,"flag_type":1,"frontend_id":176},{"id":1484634329,"question_id":3659,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734793509,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1484634329/","is_pending":"Not Pending","title":"Count Paths With the Given XOR Value","memory":"56.9 MB","code":"import java.util.Arrays;\\n\\nclass Solution {\\n    private static final int MOD = 1000000007;\\n\\n    public int countPathsWithXorValue(int[][] grid, int k) {\\n        int m = grid.length;\\n        int n = grid[0].length;\\n        int[][][] dp = new int[m][n][16];\\n\\n        dp[0][0][grid[0][0]] = 1;\\n\\n        for (int i = 0; i < m; i++) {\\n            for (int j = 0; j < n; j++) {\\n                for (int p = 0; p < 16; p++) {\\n                    if (dp[i][j][p] > 0) {\\n                        if (i + 1 < m) {\\n                            dp[i + 1][j][p ^ grid[i + 1][j]] = (dp[i + 1][j][p ^ grid[i + 1][j]] + dp[i][j][p]) % MOD;\\n                        }\\n                        if (j + 1 < n) {\\n                            dp[i][j + 1][p ^ grid[i][j + 1]] = (dp[i][j + 1][p ^ grid[i][j + 1]] + dp[i][j][p]) % MOD;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        return dp[m - 1][n - 1][k];\\n    }\\n}\\n","compare_resulttitle_slug":"count-paths-with-the-given-xor-value","has_notes":false,"flag_type":1,"frontend_id":175},{"id":1484585991,"question_id":3685,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734791927,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1484585991/","is_pending":"Not Pending","title":"Count Subarrays of Length Three With a Condition","memory":"44.9 MB","code":"class Solution {\\n    public int countSubarrays(int[] nums) {\\n        int co = 0;\\n        for (int i = 0; i < nums.length - 2; i++) {\\n            int a = nums[i];\\n            int b = nums[i + 1];\\n            int c = nums[i + 2];\\n            if (a + c == b / 2.0) {\\n                co++;\\n            }\\n        }\\n        \\n        return co;\\n    }\\n}\\n","compare_resulttitle_slug":"count-subarrays-of-length-three-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":174},{"id":1484147733,"question_id":3058,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734743732,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1484147733/","is_pending":"Not Pending","title":"Maximum Number of K-Divisible Components","memory":"66.3 MB","code":"class Solution {\\n    int count=0;\\n    public long dfs(List<Integer>[] tree,boolean[] visited, int[] values,int root,int k){\\n        visited[root]=true;\\n        long sum=0;\\n        for(int nei:tree[root]){\\n            if(!visited[nei]){\\n                long val = dfs(tree,visited,values,nei,k);\\n                if(val%k==0){\\n                    count++;\\n                }else{\\n                    sum+=val;\\n                }\\n            }\\n        }\\n        return sum+values[root];\\n    }\\n    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {\\n        List<Integer>[] tree= new List[n];\\n        for(int i=0;i<n;i++){\\n            tree[i] = new ArrayList<>();\\n        }\\n        for(int[] edge:edges){\\n            tree[edge[0]].add(edge[1]);\\n            tree[edge[1]].add(edge[0]);\\n        }\\n        boolean[] visited = new boolean[n];\\n        long sum = dfs(tree,visited,values,0,k);\\n        if(sum%k==0){\\n            count++;\\n        }\\n        return count;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-k-divisible-components","has_notes":false,"flag_type":1,"frontend_id":173},{"id":1484147510,"question_id":3058,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734743688,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1484147510/","is_pending":"Not Pending","title":"Maximum Number of K-Divisible Components","memory":"N/A","code":"class Solution {\\n    private int count = 0;\\n    private int k;\\n\\n    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {\\n        this.k = k;\\n        \\n        // build the tree\\n        Node[] nodes = new Node[n];\\n        for (int i = 0; i < n; i++) {\\n            nodes[i] = new Node(values[i]);\\n        }\\n\\n        for (int[] edge : edges) {\\n            Node a = nodes[edge[0]];\\n            Node b = nodes[edge[1]];\\n            a.neighbors.add(b);\\n            b.neighbors.add(a);\\n        }\\n\\n        // visit the tree from the root\\n        getSum(nodes[0], null);\\n        return count;\\n\\n    }\\n\\n    // returns the sum of the subtree rooted at node\\n    private int getSum(Node node, Node parent){\\n        int sum = node.value;\\n        for (Node neighbor : node.neighbors) {\\n            if(neighbor == parent) continue;\\n            sum += getSum(neighbor, node);\\n        }\\n\\n        if(sum %k == 0){\\n            count++;\\n            return 0;\\n        }\\n        return sum;\\n    }\\n\\n\\n    private static class Node{\\n        int value;\\n        List<Node> neighbors = new ArrayList<>();\\n\\n        public Node(int value) {\\n            this.value = value;\\n        }\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000111","title_slug":"maximum-number-of-k-divisible-components","has_notes":false,"flag_type":1,"frontend_id":172},{"id":1484147011,"question_id":3058,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734743589,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1484147011/","is_pending":"Not Pending","title":"Maximum Number of K-Divisible Components","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int maxKDivisibleComponents(int n, int[][] v, int[] values, int k) {\\n        List<Integer>[] adj = new ArrayList[n + 1];\\n        int[] in = new int[n + 1];\\n        for (int i = 0; i < n - 1; i++) {\\n            int u = v[i][0];\\n            int w = v[i][1];\\n            if (adj[u] == null) {\\n                adj[u] = new ArrayList<>();\\n            }\\n            if (adj[w] == null) {\\n                adj[w] = new ArrayList<>();\\n            }\\n            adj[u].add(w);\\n            adj[w].add(u);\\n            in[u]++;\\n            in[w]++;\\n        }\\n        Queue<Integer> q = new LinkedList<>();\\n        for (int i = 0; i < n; i++) {\\n            if (in[i] == 1 || in[i] == 0) {\\n                q.offer(i);\\n            }\\n        }\\n        int c = 0;\\n        while (!q.isEmpty()) {\\n            Queue<Integer> q1 = new LinkedList<>();\\n            while (!q.isEmpty()) {\\n                int f = q.poll();\\n                in[f] = 0;\\n                if (values[f] % k == 0) {\\n                    c++;\\n                    values[f] = 0;\\n                }\\n                for (int i : adj[f]) {\\n                    if (in[i] != 0) {\\n                        in[i]--;\\n                        values[i] += values[f];\\n                        if (in[i] == 1) {\\n                            q1.offer(i);\\n                        }\\n                    }\\n                }\\n            }\\n            q = q1;\\n        }\\n        return c;\\n    }\\n}","compare_result":"1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximum-number-of-k-divisible-components","has_notes":false,"flag_type":1,"frontend_id":171}],"has_next":true,"last_key":""}'
2025-08-25 23:32:32,176 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:32,188 [INFO] __main__.py:245 - Writing sort-matrix-by-diagonals/2025-02-09 08.51.36 - Accepted - runtime 2ms - memory 45.5MB.java
2025-08-25 23:32:32,190 [INFO] __main__.py:208 - Skipping maximum-difference-between-even-and-odd-frequency-i 2025-02-02 08.23.20 in java because a more recent submission has already been exported
2025-08-25 23:32:32,516 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:32,534 [INFO] __main__.py:245 - Writing find-valid-pair-of-adjacent-digits-in-string/2025-02-01 20.55.48 - Accepted - runtime 5ms - memory 43MB.java
2025-08-25 23:32:32,962 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:32,964 [INFO] __main__.py:245 - Writing count-partitions-with-even-sum-difference/2025-01-26 08.35.36 - Accepted - runtime 0ms - memory 42.1MB.java
2025-08-25 23:32:33,291 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:33,306 [INFO] __main__.py:245 - Writing maximum-subarray-with-equal-products/2025-01-05 08.11.24 - Accepted - runtime 3ms - memory 42.9MB.java
2025-08-25 23:32:33,680 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:33,682 [INFO] __main__.py:245 - Writing target-sum/2024-12-28 16.30.03 - Accepted - runtime 633ms - memory 41.4MB.java
2025-08-25 23:32:34,203 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:34,203 [INFO] __main__.py:245 - Writing best-sightseeing-pair/2024-12-28 16.28.58 - Accepted - runtime 2ms - memory 53.4MB.java
2025-08-25 23:32:34,533 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:34,535 [INFO] __main__.py:245 - Writing maximum-sum-of-3-non-overlapping-subarrays/2024-12-28 16.27.43 - Accepted - runtime 10ms - memory 49.1MB.java
2025-08-25 23:32:34,919 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:34,923 [INFO] __main__.py:245 - Writing find-largest-value-in-each-tree-row/2024-12-25 11.50.56 - Accepted - runtime 0ms - memory 46MB.java
2025-08-25 23:32:35,259 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:35,262 [INFO] __main__.py:245 - Writing find-minimum-diameter-after-merging-two-trees/2024-12-24 07.16.38 - Accepted - runtime 83ms - memory 138.5MB.java
2025-08-25 23:32:35,604 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:35,604 [INFO] __main__.py:245 - Writing minimum-number-of-operations-to-sort-a-binary-tree-by-level/2024-12-23 22.32.25 - Accepted - runtime 563ms - memory 68.7MB.java
2025-08-25 23:32:36,065 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:36,074 [INFO] __main__.py:245 - Writing find-building-where-alice-and-bob-can-meet/2024-12-22 16.59.54 - Accepted - runtime 49ms - memory 73.5MB.java
2025-08-25 23:32:36,076 [INFO] __main__.py:188 - Skipping maximum-number-of-distinct-elements-after-operations 2024-12-22 08.43.35 because its status is 'Wrong Answer'
2025-08-25 23:32:36,076 [INFO] __main__.py:188 - Skipping maximum-number-of-distinct-elements-after-operations 2024-12-22 08.42.27 because its status is 'Time Limit Exceeded'
2025-08-25 23:32:36,076 [INFO] __main__.py:208 - Skipping minimum-number-of-operations-to-make-elements-in-array-distinct 2024-12-22 08.27.21 in java because a more recent submission has already been exported
2025-08-25 23:32:36,478 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:36,492 [INFO] __main__.py:245 - Writing count-paths-with-the-given-xor-value/2024-12-21 20.35.09 - Accepted - runtime 42ms - memory 56.9MB.java
2025-08-25 23:32:36,494 [INFO] __main__.py:208 - Skipping count-subarrays-of-length-three-with-a-condition 2024-12-21 20.08.47 in java because a more recent submission has already been exported
2025-08-25 23:32:36,830 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:36,833 [INFO] __main__.py:245 - Writing maximum-number-of-k-divisible-components/2024-12-21 06.45.32 - Accepted - runtime 36ms - memory 66.3MB.java
2025-08-25 23:32:36,833 [INFO] __main__.py:188 - Skipping maximum-number-of-k-divisible-components 2024-12-21 06.44.48 because its status is 'Wrong Answer'
2025-08-25 23:32:36,833 [INFO] __main__.py:188 - Skipping maximum-number-of-k-divisible-components 2024-12-21 06.43.09 because its status is 'Runtime Error'
2025-08-25 23:32:41,835 [DEBUG] leetcode.py:150 - Exporting submissions from 480 to 500
2025-08-25 23:32:42,384 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=480&limit=20 HTTP/11" 200 None
2025-08-25 23:32:42,386 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1484146333,"question_id":287,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734743447,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1484146333/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"59 MB","code":"class Solution {\\n    public int findDuplicate(int[] nums) {\\n        /*int slow = nums[0];\\n        int fast = nums[0];\\n\\n        while (true) {\\n            slow = nums[slow];\\n            fast = nums[nums[fast]];\\n\\n            if (slow == fast) {\\n                break;\\n            }\\n        }\\n\\n        int slow2 = nums[0];\\n\\n        while (slow != slow2) {\\n            slow = nums[slow];\\n            slow2 = nums[slow2];\\n        }\\n\\n        return slow; */\\n       Arrays.sort(nums);\\n       int a=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]==nums[i+1])\\n                {\\n                    a=nums[i];\\n                    break;\\n                }\\n        }\\n        return a;       \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1,"frontend_id":170},{"id":1484146053,"question_id":287,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734743391,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1484146053/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"N/A","code":"class Solution {\\n    public int findDuplicate(int[] nums) {\\n        /*int slow = nums[0];\\n        int fast = nums[0];\\n\\n        while (true) {\\n            slow = nums[slow];\\n            fast = nums[nums[fast]];\\n\\n            if (slow == fast) {\\n                break;\\n            }\\n        }\\n\\n        int slow2 = nums[0];\\n\\n        while (slow != slow2) {\\n            slow = nums[slow];\\n            slow2 = nums[slow2];\\n        }\\n\\n        return slow; */\\n       Arrays.sort(nums);\\n       int a=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            for(int j=i+1;j<nums.length;j++)\\n            {\\n                if(nums[i]==nums[j])\\n                {\\n                    a=nums[i];\\n                    break;\\n                }\\n            }\\n        }\\n        return a;       \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111110000","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1,"frontend_id":169},{"id":1484145548,"question_id":287,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734743296,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1484145548/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"N/A","code":"class Solution {\\n    public int findDuplicate(int[] nums) {\\n        /*int slow = nums[0];\\n        int fast = nums[0];\\n\\n        while (true) {\\n            slow = nums[slow];\\n            fast = nums[nums[fast]];\\n\\n            if (slow == fast) {\\n                break;\\n            }\\n        }\\n\\n        int slow2 = nums[0];\\n\\n        while (slow != slow2) {\\n            slow = nums[slow];\\n            slow2 = nums[slow2];\\n        }\\n\\n        return slow; */\\n       // Arrays.sort(nums);\\n       int a=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            for(int j=i+1;j<nums.length;j++)\\n            {\\n                if(nums[i]==nums[j])\\n                {\\n                    a=nums[i];\\n                    break;\\n                }\\n            }\\n        }\\n        return a;       \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111100000","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1,"frontend_id":168},{"id":1484143066,"question_id":907,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734742774,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1484143066/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"45.1 MB","code":"class Solution {\\n    public int minEatingSpeed(int[] piles, int h) \\n    {\\n        int n=maximum(piles);\\n        int l=1;\\n        int r=n;\\n        int ans=Integer.MAX_VALUE;\\n        while(l<=r)\\n        {\\n            long hr=0;\\n            int mid=(l+r)/2;\\n            for(int i=0;i<piles.length;i++)\\n            {\\n                hr+=(long)(piles[i]+mid-1)/mid;\\n            }\\n            if(hr<=h)\\n            {\\n                ans=Math.min(ans,mid);\\n                r=mid-1;\\n            }\\n            else\\n            {\\n                l=mid+1;\\n            }\\n        }\\n        return ans;\\n    }\\n     static int maximum(int arr[])\\n     {\\n        int max=-1;\\n        for(int i:arr)\\n        {\\n            if(max<i)\\n            {\\n                max=i;\\n            }\\n        }\\n        return max;\\n     }\\n    }\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1,"frontend_id":167},{"id":1483713494,"question_id":2493,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734695664,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1483713494/","is_pending":"Not Pending","title":"Reverse Odd Levels of Binary Tree","memory":"48.3 MB","code":"class Solution {\\n    public TreeNode reverseOddLevels(TreeNode root) {\\n        // if (root == null || root.left == null || root.right == null) \\n        //     return root;\\n        \\n        levelTraverse(root.left, root.right, 0);\\n        return root;\\n    }\\n\\n    private void levelTraverse(TreeNode node1, TreeNode node2, int level) {\\n        if (node1 == null || node2 == null)\\n            return;\\n        \\n        if (level % 2 == 0) {\\n            int val = node1.val;\\n            node1.val = node2.val;\\n            node2.val = val;\\n        }\\n\\n        levelTraverse(node1.left, node2.right, level + 1);\\n        levelTraverse(node1.right, node2.left, level + 1);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-odd-levels-of-binary-tree","has_notes":false,"flag_type":1,"frontend_id":166},{"id":1482840345,"question_id":1570,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734606492,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1482840345/","is_pending":"Not Pending","title":"Final Prices With a Special Discount in a Shop","memory":"44 MB","code":"class Solution {\\n    public int[] finalPrices(int[] prices) {\\n        int n=prices.length;\\n        Stack<Integer> st=new Stack();\\n\\n        for(int i=n-1; i>=0; i--){\\n            // Remove elements from the stack that are greater than the current price\\n            while(!st.isEmpty() && st.peek()>prices[i]){\\n                st.pop();\\n            }\\n            \\n            // Get the discount from the stack or 0 if no valid discount\\n            int discount=st.isEmpty()?0:st.peek();\\n            \\n            // Push the original value before updating\\n            st.push(prices[i]);\\n\\n            // Update the current price with the discount\\n            prices[i]-=discount;           \\n        }\\n\\n        return prices;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"final-prices-with-a-special-discount-in-a-shop","has_notes":false,"flag_type":1,"frontend_id":165},{"id":1482838649,"question_id":780,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734606323,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1482838649/","is_pending":"Not Pending","title":"Max Chunks To Make Sorted","memory":"41.3 MB","code":"class Solution {\\n    public int maxChunksToSorted(int[] arr) {\\n        if (arr == null || arr.length == 0)\\n            return 0;\\n\\n        int count = 0, max = 0;\\n        for (int i = 0; i < arr.length; i++) {\\n            max = Math.max(max, arr[i]);\\n            if (max == i)\\n                count++;\\n        }\\n\\n        return count;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"max-chunks-to-make-sorted","has_notes":false,"flag_type":1,"frontend_id":164},{"id":1482837487,"question_id":1570,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734606206,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1482837487/","is_pending":"Not Pending","title":"Final Prices With a Special Discount in a Shop","memory":"43.9 MB","code":"class Solution {\\n    public int[] finalPrices(int[] prices) {\\n        int n=prices.length;\\n        Stack<Integer> st=new Stack();\\n\\n        for(int i=n-1; i>=0; i--){\\n            // Remove elements from the stack that are greater than the current price\\n            while(!st.isEmpty() && st.peek()>prices[i]){\\n                st.pop();\\n            }\\n            \\n            // Get the discount from the stack or 0 if no valid discount\\n            int discount=st.isEmpty()?0:st.peek();\\n            \\n            // Push the original value before updating\\n            st.push(prices[i]);\\n\\n            // Update the current price with the discount\\n            prices[i]-=discount;           \\n        }\\n\\n        return prices;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"final-prices-with-a-special-discount-in-a-shop","has_notes":false,"flag_type":1,"frontend_id":163},{"id":1482835392,"question_id":1570,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734605995,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1482835392/","is_pending":"Not Pending","title":"Final Prices With a Special Discount in a Shop","memory":"43.6 MB","code":"class Solution {\\n    public int[] finalPrices(int[] prices) {\\n        int n=prices.length;\\n        Stack<Integer> st=new Stack();\\n\\n        for(int i=n-1; i>=0; i--){\\n            // Remove elements from the stack that are greater than the current price\\n            while(!st.isEmpty() && st.peek()>prices[i]){\\n                st.pop();\\n            }\\n            \\n            // Get the discount from the stack or 0 if no valid discount\\n            int discount=st.isEmpty()?0:st.peek();\\n            \\n            // Push the original value before updating\\n            st.push(prices[i]);\\n\\n            // Update the current price with the discount\\n            prices[i]-=discount;           \\n        }\\n\\n        return prices;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"final-prices-with-a-special-discount-in-a-shop","has_notes":false,"flag_type":1,"frontend_id":162},{"id":1480697273,"question_id":2300,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734399660,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1480697273/","is_pending":"Not Pending","title":"Construct String With Repeat Limit","memory":"45.5 MB","code":"class Solution {\\n    public String repeatLimitedString(String s, int repeatLimit) {\\n        int[] freq = new int[26];\\n\\n        for (char c : s.toCharArray())\\n            freq[c - \'a\']++;\\n\\n        int pendingLetterIndex = -1;\\n        StringBuilder sb = new StringBuilder();\\n\\n        for (int i = 25; i >= 0; i--) {\\n            if (freq[i] == 0)\\n                continue;\\n\\n            if (pendingLetterIndex > 0) {\\n                sb.append((char) (\'a\' + i));\\n                freq[i]--;\\n                i = pendingLetterIndex;\\n                pendingLetterIndex = -1;\\n\\n            } else {\\n                for (int j = 0; j < repeatLimit && freq[i] > 0; j++, freq[i]--)\\n                    sb.append((char) (\'a\' + i));\\n\\n                if (freq[i] > 0)\\n                    pendingLetterIndex = i + 1;\\n            }\\n        }\\n        \\n        return sb.toString();\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-string-with-repeat-limit","has_notes":false,"flag_type":1,"frontend_id":161},{"id":1479874187,"question_id":3555,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734321383,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1479874187/","is_pending":"Not Pending","title":"Final Array State After K Multiplication Operations I","memory":"45.1 MB","code":"class Solution {\\n    public int[] getFinalState(int[] nums, int k, int multiplier) {\\n        int[] arr=new int[2];\\n        \\n        for(int i=0; i<k; i++){\\n            arr=getMin(nums);\\n            nums[arr[1]]=arr[0]*multiplier;\\n        }\\n        \\n        return nums;\\n    } \\n    \\n    int[] getMin(int[] nums){\\n        int min=Integer.MAX_VALUE;\\n        int idx=0;\\n        for(int i=0; i<nums.length; i++){\\n            if(nums[i]<min){\\n                min=nums[i];\\n                idx=i;\\n            }\\n        }\\n        \\n        return new int[]{min,idx};\\n    }\\n    \\n}","compare_resulttitle_slug":"final-array-state-after-k-multiplication-operations-i","has_notes":false,"flag_type":1,"frontend_id":160},{"id":1479024742,"question_id":3613,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734230949,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1479024742/","is_pending":"Not Pending","title":"Maximize Amount After Two Days of Conversions","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public double maxAmount(String initialCurrency, List<List<String>> pairs1, double[] rates1, List<List<String>> pairs2, double[] rates2) {\\n        Map<String, Double> day1Map = new HashMap<>();\\n        Map<String, Double> day2Map = new HashMap<>();\\n        \\n        day1Map.put(initialCurrency, 1.0);\\n        \\n        for (int i = 0; i < pairs1.size(); i++) {\\n            String from = pairs1.get(i).get(0);\\n            String to = pairs1.get(i).get(1);\\n            if (day1Map.containsKey(from)) {\\n                double newAmount = day1Map.get(from) * rates1[i];\\n                day1Map.put(to, Math.max(day1Map.getOrDefault(to, 0.0), newAmount));\\n            }\\n            if (day1Map.containsKey(to)) {\\n                double newAmount = day1Map.get(to) * (1 / rates1[i]);\\n                day1Map.put(from, Math.max(day1Map.getOrDefault(from, 0.0), newAmount));\\n            }\\n        }\\n        \\n        for (String currency : day1Map.keySet()) {\\n            day2Map.put(currency, day1Map.get(currency));\\n        }\\n        \\n        for (int i = 0; i < pairs2.size(); i++) {\\n            String from = pairs2.get(i).get(0);\\n            String to = pairs2.get(i).get(1);\\n            if (day2Map.containsKey(from)) {\\n                double newAmount = day2Map.get(from) * rates2[i];\\n                day2Map.put(to, Math.max(day2Map.getOrDefault(to, 0.0), newAmount));\\n            }\\n            if (day2Map.containsKey(to)) {\\n                double newAmount = day2Map.get(to) * (1 / rates2[i]);\\n                day2Map.put(from, Math.max(day2Map.getOrDefault(from, 0.0), newAmount));\\n            }\\n        }\\n        \\n        return day2Map.getOrDefault(initialCurrency, -1.0);\\n    }\\n}\\n","compare_resulttitle_slug":"maximize-amount-after-two-days-of-conversions","has_notes":false,"flag_type":1,"frontend_id":159},{"id":1479023487,"question_id":3613,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734230888,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1479023487/","is_pending":"Not Pending","title":"Maximize Amount After Two Days of Conversions","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public double maxAmount(String initialCurrency, List<List<String>> pairs1, double[] rates1, List<List<String>> pairs2, double[] rates2) {\\n        Map<String, Double> day1Map = new HashMap<>();\\n        Map<String, Double> day2Map = new HashMap<>();\\n\\n        day1Map.put(initialCurrency, 1.0);\\n        for (int i = 0; i < pairs1.size(); i++) {\\n            String from = pairs1.get(i).get(0);\\n            String to = pairs1.get(i).get(1);\\n            if (day1Map.containsKey(from)) {\\n                double newAmount = day1Map.get(from) * rates1[i];\\n                day1Map.put(to, Math.max(day1Map.getOrDefault(to, 0.0), newAmount));\\n            }\\n            if (day1Map.containsKey(to)) {\\n                double newAmount = day1Map.get(to) * (1 / rates1[i]);\\n                day1Map.put(from, Math.max(day1Map.getOrDefault(from, 0.0), newAmount));\\n            }\\n        }\\n\\n        for (String currency : day1Map.keySet()) {\\n            day2Map.put(currency, day1Map.get(currency));\\n        }\\n\\n        for (int i = 0; i < pairs2.size(); i++) {\\n            String from = pairs2.get(i).get(0);\\n            String to = pairs2.get(i).get(1);\\n            if (day2Map.containsKey(from)) {\\n                double newAmount = day2Map.get(from) * rates2[i];\\n                day2Map.put(to, Math.max(day2Map.getOrDefault(to, 0.0), newAmount));\\n            }\\n            if (day2Map.containsKey(to)) {\\n                double newAmount = day2Map.get(to) * (1 / rates2[i]);\\n                day2Map.put(from, Math.max(day2Map.getOrDefault(from, 0.0), newAmount));\\n            }\\n        }\\n\\n        return day2Map.getOrDefault(initialCurrency, -1.0);\\n    }\\n}\\n","compare_resulttitle_slug":"maximize-amount-after-two-days-of-conversions","has_notes":false,"flag_type":1,"frontend_id":158},{"id":1479005404,"question_id":3632,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734230182,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1479005404/","is_pending":"Not Pending","title":"Button with Longest Push Time","memory":"45 MB","code":"class Solution {\\n    public int buttonWithLongestTime(int[][] events) {\\n        int l = events.length;\\n        int longestDuration = events[0][1];\\n        int buttonIndex = events[0][0];\\n        \\n        for (int i = 1; i < l; i++) {\\n            int duration = events[i][1] - events[i - 1][1];\\n            if (duration > longestDuration || (duration == longestDuration && events[i][0] < buttonIndex)) {\\n                longestDuration = duration;\\n                buttonIndex = events[i][0];\\n            }\\n        }\\n        \\n        return buttonIndex;\\n    }\\n}\\n","compare_resulttitle_slug":"button-with-longest-push-time","has_notes":false,"flag_type":1,"frontend_id":157},{"id":1478998152,"question_id":1917,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 1\xc2\xa0week","timestamp":1734229807,"status":10,"status_display":"Accepted","runtime":"284 ms","url":"/submissions/detail/1478998152/","is_pending":"Not Pending","title":"Maximum Average Pass Ratio","memory":"96.7 MB","code":"class Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<ClassRecord> pq = new PriorityQueue<>(new Compare());\\n        \\n        for(int[] cl : classes)\\n            pq.add(new ClassRecord(cl));\\n        \\n        ClassRecord cl;\\n        while(extraStudents-- > 0)\\n            pq.add(pq.remove().addOneStudent());\\n        \\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            cl = pq.remove();\\n            sum += (double)cl.pass / cl.total;\\n        }\\n\\n        return sum / classes.length;\\n    }\\n}\\n\\nclass ClassRecord{\\n    int pass;\\n    int total;\\n    double inc;\\n\\n    public ClassRecord(int[] array){\\n        pass = array[0];\\n        total = array[1];\\n        inc = getIncrement();\\n    }\\n\\n    public ClassRecord addOneStudent(){\\n        pass++;\\n        total++;\\n        inc = getIncrement();\\n        return this;\\n    }\\n\\n    private double getIncrement(){\\n        return (pass + 1.0) / (total + 1) - (double)pass / total;\\n    }\\n}\\n\\nclass Compare implements Comparator<ClassRecord>{\\n    public int compare(ClassRecord a, ClassRecord b){\\n        if(a.inc < b.inc)\\n            return 1;\\n        else if(a.inc > b.inc)\\n            return -1;\\n        else\\n            return 0;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-pass-ratio","has_notes":false,"flag_type":1,"frontend_id":156},{"id":1478526138,"question_id":2868,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734175804,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1478526138/","is_pending":"Not Pending","title":"Continuous Subarrays","memory":"59.3 MB","code":"class Solution {\\n    public long continuousSubarrays(int[] nums) {\\n        int n = nums.length;\\n        int j = 0;\\n        long cnt = 0;\\n\\n        Map<Integer, Integer> map = new HashMap<>();\\n\\n        for (int i = 0; i < n; i++) {\\n            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\\n\\n            while ((i - j + 1) > getCount(nums[i], map)) {\\n                map.put(nums[j], map.get(nums[j]) - 1);\\n\\n                j++;\\n            }\\n\\n            cnt += (i - j + 1);\\n        }\\n\\n        return cnt;\\n    }\\n\\n    private int getCount(int num, Map<Integer, Integer> map) {\\n        return map.getOrDefault(num, 0) + map.getOrDefault(num - 1, 0) +\\n            map.getOrDefault(num + 1, 0) + map.getOrDefault(num - 2, 0) +\\n            map.getOrDefault(num + 2, 0);\\n    }\\n}","compare_resulttitle_slug":"continuous-subarrays","has_notes":false,"flag_type":1,"frontend_id":155},{"id":1478367912,"question_id":745,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734158989,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1478367912/","is_pending":"Not Pending","title":"Find Smallest Letter Greater Than Target","memory":"44.4 MB","code":"class Solution {\\n    public char nextGreatestLetter(char[] letters, char target) \\n    {\\n        return bs(letters,target);\\n    }\\n    private char bs(char[] letters,char target)\\n    {\\n        int l=0,h=letters.length-1;\\n        char a=letters[0];\\n        while(l<=h)\\n        {\\n            int m=l+(h-l)/2;\\n            if(letters[m]>target)\\n            {\\n                a=letters[m];\\n                h=m-1;\\n            }\\n            else\\n            {\\n                l=m+1;\\n            }\\n        }\\n        return a;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-smallest-letter-greater-than-target","has_notes":false,"flag_type":1,"frontend_id":154},{"id":1478336818,"question_id":268,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734156027,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1478336818/","is_pending":"Not Pending","title":"Missing Number","memory":"45.2 MB","code":"class Solution {\\n    public int missingNumber(int[] nums) \\n    {\\n        Arrays.sort(nums);\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]!=i)\\n            {\\n                return i;\\n            }\\n        }\\n        return nums.length;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"missing-number","has_notes":false,"flag_type":1,"frontend_id":153},{"id":1477933115,"question_id":2695,"lang":"python3","lang_name":"Python3","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734104292,"status":10,"status_display":"Accepted","runtime":"503 ms","url":"/submissions/detail/1477933115/","is_pending":"Not Pending","title":"Find Score of an Array After Marking All Elements","memory":"37.6 MB","code":"from heapq import heappush, heappop\\n\\nclass Solution:\\n    def findScore(self, nums):\\n        n = len(nums)\\n        pq = []\\n        for i, val in enumerate(nums):\\n            heappush(pq, (val, i))\\n        \\n        sum_ = 0\\n        vis = [False] * n\\n        while pq:\\n            val, ind = heappop(pq)\\n            if vis[ind]:\\n                continue\\n            sum_ += val\\n            vis[ind] = True\\n            if ind - 1 >= 0:\\n                vis[ind - 1] = True\\n            if ind + 1 < n:\\n                vis[ind + 1] = True\\n        return sum_","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-score-of-an-array-after-marking-all-elements","has_notes":false,"flag_type":1,"frontend_id":152},{"id":1477932664,"question_id":2695,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734104253,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1477932664/","is_pending":"Not Pending","title":"Find Score of an Array After Marking All Elements","memory":"N/A","code":"class Solution {\\n    public long findScore(int[] nums) {\\n        int n = nums.length;\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\\n        for (int i = 0; i < n; i++) {\\n            pq.offer(new int[]{nums[i], i});\\n        }\\n\\n        long sum = 0;\\n        boolean[] vis = new boolean[n];\\n        while (!pq.isEmpty()) {\\n            int[] top = pq.poll();\\n            int val = top[0], ind = top[1];\\n            if (vis[ind]) continue;\\n            sum += val;\\n            vis[ind] = true;\\n            if (ind - 1 >= 0) vis[ind - 1] = true;\\n            if (ind + 1 < n) vis[ind + 1] = true;\\n        }\\n        return sum;\\n    }\\n}","compare_resulttitle_slug":"find-score-of-an-array-after-marking-all-elements","has_notes":false,"flag_type":1,"frontend_id":151}],"has_next":true,"last_key":""}'
2025-08-25 23:32:42,746 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:42,748 [INFO] __main__.py:245 - Writing find-the-duplicate-number/2024-12-21 06.40.47 - Accepted - runtime 34ms - memory 59MB.java
2025-08-25 23:32:42,749 [INFO] __main__.py:188 - Skipping find-the-duplicate-number 2024-12-21 06.39.51 because its status is 'Time Limit Exceeded'
2025-08-25 23:32:42,749 [INFO] __main__.py:188 - Skipping find-the-duplicate-number 2024-12-21 06.38.16 because its status is 'Time Limit Exceeded'
2025-08-25 23:32:43,200 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:43,205 [INFO] __main__.py:245 - Writing koko-eating-bananas/2024-12-21 06.29.34 - Accepted - runtime 10ms - memory 45.1MB.java
2025-08-25 23:32:43,570 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:43,571 [INFO] __main__.py:245 - Writing reverse-odd-levels-of-binary-tree/2024-12-20 17.24.24 - Accepted - runtime 0ms - memory 48.3MB.java
2025-08-25 23:32:43,906 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:43,906 [INFO] __main__.py:245 - Writing final-prices-with-a-special-discount-in-a-shop/2024-12-19 16.38.12 - Accepted - runtime 4ms - memory 44MB.java
2025-08-25 23:32:44,241 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:44,245 [INFO] __main__.py:245 - Writing max-chunks-to-make-sorted/2024-12-19 16.35.23 - Accepted - runtime 0ms - memory 41.3MB.java
2025-08-25 23:32:44,245 [INFO] __main__.py:208 - Skipping final-prices-with-a-special-discount-in-a-shop 2024-12-19 16.33.26 in java because a more recent submission has already been exported
2025-08-25 23:32:44,247 [INFO] __main__.py:208 - Skipping final-prices-with-a-special-discount-in-a-shop 2024-12-19 16.29.55 in java because a more recent submission has already been exported
2025-08-25 23:32:44,593 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:44,597 [INFO] __main__.py:245 - Writing construct-string-with-repeat-limit/2024-12-17 07.11.00 - Accepted - runtime 20ms - memory 45.5MB.java
2025-08-25 23:32:45,050 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:45,052 [INFO] __main__.py:245 - Writing final-array-state-after-k-multiplication-operations-i/2024-12-16 09.26.23 - Accepted - runtime 1ms - memory 45.1MB.java
2025-08-25 23:32:45,054 [INFO] __main__.py:188 - Skipping maximize-amount-after-two-days-of-conversions 2024-12-15 08.19.09 because its status is 'Wrong Answer'
2025-08-25 23:32:45,054 [INFO] __main__.py:188 - Skipping maximize-amount-after-two-days-of-conversions 2024-12-15 08.18.08 because its status is 'Wrong Answer'
2025-08-25 23:32:45,389 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:45,396 [INFO] __main__.py:245 - Writing button-with-longest-push-time/2024-12-15 08.06.22 - Accepted - runtime 0ms - memory 45MB.java
2025-08-25 23:32:45,773 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:45,773 [INFO] __main__.py:245 - Writing maximum-average-pass-ratio/2024-12-15 08.00.07 - Accepted - runtime 284ms - memory 96.7MB.java
2025-08-25 23:32:46,114 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:46,119 [INFO] __main__.py:245 - Writing continuous-subarrays/2024-12-14 17.00.04 - Accepted - runtime 62ms - memory 59.3MB.java
2025-08-25 23:32:46,604 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:46,610 [INFO] __main__.py:245 - Writing find-smallest-letter-greater-than-target/2024-12-14 12.19.49 - Accepted - runtime 0ms - memory 44.4MB.java
2025-08-25 23:32:46,938 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:46,938 [INFO] __main__.py:245 - Writing missing-number/2024-12-14 11.30.27 - Accepted - runtime 5ms - memory 45.2MB.java
2025-08-25 23:32:47,503 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:47,507 [INFO] __main__.py:245 - Writing find-score-of-an-array-after-marking-all-elements/2024-12-13 21.08.12 - Accepted - runtime 503ms - memory 37.6MB.py
2025-08-25 23:32:47,509 [INFO] __main__.py:188 - Skipping find-score-of-an-array-after-marking-all-elements 2024-12-13 21.07.33 because its status is 'Wrong Answer'
2025-08-25 23:32:52,510 [DEBUG] leetcode.py:150 - Exporting submissions from 500 to 520
2025-08-25 23:32:52,926 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=500&limit=20 HTTP/11" 200 None
2025-08-25 23:32:52,935 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1477931674,"question_id":2695,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734104166,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1477931674/","is_pending":"Not Pending","title":"Find Score of an Array After Marking All Elements","memory":"N/A","code":"class Solution {\\n    public long findScore(int[] nums) {\\n        int n = nums.length;\\n        int[] ord = new int[n];\\n        for (int i = 0; i < n; i++) ord[i] = i;\\n        \\n        Arrays.sort(ord, (a, b) -> nums[a] != nums[b] ? Integer.compare(nums[a], nums[b]) : Integer.compare(a, b));\\n        \\n        boolean[] m = new boolean[n];\\n        long score = 0;\\n        \\n        for (int x : ord) {\\n            if (m[x]) continue;\\n            score += nums[x];\\n            m[x] = true;\\n            if (x > 0) m[x - 1] = true;\\n            if (x + 1 < n) m[x + 1] = true;\\n        }\\n        \\n        return score;\\n    }\\n}","compare_result":null,"title_slug":"find-score-of-an-array-after-marking-all-elements","has_notes":false,"flag_type":1,"frontend_id":150},{"id":1477042675,"question_id":2692,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734012744,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1477042675/","is_pending":"Not Pending","title":"Take Gifts From the Richest Pile","memory":"42.8 MB","code":"class Solution {\\n    public long pickGifts(int[] g, int k) {\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\\n        for (int val : g)\\n            maxHeap.add(val);\\n\\n        for (int i = 0; i < k && maxHeap.peek() > 1; i++) {\\n            int x = maxHeap.poll();\\n            maxHeap.add((int) Math.sqrt(x));\\n        }\\n\\n        long sum = 0;\\n        for (int val : maxHeap)\\n            sum += val;\\n\\n        return sum;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"take-gifts-from-the-richest-pile","has_notes":false,"flag_type":1,"frontend_id":149},{"id":1477042398,"question_id":2692,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1734012723,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1477042398/","is_pending":"Not Pending","title":"Take Gifts From the Richest Pile","memory":"42.4 MB","code":"class Solution {\\n    public long pickGifts(int[] g, int k) {\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\\n        for (int val : g)\\n            maxHeap.add(val);\\n\\n        for (int i = 0; i < k && maxHeap.peek() > 1; i++) {\\n            int x = maxHeap.poll();\\n            maxHeap.add((int) Math.sqrt(x));\\n        }\\n\\n        long sum = 0;\\n        for (int val : maxHeap)\\n            sum += val;\\n\\n        return sum;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"take-gifts-from-the-richest-pile","has_notes":false,"flag_type":1,"frontend_id":148},{"id":1476869819,"question_id":136,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733995788,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1476869819/","is_pending":"Not Pending","title":"Single Number","memory":"46 MB","code":"class Solution {\\n    public int singleNumber(int[] nums) \\n    {\\n       int x=0;\\n       for(int i=0;i<nums.length;i++) \\n       {\\n          x=x^nums[i];\\n       }\\n       return x;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"single-number","has_notes":false,"flag_type":1,"frontend_id":147},{"id":1476174878,"question_id":6,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733925917,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1476174878/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"45.1 MB","code":"public class Solution {\\n    public String convert(String s, int numRows) {\\n        if (numRows == 1 || numRows >= s.length()) return s;\\n        StringBuilder[] rows = new StringBuilder[Math.min(numRows, s.length())];\\n        for (int i = 0; i < rows.length; i++) rows[i] = new StringBuilder();\\n        int curRow = 0;\\n        boolean goingDown = false;\\n\\n        for (char c : s.toCharArray()) {\\n            rows[curRow].append(c);\\n            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\\n            curRow += goingDown ? 1 : -1;\\n        }\\n\\n        StringBuilder result = new StringBuilder();\\n        for (StringBuilder row : rows) result.append(row);\\n        return result.toString();\\n    }\\n}","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":146},{"id":1476148015,"question_id":2891,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733923674,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1476148015/","is_pending":"Not Pending","title":"Maximum Beauty of an Array After Applying Operation","memory":"63 MB","code":"class Solution {\\n    public int maximumBeauty(int[] nums, int k) {\\n        if (nums.length == 1)\\n            return 1;\\n\\n        int maxBeauty = 0;\\n        int maxValue = 0;\\n\\n        for (int num : nums)\\n            maxValue = Math.max(maxValue, num);\\n\\n        int[] count = new int[maxValue + 1];\\n\\n        for (int num : nums) {\\n            count[Math.max(num - k, 0)]++;\\n            count[Math.min(num + k + 1, maxValue)]--;\\n        }\\n\\n        int currentSum = 0;\\n\\n        for (int val : count) {\\n            currentSum += val;\\n            maxBeauty = Math.max(maxBeauty, currentSum);\\n        }\\n\\n        return maxBeauty;\\n    }\\n}","compare_resulttitle_slug":"maximum-beauty-of-an-array-after-applying-operation","has_notes":false,"flag_type":1,"frontend_id":145},{"id":1475178241,"question_id":349,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733828513,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1475178241/","is_pending":"Not Pending","title":"Intersection of Two Arrays","memory":"42.9 MB","code":"class Solution {\\n    public int[] intersection(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums2);\\n        Arrays.sort(nums1);\\n        ArrayList<Integer> result = new ArrayList<>();\\n        int previousElement = Integer.MIN_VALUE;\\n\\n        for (int i = 0; i < nums1.length; i++) {\\n            if (previousElement != nums1[i]) {\\n                int low = 0, high = nums2.length - 1, mid;\\n\\n                while (low <= high) {\\n                    mid = low + (high - low) / 2;\\n\\n                    if (nums2[mid] == nums1[i]) {\\n                        result.add(nums1[i]);\\n                        break;\\n                    } else if (nums1[i] > nums2[mid]) {\\n                        low = mid + 1;\\n                    } else {\\n                        high = mid - 1;\\n                    }\\n                }\\n\\n                previousElement = nums1[i];\\n            }\\n        }\\n\\n        int[] arr = new int[result.size()];\\n        for (int i = 0; i < result.size(); i++) {\\n            arr[i] = result.get(i);\\n        }\\n        return arr;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"intersection-of-two-arrays","has_notes":false,"flag_type":1,"frontend_id":144},{"id":1475154235,"question_id":3267,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733826106,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1475154235/","is_pending":"Not Pending","title":"Find Longest Special Substring That Occurs Thrice I","memory":"42.7 MB","code":"public class Solution {\\n    public int maximumLength(String s) {\\n        int n = s.length();\\n        int l = 1, r = n;\\n\\n        if (!helper(s, n, l)) return -1;\\n\\n        while (l + 1 < r) {\\n            int mid = (l + r) / 2;\\n            if (helper(s, n, mid)) l = mid;\\n            else r = mid;\\n        }\\n\\n        return l;\\n    }\\n\\n    private boolean helper(String s, int n, int x) {\\n        int[] cnt = new int[26];\\n        int p = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            while (s.charAt(p) != s.charAt(i)) p++;\\n            if (i - p + 1 >= x) cnt[s.charAt(i) - \'a\']++;\\n            if (cnt[s.charAt(i) - \'a\'] > 2) return true;\\n        }\\n\\n        return false;\\n    }\\n}","compare_resulttitle_slug":"find-longest-special-substring-that-occurs-thrice-i","has_notes":false,"flag_type":1,"frontend_id":143},{"id":1474431063,"question_id":3427,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733756995,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1474431063/","is_pending":"Not Pending","title":"Special Array II","memory":"98.9 MB","code":"class Solution {\\n    public boolean[] isArraySpecial(int[] nums, int[][] queries) {\\n        int n = nums.length;\\n        int[] prefix = new int[n]; // Prefix array to count special pairs\\n        boolean[] result = new boolean[queries.length]; // Result array\\n        \\n        // Step 1: Build the prefix array\\n        for (int i = 1; i < n; i++) {\\n            prefix[i] = prefix[i - 1];\\n            if ((nums[i - 1] % 2 == 0 && nums[i] % 2 == 0) || \\n                (nums[i - 1] % 2 != 0 && nums[i] % 2 != 0)) {\\n                prefix[i]++;\\n            }\\n        }\\n\\n        // Step 2: Process each query\\n        for (int i = 0; i < queries.length; i++) {\\n            int left = queries[i][0];\\n            int right = queries[i][1];\\n            \\n            // Calculate the number of special pairs in the range\\n            int specialCount = prefix[right] - (left > 0 ? prefix[left] : 0);\\n            \\n            // If no special pairs, the result is true; otherwise, false\\n            result[i] = (specialCount == 0);\\n        }\\n\\n        return result;\\n    }\\n}","compare_resulttitle_slug":"special-array-ii","has_notes":false,"flag_type":1,"frontend_id":142},{"id":1473115827,"question_id":3651,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733626914,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1473115827/","is_pending":"Not Pending","title":"Transformed Array","memory":"45.2 MB","code":"class Solution {\\n    public int[] constructTransformedArray(int[] nums) {\\n        int n = nums.length;\\n        int[] resul = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] == 0) {\\n                resul[i] = nums[i];\\n            } else {\\n                \\n                int newIndex = (i + nums[i]) % n;\\n                if (newIndex < 0) {\\n                    newIndex += n; \\n                }\\n                resul[i] = nums[newIndex];\\n            }\\n        }\\n\\n        return resul;\\n    }\\n}\\n","compare_resulttitle_slug":"transformed-array","has_notes":false,"flag_type":1,"frontend_id":141},{"id":1473064454,"question_id":1463,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733621918,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1473064454/","is_pending":"Not Pending","title":"The K Weakest Rows in a Matrix","memory":"44.9 MB","code":"class Solution {\\n    public int[] kWeakestRows(int[][] mat, int k) {\\n        int count_soldiers = 0;\\n        int[] arr = new int[mat.length];\\n        for(int i=0; i<mat.length; i++){\\n            for(int j=0; j<mat[i].length; j++){\\n                if(mat[i][j]==1){\\n                    count_soldiers++;\\n                }\\n            }\\n            arr[i] = count_soldiers;\\n            count_soldiers = 0;\\n        }\\n        \\n        int[] new_arr = new int[arr.length];\\n        System.arraycopy(arr, 0, new_arr, 0, new_arr.length);\\n        Arrays.sort(new_arr);\\n        int[] ans = new int[k];\\n        \\n        int min;\\n        for(int i=0; i<k; i++){\\n            min = i;\\n            for(int j=0; j<arr.length; j++){\\n                if(arr[j]==new_arr[min] && arr[j]!=-1){\\n                    min = j;\\n                    arr[j] = -1;\\n                    break;\\n                }\\n            }\\n            ans[i] = min;\\n        }\\n        return ans;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"the-k-weakest-rows-in-a-matrix","has_notes":false,"flag_type":1,"frontend_id":140},{"id":1473054151,"question_id":2164,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1733620031,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1473054151/","is_pending":"Not Pending","title":"Two Best Non-Overlapping Events","memory":"89.7 MB","code":"\\nclass Solution {\\n\\n    public int maxTwoEvents(int[][] events) {\\n        if(events == null || events.length < 1) {\\n            return 0;\\n        }\\n\\t\\t\\n\\t\\t\\n        Arrays.sort(events, (a, b) -> a[0] == b[0] ? b[2] - a[2] : a[0] - b[0]);\\n        \\n        int[] maxArr = new int[events.length];\\n        \\n        maxArr[events.length - 1] = events[events.length - 1][2];\\n        for(int i = events.length - 2; i >= 0; i--) {\\n            maxArr[i] = Math.max(maxArr[i + 1], events[i][2]);\\n        }\\n        \\n\\t\\t\\n        int ans = events[events.length - 1][2];\\n        \\n        for(int i = 0; i < events.length - 1; i++) {\\n            int index = find(events, events[i][1], i + 1);\\n            \\n            if(index == -1) {\\n\\t\\t\\t\\n                ans = Math.max(ans, events[i][2]);\\n            } else {\\n                ans = Math.max(ans, events[i][2] + maxArr[index]);\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    private int find(int[][] events, int target, int left) {\\n        int right = events.length - 1;\\n        \\n        while(left + 1 < right) {\\n            int mid = left + (right - left) / 2;\\n            \\n            if(events[mid][0] <= target) {\\n                left = mid;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        \\n        if(events[left][0] > target) {\\n            return left;\\n        }\\n        \\n        if(events[right][0] > target) {\\n            return right;\\n        }\\n        \\n        return -1;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-best-non-overlapping-events","has_notes":false,"flag_type":1,"frontend_id":139},{"id":1472758636,"question_id":3621,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733587069,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1472758636/","is_pending":"Not Pending","title":"Minimum Operations to Make Array Values Equal to K","memory":"44.3 MB","code":"class Solution {\\n    public int minOperations(int[] nums, int k) \\n    {\\n        int n=nums.length;\\n        int ct=count(nums,k);\\n        HashSet<Integer> hanss=new HashSet<>();\\n        if(ct==0){\\n            for(int i=0;i<n;i++){\\n                if(nums[i] != k)\\n                hanss.add(nums[i]);\\n            }\\n        }\\n        else{\\n            return -1;\\n        }\\n        return hanss.size();\\n    }\\n    int count(int a[],int k){\\n        int ct=0;\\n        for(int i=0;i<a.length;i++){\\n            if(a[i]<k)\\n                ct++;\\n        }\\n        return ct;\\n    }\\n}","compare_resulttitle_slug":"minimum-operations-to-make-array-values-equal-to-k","has_notes":false,"flag_type":1,"frontend_id":138},{"id":1472262493,"question_id":287,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733537349,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1472262493/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"58.2 MB","code":"class Solution {\\n    public int findDuplicate(int[] nums) {\\n        int slow = nums[0];\\n        int fast = nums[0];\\n\\n        while (true) {\\n            slow = nums[slow];\\n            fast = nums[nums[fast]];\\n\\n            if (slow == fast) {\\n                break;\\n            }\\n        }\\n\\n        int slow2 = nums[0];\\n\\n        while (slow != slow2) {\\n            slow = nums[slow];\\n            slow2 = nums[slow2];\\n        }\\n\\n        return slow;        \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1,"frontend_id":137},{"id":1472259822,"question_id":2524,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733536849,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1472259822/","is_pending":"Not Pending","title":"Largest Positive Integer That Exists With Its Negative","memory":"45 MB","code":"import java.util.Arrays;\\n\\nclass Solution {\\n    public int findMaxK(int[] nums) {\\n        if (nums == null || nums.length == 0) {\\n            return -1; \\n        }\\n\\n        Arrays.sort(nums);\\n\\n        for (int i = 0; i < nums.length && nums[i] < 0; i++) {\\n            int val = -nums[i];\\n            int index = search(nums, val);\\n            if (index >= 0) {\\n                return val; \\n            }\\n        }\\n\\n        return -1; \\n    }\\n\\n    private static int search(int[] arr, int t) {\\n        int s = 0;\\n        int e = arr.length - 1;\\n\\n        while (s <= e) {\\n            int m = s + (e - s) / 2;\\n            if (arr[m] == t) {\\n                return m; \\n            } else if (arr[m] < t) {\\n                s = m + 1;\\n            } else {\\n                e = m - 1;\\n            }\\n        }\\n        return -1; \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-positive-integer-that-exists-with-its-negative","has_notes":false,"flag_type":1,"frontend_id":136},{"id":1472255628,"question_id":2083,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733536075,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1472255628/","is_pending":"Not Pending","title":"Three Divisors","memory":"40.9 MB","code":"class Solution {\\n    public boolean isThree(int n) \\n    {\\n        int c=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(n%i==0)\\n            {\\n                c++;\\n            }\\n        }\\n        if(c==3)\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"three-divisors","has_notes":false,"flag_type":1,"frontend_id":135},{"id":1472253485,"question_id":507,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733535665,"status":10,"status_display":"Accepted","runtime":"2101 ms","url":"/submissions/detail/1472253485/","is_pending":"Not Pending","title":"Perfect Number","memory":"40.6 MB","code":"class Solution {\\n    public boolean checkPerfectNumber(int num) \\n    {\\n      int c=num;\\n      for(int i=1;i<num;i++)\\n      {\\n        if(num%i==0)\\n        {\\n            c=c-i;\\n        }\\n      }\\n      return c==0;  \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"perfect-number","has_notes":false,"flag_type":1,"frontend_id":134},{"id":1472247451,"question_id":2634,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733534486,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1472247451/","is_pending":"Not Pending","title":"Minimum Common Value","memory":"62.5 MB","code":"class Solution {\\n    public int getCommon(int[] nums1, int[] nums2) \\n    {\\n        int i=0,j=0;\\n        while(i<nums1.length&&j<nums2.length)\\n        {\\n            if(nums1[i]==nums2[j])\\n            {\\n                return nums1[i];\\n            }\\n            else if(nums2[j]<nums1[i])\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                i++;\\n            }\\n        }\\n        return -1;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-common-value","has_notes":false,"flag_type":1,"frontend_id":133},{"id":1472243530,"question_id":2210,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733533664,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1472243530/","is_pending":"Not Pending","title":"Find Target Indices After Sorting Array","memory":"43 MB","code":"class Solution {\\n    public List<Integer> targetIndices(int[] nums, int target) {\\n        int count = 0, lessthan = 0;\\n        for (int n : nums) {\\n            if (n == target) count++;\\n            if (n < target) lessthan++;\\n        }\\n        \\n        List<Integer> result = new ArrayList<>();\\n        for (int i = 0; i < count; i++) {\\n            result.add(lessthan++);\\n        }\\n        return result;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-target-indices-after-sorting-array","has_notes":false,"flag_type":1,"frontend_id":132},{"id":1472241136,"question_id":540,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733533191,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1472241136/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"50.3 MB","code":"class Solution {\\n    public int singleNonDuplicate(int[] nums) \\n    {\\n        int x=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            x=x^nums[i];\\n        }\\n        return x;\\n    }\\n}","compare_result":"1111111111111111","title_slug":"single-element-in-a-sorted-array","has_notes":false,"flag_type":1,"frontend_id":131}],"has_next":true,"last_key":""}'
2025-08-25 23:32:52,935 [INFO] __main__.py:188 - Skipping find-score-of-an-array-after-marking-all-elements 2024-12-13 21.06.06 because its status is 'Compile Error'
2025-08-25 23:32:53,968 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:53,972 [INFO] __main__.py:245 - Writing take-gifts-from-the-richest-pile/2024-12-12 19.42.24 - Accepted - runtime 5ms - memory 42.8MB.java
2025-08-25 23:32:53,974 [INFO] __main__.py:208 - Skipping take-gifts-from-the-richest-pile 2024-12-12 19.42.03 in java because a more recent submission has already been exported
2025-08-25 23:32:54,501 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:54,504 [INFO] __main__.py:245 - Writing single-number/2024-12-12 14.59.48 - Accepted - runtime 1ms - memory 46MB.java
2025-08-25 23:32:54,982 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:54,984 [INFO] __main__.py:245 - Writing zigzag-conversion/2024-12-11 19.35.17 - Accepted - runtime 4ms - memory 45.1MB.java
2025-08-25 23:32:55,309 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:55,317 [INFO] __main__.py:245 - Writing maximum-beauty-of-an-array-after-applying-operation/2024-12-11 18.57.54 - Accepted - runtime 4ms - memory 63MB.java
2025-08-25 23:32:55,661 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:55,665 [INFO] __main__.py:245 - Writing intersection-of-two-arrays/2024-12-10 16.31.53 - Accepted - runtime 4ms - memory 42.9MB.java
2025-08-25 23:32:56,221 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:56,225 [INFO] __main__.py:245 - Writing find-longest-special-substring-that-occurs-thrice-i/2024-12-10 15.51.46 - Accepted - runtime 2ms - memory 42.7MB.java
2025-08-25 23:32:56,564 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:56,570 [INFO] __main__.py:245 - Writing special-array-ii/2024-12-09 20.39.55 - Accepted - runtime 3ms - memory 98.9MB.java
2025-08-25 23:32:56,911 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:56,913 [INFO] __main__.py:245 - Writing transformed-array/2024-12-08 08.31.54 - Accepted - runtime 1ms - memory 45.2MB.java
2025-08-25 23:32:57,261 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:57,271 [INFO] __main__.py:245 - Writing the-k-weakest-rows-in-a-matrix/2024-12-08 07.08.38 - Accepted - runtime 2ms - memory 44.9MB.java
2025-08-25 23:32:57,613 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:57,623 [INFO] __main__.py:245 - Writing two-best-non-overlapping-events/2024-12-08 06.37.11 - Accepted - runtime 37ms - memory 89.7MB.java
2025-08-25 23:32:57,623 [INFO] __main__.py:208 - Skipping minimum-operations-to-make-array-values-equal-to-k 2024-12-07 21.27.49 in java because a more recent submission has already been exported
2025-08-25 23:32:57,623 [INFO] __main__.py:208 - Skipping find-the-duplicate-number 2024-12-07 07.39.09 in java because a more recent submission has already been exported
2025-08-25 23:32:57,952 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:57,954 [INFO] __main__.py:245 - Writing largest-positive-integer-that-exists-with-its-negative/2024-12-07 07.30.49 - Accepted - runtime 4ms - memory 45MB.java
2025-08-25 23:32:58,271 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:58,271 [INFO] __main__.py:245 - Writing three-divisors/2024-12-07 07.17.55 - Accepted - runtime 1ms - memory 40.9MB.java
2025-08-25 23:32:59,644 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:32:59,653 [INFO] __main__.py:245 - Writing perfect-number/2024-12-07 07.11.05 - Accepted - runtime 2101ms - memory 40.6MB.java
2025-08-25 23:33:00,111 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:00,111 [INFO] __main__.py:245 - Writing minimum-common-value/2024-12-07 06.51.26 - Accepted - runtime 2ms - memory 62.5MB.java
2025-08-25 23:33:00,450 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:00,452 [INFO] __main__.py:245 - Writing find-target-indices-after-sorting-array/2024-12-07 06.37.44 - Accepted - runtime 0ms - memory 43MB.java
2025-08-25 23:33:00,781 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:00,792 [INFO] __main__.py:245 - Writing single-element-in-a-sorted-array/2024-12-07 06.29.51 - Accepted - runtime 1ms - memory 50.3MB.java
2025-08-25 23:33:05,796 [DEBUG] leetcode.py:150 - Exporting submissions from 520 to 540
2025-08-25 23:33:06,246 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=520&limit=20 HTTP/11" 200 None
2025-08-25 23:33:06,246 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1472239696,"question_id":367,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733532903,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1472239696/","is_pending":"Not Pending","title":"Valid Perfect Square","memory":"40.5 MB","code":"class Solution {\\n    public boolean isPerfectSquare(int num)\\n     {\\n        if(num<1)\\n        {\\n            return false;\\n        }\\n     long l=1,r=num;\\n     while(l<=r)\\n     {\\n        long m=l+(r-l)/2;\\n         long s=m*m;\\n        if(s==num)\\n        {\\n            return true;\\n        }\\n        else if(s<num)\\n        {\\n           l=m+1; \\n        }\\n        else\\n        {\\n            r=m-1;\\n        }\\n     }\\n     return false;   \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-perfect-square","has_notes":false,"flag_type":1,"frontend_id":130},{"id":1472239258,"question_id":367,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733532815,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1472239258/","is_pending":"Not Pending","title":"Valid Perfect Square","memory":"N/A","code":"class Solution {\\n    public boolean isPerfectSquare(int num)\\n     {\\n        if(num<1)\\n        {\\n            return false;\\n        }\\n     int l=1,r=num;\\n     while(l<=r)\\n     {\\n        int m=l+(r-l)/2;\\n        int s=m*m;\\n        if(s==num)\\n        {\\n            return true;\\n        }\\n        else if(s<num)\\n        {\\n           l=m+1; \\n        }\\n        else\\n        {\\n            r=m-1;\\n        }\\n     }\\n     return false;   \\n    }\\n}","compare_result":"11111111110000000000000000000000000000000000000000000000000000000000000","title_slug":"valid-perfect-square","has_notes":false,"flag_type":1,"frontend_id":129},{"id":1472233955,"question_id":1886,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733531754,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/1472233955/","is_pending":"Not Pending","title":"Minimum Limit of Balls in a Bag","memory":"59.8 MB","code":"class Solution {\\n    public int minimumSize(int[] nums, int maxOperations) {\\n     Arrays.sort(nums);\\n\\n        int low = 1, high = nums[nums.length-1],ans=0;\\n\\n        while (low <= high) {\\n\\n            int mid = (low + high) / 2;\\n\\n            int counter = 0;\\n\\n            for (int i = 0; i < nums.length; i++) {\\n\\n                counter = counter + (int)Math.ceil((double)nums[i] / (double)mid) - 1;\\n\\n            }\\n\\n            if (counter <= maxOperations) {\\n                ans = mid;\\n                high = mid - 1;\\n            } else\\n                low = mid + 1;\\n\\n        }\\n        return ans;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-limit-of-balls-in-a-bag","has_notes":false,"flag_type":1,"frontend_id":128},{"id":1472041394,"question_id":2640,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733507131,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1472041394/","is_pending":"Not Pending","title":"Maximum Number of Integers to Choose From a Range I","memory":"45.5 MB","code":"class Solution {\\n    public int maxCount(int[] banned, int n, int maxSum) {\\n        int[] arr=new int[10001];\\n        for(int i=0; i<banned.length; i++){\\n            arr[banned[i]]=1;\\n        }\\n\\n        long sum=0;\\n        int cnt=0;\\n        for(int i=1; i<=n; i++){\\n            if(arr[i]==1){continue;}\\n            sum+=i;\\n            if(sum>maxSum){\\n               break;\\n            }\\n            cnt++;\\n        }\\n\\n        return cnt;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-integers-to-choose-from-a-range-i","has_notes":false,"flag_type":1,"frontend_id":127},{"id":1470605196,"question_id":2414,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733361877,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1470605196/","is_pending":"Not Pending","title":"Move Pieces to Obtain a String","memory":"44.9 MB","code":"class Solution {\\n    public boolean canChange(String start, String target) {\\n        if (start.equals(target)) {\\n            return true;\\n        }\\n        int waitL = 0;\\n        int waitR = 0;\\n        \\n        for (int i = 0; i < start.length(); i++) {\\n            char curr = start.charAt(i);\\n            char goal = target.charAt(i);\\n            \\n            if (curr == \'R\') {\\n                if (waitL > 0) {\\n                    return false;\\n                }\\n                waitR++;\\n            }\\n            if (goal == \'L\') {\\n                if (waitR > 0) {\\n                    return false;\\n                }\\n                waitL++;\\n            }\\n            if (goal == \'R\') {\\n                if (waitR == 0) {\\n                    return false;\\n                }\\n                waitR--;\\n            }\\n            if (curr == \'L\') {\\n                if (waitL == 0) {\\n                    return false;\\n                }\\n                waitL--;\\n            }\\n        }\\n        \\n        return waitL == 0 && waitR == 0;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"move-pieces-to-obtain-a-string","has_notes":false,"flag_type":1,"frontend_id":126},{"id":1470375380,"question_id":3018,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733334953,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1470375380/","is_pending":"Not Pending","title":"Make String a Subsequence Using Cyclic Increments","memory":"45.8 MB","code":"class Solution {\\n    public boolean canMakeSubsequence(String source, String target) {\\n        int targetIdx = 0, targetLen = target.length();\\n        \\n        for (char currChar : source.toCharArray()) {\\n            if (targetIdx < targetLen && (target.charAt(targetIdx) - currChar + 26) % 26 <= 1) {\\n                targetIdx++;\\n            }\\n        }\\n        return targetIdx == targetLen;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"make-string-a-subsequence-using-cyclic-increments","has_notes":false,"flag_type":1,"frontend_id":125},{"id":1469428220,"question_id":2232,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733245039,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1469428220/","is_pending":"Not Pending","title":"Adding Spaces to a String","memory":"82 MB","code":"class Solution {\\n    public String addSpaces(String s, int[] spaces) {\\n        StringBuilder sb=new StringBuilder();\\n\\n        sb.append(s.substring(0,spaces[0]));\\n        int i=1;\\n        for(; i<spaces.length; i++){\\n            sb.append(\\" \\");\\n            sb.append(s.substring(spaces[i-1],spaces[i]));            \\n        }\\n        sb.append(\\" \\");\\n        sb.append(s.substring(spaces[i-1])); \\n\\n        return sb.toString();\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"adding-spaces-to-a-string","has_notes":false,"flag_type":1,"frontend_id":124},{"id":1468510247,"question_id":1566,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733159731,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1468510247/","is_pending":"Not Pending","title":"Check If a Word Occurs As a Prefix of Any Word in a Sentence","memory":"41.8 MB","code":"class Solution {\\n    public int isPrefixOfWord(String sentence, String searchWord) \\n    {\\n        String arr[]=sentence.split(\\" \\");\\n       for(int i=0;i<arr.length;i++)\\n       {\\n        if(arr[i].startsWith(searchWord))\\n        {\\n            return i+1;\\n        }\\n       }\\n       return -1; \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence","has_notes":false,"flag_type":1,"frontend_id":123},{"id":1467015733,"question_id":1468,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733024553,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1467015733/","is_pending":"Not Pending","title":"Check If N and Its Double Exist","memory":"42.7 MB","code":"class Solution {\\n    public boolean checkIfExist(int[] arr) \\n    {\\n        int n=arr.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                if(arr[i]==arr[j]*2&&i!=j)\\n                {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-n-and-its-double-exist","has_notes":false,"flag_type":1,"frontend_id":122},{"id":1467005533,"question_id":3594,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733024032,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1467005533/","is_pending":"Not Pending","title":"Identify the Largest Outlier in an Array","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int getLargestOutlier(int[] nums) {\\n        Arrays.sort(nums);\\n        int n = nums.length;\\n        int totalSum = 0;\\n        \\n        // Calculate the total sum of the array\\n        for (int num : nums) {\\n            totalSum += num;\\n        }\\n\\n        // Check if the first element is the outlier\\n        int sumWithoutFirst = totalSum - nums[0];\\n        int sumWithoutLast = totalSum - nums[n - 1];\\n        \\n        // Calculate the sum of the remaining elements when the first or last is excluded\\n        int sumExcludingFirst = 0;\\n        for (int i = 1; i < n - 1; i++) {\\n            sumExcludingFirst += nums[i];\\n        }\\n\\n        int sumExcludingLast = 0;\\n        for (int i = 0; i < n - 2; i++) {\\n            sumExcludingLast += nums[i];\\n        }\\n\\n        // Compare the sums to identify the outlier\\n        if (sumWithoutFirst == sumExcludingFirst) {\\n            return nums[0];\\n        }\\n        if (sumWithoutLast == sumExcludingLast) {\\n            return nums[n - 1];\\n        }\\n\\n        // If neither condition matches, return the largest number in the array\\n        return nums[n - 1];\\n    }\\n}\\n","compare_resulttitle_slug":"identify-the-largest-outlier-in-an-array","has_notes":false,"flag_type":1,"frontend_id":121},{"id":1467004798,"question_id":3594,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733023996,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1467004798/","is_pending":"Not Pending","title":"Identify the Largest Outlier in an Array","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int getLargestOutlier(int[] nums) {\\n        Arrays.sort(nums);\\n        int n = nums.length;\\n        int totalSum = 0;\\n        \\n        // Calculate the total sum of the array\\n        for (int num : nums) {\\n            totalSum += num;\\n        }\\n\\n        // Check if the first element is the outlier\\n        int sumWithoutFirst = totalSum - nums[0];\\n        int sumWithoutLast = totalSum - nums[n - 1];\\n        \\n        // Calculate the sum of the remaining elements when the first or last is excluded\\n        int sumExcludingFirst = 0;\\n        for (int i = 1; i < n - 1; i++) {\\n            sumExcludingFirst += nums[i];\\n        }\\n\\n        int sumExcludingLast = 0;\\n        for (int i = 0; i < n - 2; i++) {\\n            sumExcludingLast += nums[i];\\n        }\\n\\n        // Compare the sums to identify the outlier\\n        if (sumWithoutFirst == sumExcludingFirst) {\\n            return nums[0];\\n        }\\n        if (sumWithoutLast == sumExcludingLast) {\\n            return nums[n - 1];\\n        }\\n\\n        // If neither condition matches, return the largest number in the array\\n        return Math.max(nums[0], nums[n - 1]);\\n    }\\n}\\n","compare_resulttitle_slug":"identify-the-largest-outlier-in-an-array","has_notes":false,"flag_type":1,"frontend_id":120},{"id":1467002070,"question_id":3594,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733023854,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1467002070/","is_pending":"Not Pending","title":"Identify the Largest Outlier in an Array","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int getLargestOutlier(int[] nums) {\\n        Arrays.sort(nums);\\n        int n = nums.length;\\n\\n        // Calculate the total sum of the array\\n        int totalSum = 0;\\n        for (int num : nums) {\\n            totalSum += num;\\n        }\\n\\n        // Check if the last element is the outlier\\n        int sumWithoutLast = totalSum - nums[n - 1];\\n        if (sumWithoutLast == calculateSum(nums, 0, n - 2)) {\\n            return nums[n - 1];\\n        }\\n\\n        // Check if the first element is the outlier\\n        int sumWithoutFirst = totalSum - nums[0];\\n        if (sumWithoutFirst == calculateSum(nums, 1, n - 1)) {\\n            return nums[0];\\n        }\\n\\n        // Return the largest number in case neither of the above conditions match\\n        return Math.max(nums[0], nums[n - 1]);\\n    }\\n\\n    private int calculateSum(int[] nums, int start, int end) {\\n        int sum = 0;\\n        for (int i = start; i <= end; i++) {\\n            sum += nums[i];\\n        }\\n        return sum;\\n    }\\n}\\n","compare_result":"11110010100011010101110100010111010111101110010100001110110110000010001001100000100100100000110000011010000000000011001000000101000001001000010000010001000000001010000010000001110001000000000000000011000100000010000000001000000010000000101110000010100001000000000000000000001000000001000000010100100000000000001000000000001110000110000010000000000000000100000001000001000001000000000000010000000000000100000000000010000000000000000000000000000000000010000000000000000000000000000000001000000000000000000000010000000000000000000000000100000000000000000000000010000011000000000000000000000000000000000100000000000000000000000010000000001000000000000000000000000000000000000000000000000000100000000000000010000000000000000000000000000000010000000000000000000000000000010000000001000011100000100001001000000000010000000001001000001001010000111100000110101011111001011101000000","title_slug":"identify-the-largest-outlier-in-an-array","has_notes":false,"flag_type":1,"frontend_id":119},{"id":1466997094,"question_id":3594,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733023598,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1466997094/","is_pending":"Not Pending","title":"Identify the Largest Outlier in an Array","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public int getLargestOutlier(int[] nums) {\\n        int n = nums.length;\\n        Arrays.sort(nums);\\n\\n        // Calculate the sum of all numbers in the array.\\n        int totalSum = 0;\\n        for (int num : nums) {\\n            totalSum += num;\\n        }\\n\\n        // The outlier should be either the first or the last element after sorting.\\n        int potentialOutlier1 = nums[0];\\n        int potentialOutlier2 = nums[n - 1];\\n\\n        // Check if the first element is the outlier.\\n        int sumWithoutFirst = totalSum - potentialOutlier1;\\n        if (sumWithoutFirst == nums[n - 2]) {\\n            return potentialOutlier1;\\n        }\\n\\n        // Check if the last element is the outlier.\\n        int sumWithoutLast = totalSum - potentialOutlier2;\\n        if (sumWithoutLast == nums[n - 3]) {\\n            return potentialOutlier2;\\n        }\\n\\n        // If none of the above conditions matched, return the maximum potential outlier found.\\n        return Math.max(potentialOutlier1, potentialOutlier2);\\n    }\\n}\\n","compare_resulttitle_slug":"identify-the-largest-outlier-in-an-array","has_notes":false,"flag_type":1,"frontend_id":118},{"id":1466988513,"question_id":3594,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733023171,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1466988513/","is_pending":"Not Pending","title":"Identify the Largest Outlier in an Array","memory":"N/A","code":"class Solution {\\n    public int getLargestOutlier(int[] nums) {\\n        int n = nums.length;\\n        int totalSum = 0;\\n        \\n        for (int num : nums) {\\n            totalSum += num;\\n        }\\n\\n        int maxOutlier = Integer.MIN_VALUE;\\n        for (int i = 0; i < n; i++) {\\n            int sumWithoutElement = totalSum - nums[i];\\n            for (int j = 0; j < n; j++) {\\n                if (i != j && sumWithoutElement - nums[j] != nums[j]) {\\n                    maxOutlier = Math.max(maxOutlier, nums[i]);\\n                }\\n            }\\n        }\\n        \\n        return maxOutlier;\\n    }\\n}\\n","compare_resulttitle_slug":"identify-the-largest-outlier-in-an-array","has_notes":false,"flag_type":1,"frontend_id":117},{"id":1466983385,"question_id":3594,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733022917,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1466983385/","is_pending":"Not Pending","title":"Identify the Largest Outlier in an Array","memory":"N/A","code":"import java.util.Arrays;\\n\\nclass Solution {\\n    public int getLargestOutlier(int[] nums) {\\n        Arrays.sort(nums);\\n        int n = nums.length;\\n        int specialSum = Arrays.stream(nums, 0, n - 2).sum();\\n        int sumElement = nums[n - 2];\\n        int outlier = nums[n - 1];\\n\\n        if (specialSum == sumElement) {\\n            return outlier;\\n        }\\n        \\n        return Math.max(sumElement, outlier);\\n    }\\n}\\n","compare_resulttitle_slug":"identify-the-largest-outlier-in-an-array","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1466954437,"question_id":3594,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733021457,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1466954437/","is_pending":"Not Pending","title":"Identify the Largest Outlier in an Array","memory":"N/A","code":"class Solution {\\n    public int getLargestOutlier(int[] nums) \\n    {\\n        int n=nums.length;\\n       return nums[n-1]; \\n    }\\n}","compare_resulttitle_slug":"identify-the-largest-outlier-in-an-array","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1466942072,"question_id":3676,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1733020872,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1466942072/","is_pending":"Not Pending","title":"Smallest Number With All Set Bits","memory":"40.8 MB","code":"class Solution {\\n    public int smallestNumber(int n) \\n    {\\n        int x=n;\\n        while((x&(x+1))!=0)\\n            {\\n                x=x|(x>>1);\\n            }\\n        return x;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-number-with-all-set-bits","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1466694113,"question_id":2201,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1732990071,"status":10,"status_display":"Accepted","runtime":"235 ms","url":"/submissions/detail/1466694113/","is_pending":"Not Pending","title":"Valid Arrangement of Pairs","memory":"114.4 MB","code":"class Solution {\\n    List<Integer> circuit;\\n    public int[][] validArrangement(int[][] pairs) {\\n        Map<Integer, List<Integer>> graph=new HashMap();\\n        Map<Integer, Integer> node=new HashMap();\\n\\n        for(int[] pair:pairs){\\n            if(!graph.containsKey(pair[0])){\\n                graph.put(pair[0], new ArrayList());\\n            }\\n            graph.get(pair[0]).add(pair[1]);    //Preparing graph\\n            node.put(pair[0], node.getOrDefault(pair[0],0)-1); //Outgoing\\n            node.put(pair[1], node.getOrDefault(pair[1],0)+1); //Incoming\\n        }\\n\\n\\n        //selecting the starting node\\n        int startNode=pairs[0][0];\\n        for(Map.Entry<Integer, Integer> enty:node.entrySet()){\\n            if(enty.getValue()==-1){\\n                startNode=enty.getKey();\\n                break;\\n            }\\n        }\\n\\n        circuit=new ArrayList();\\n        dfs(graph, startNode);\\n        Collections.reverse(circuit);\\n        \\n       \\n        int[][] result=new int[pairs.length][2];\\n        for(int i=1; i<circuit.size(); i++){\\n            result[i-1][0]=circuit.get(i-1);\\n            result[i-1][1]=circuit.get(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    void dfs(Map<Integer, List<Integer>> graph, int u){\\n        while(graph.containsKey(u) && !graph.get(u).isEmpty()){\\n            int v=graph.get(u).remove(0);\\n            dfs(graph, v);\\n        }\\n        circuit.add(u);\\n    }\\n\\n\\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"valid-arrangement-of-pairs","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1466693196,"question_id":2201,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1732989996,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1466693196/","is_pending":"Not Pending","title":"Valid Arrangement of Pairs","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public List<int[]> validArrangement(int[][] pairs) {\\n        Map<Integer, LinkedList<Integer>> graph = new HashMap<>();\\n        Map<Integer, Integer> inOutDeg = new HashMap<>();\\n        for (int[] pair : pairs) {\\n            int start = pair[0], end = pair[1];\\n            graph.computeIfAbsent(start, k -> new LinkedList<>()).add(end);\\n            inOutDeg.put(start, inOutDeg.getOrDefault(start, 0) + 1); // Out-degree\\n            inOutDeg.put(end, inOutDeg.getOrDefault(end, 0) - 1);    // In-degree\\n        }\\n        int startNode = pairs[0][0];\\n        for (int node : inOutDeg.keySet()) {\\n            if (inOutDeg.get(node) == 1) {\\n                startNode = node;\\n                break;\\n            }\\n        }\\n        LinkedList<int[]> path = new LinkedList<>();\\n        dfs(startNode, graph, path);\\n        return path;\\n    }\\n\\n    private void dfs(int curr, Map<Integer, LinkedList<Integer>> graph, LinkedList<int[]> path) {\\n        LinkedList<Integer> neighbors = graph.getOrDefault(curr, new LinkedList<>());\\n        while (!neighbors.isEmpty()) {\\n            int next = neighbors.poll();\\n            dfs(next, graph, path);\\n            path.addFirst(new int[]{curr, next}); // Add to path in reverse order\\n        }\\n    }\\n}","compare_result":null,"title_slug":"valid-arrangement-of-pairs","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1465991285,"question_id":2711,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1732904886,"status":10,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/1465991285/","is_pending":"Not Pending","title":"Minimum Time to Visit a Cell In a Grid","memory":"57.4 MB","code":"class Solution {\\n    private static final int[][] MOVES = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\\n    \\n    public int minimumTime(int[][] grid) {\\n        int rows = grid.length;\\n        int cols = grid[0].length;\\n        \\n        if (grid[0][1] > 1 && grid[1][0] > 1) {\\n            return -1;\\n        }\\n        \\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]); \\n        boolean[][] seen = new boolean[rows][cols];\\n        \\n        pq.offer(new int[]{0, 0, 0}); // time, row, col\\n        seen[0][0] = true;\\n        \\n        while (!pq.isEmpty()) {\\n            int[] curr = pq.poll();\\n            int time = curr[0];\\n            int row = curr[1];\\n            int col = curr[2];\\n            \\n            for (int[] dir : MOVES) {\\n                int newRow = row + dir[0];\\n                int newCol = col + dir[1];\\n                \\n                if (newRow < 0 || newRow >= rows || \\n                    newCol < 0 || newCol >= cols || \\n                    seen[newRow][newCol]) {\\n                    continue;\\n                }\\n                \\n                int newTime = time + 1;\\n                if (grid[newRow][newCol] > newTime) {\\n                    int wait = ((grid[newRow][newCol] - newTime + 1) / 2) * 2;\\n                    newTime += wait;\\n                }\\n                \\n                if (newRow == rows - 1 && newCol == cols - 1) {\\n                    return newTime;\\n                }\\n                \\n                seen[newRow][newCol] = true;\\n                pq.offer(new int[]{newTime, newRow, newCol});\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-time-to-visit-a-cell-in-a-grid","has_notes":false,"flag_type":1,"frontend_id":111}],"has_next":true,"last_key":""}'
2025-08-25 23:33:06,628 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:06,631 [INFO] __main__.py:245 - Writing valid-perfect-square/2024-12-07 06.25.03 - Accepted - runtime 0ms - memory 40.5MB.java
2025-08-25 23:33:06,634 [INFO] __main__.py:188 - Skipping valid-perfect-square 2024-12-07 06.23.35 because its status is 'Time Limit Exceeded'
2025-08-25 23:33:07,792 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:07,796 [INFO] __main__.py:245 - Writing minimum-limit-of-balls-in-a-bag/2024-12-07 06.05.54 - Accepted - runtime 99ms - memory 59.8MB.java
2025-08-25 23:33:08,168 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:08,170 [INFO] __main__.py:245 - Writing maximum-number-of-integers-to-choose-from-a-range-i/2024-12-06 23.15.31 - Accepted - runtime 4ms - memory 45.5MB.java
2025-08-25 23:33:08,532 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:08,536 [INFO] __main__.py:245 - Writing move-pieces-to-obtain-a-string/2024-12-05 06.54.37 - Accepted - runtime 12ms - memory 44.9MB.java
2025-08-25 23:33:08,864 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:08,867 [INFO] __main__.py:245 - Writing make-string-a-subsequence-using-cyclic-increments/2024-12-04 23.25.53 - Accepted - runtime 5ms - memory 45.8MB.java
2025-08-25 23:33:09,209 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:09,211 [INFO] __main__.py:245 - Writing adding-spaces-to-a-string/2024-12-03 22.27.19 - Accepted - runtime 27ms - memory 82MB.java
2025-08-25 23:33:09,564 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:09,578 [INFO] __main__.py:245 - Writing check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/2024-12-02 22.45.31 - Accepted - runtime 0ms - memory 41.8MB.java
2025-08-25 23:33:09,897 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:09,897 [INFO] __main__.py:245 - Writing check-if-n-and-its-double-exist/2024-12-01 09.12.33 - Accepted - runtime 1ms - memory 42.7MB.java
2025-08-25 23:33:09,897 [INFO] __main__.py:188 - Skipping identify-the-largest-outlier-in-an-array 2024-12-01 09.03.52 because its status is 'Wrong Answer'
2025-08-25 23:33:09,897 [INFO] __main__.py:188 - Skipping identify-the-largest-outlier-in-an-array 2024-12-01 09.03.16 because its status is 'Wrong Answer'
2025-08-25 23:33:09,897 [INFO] __main__.py:188 - Skipping identify-the-largest-outlier-in-an-array 2024-12-01 09.00.54 because its status is 'Wrong Answer'
2025-08-25 23:33:09,897 [INFO] __main__.py:188 - Skipping identify-the-largest-outlier-in-an-array 2024-12-01 08.56.38 because its status is 'Wrong Answer'
2025-08-25 23:33:09,897 [INFO] __main__.py:188 - Skipping identify-the-largest-outlier-in-an-array 2024-12-01 08.49.31 because its status is 'Wrong Answer'
2025-08-25 23:33:09,897 [INFO] __main__.py:188 - Skipping identify-the-largest-outlier-in-an-array 2024-12-01 08.45.17 because its status is 'Wrong Answer'
2025-08-25 23:33:09,897 [INFO] __main__.py:188 - Skipping identify-the-largest-outlier-in-an-array 2024-12-01 08.20.57 because its status is 'Wrong Answer'
2025-08-25 23:33:10,348 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:10,350 [INFO] __main__.py:245 - Writing smallest-number-with-all-set-bits/2024-12-01 08.11.12 - Accepted - runtime 0ms - memory 40.8MB.java
2025-08-25 23:33:10,696 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:10,699 [INFO] __main__.py:245 - Writing valid-arrangement-of-pairs/2024-11-30 23.37.51 - Accepted - runtime 235ms - memory 114.4MB.java
2025-08-25 23:33:10,701 [INFO] __main__.py:188 - Skipping valid-arrangement-of-pairs 2024-11-30 23.36.36 because its status is 'Compile Error'
2025-08-25 23:33:11,161 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:11,165 [INFO] __main__.py:245 - Writing minimum-time-to-visit-a-cell-in-a-grid/2024-11-29 23.58.06 - Accepted - runtime 112ms - memory 57.4MB.java
2025-08-25 23:33:16,167 [DEBUG] leetcode.py:150 - Exporting submissions from 540 to 560
2025-08-25 23:33:16,963 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=540&limit=20 HTTP/11" 200 None
2025-08-25 23:33:16,996 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1465316209,"question_id":69,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1732825778,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1465316209/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"41.1 MB","code":"class Solution \\n{\\n    public int mySqrt(int x)\\n    {\\n        int h=x;\\n       if(x==0||x==1)\\n       {\\n        return x;\\n       }\\n       else\\n       {\\n        int l=1;\\n        while(l<=h)\\n        {\\n            int m=l+(h-l)/2;\\n            if(m*m==x)\\n            {\\n               return m;\\n            }\\n            else if((long)m*(long)m>x)\\n            {\\n                h=m-1;\\n            }\\n            else\\n            {\\n                l=m+1;\\n            }\\n        }\\n       }\\n       return Math.round(h); \\n    }\\n}","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1465315399,"question_id":69,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1732825675,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1465315399/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"N/A","code":"class Solution \\n{\\n    public int mySqrt(int x)\\n    {\\n        int h=x;\\n       if(x==0||x==1)\\n       {\\n        return x;\\n       }\\n       else\\n       {\\n        int l=1;\\n        while(l<=h)\\n        {\\n            int m=l+(h-l)/2;\\n            if((long)m*(long)m==x)\\n            {\\n               return m;\\n            }\\n            else if(m*m>x)\\n            {\\n                h=m-1;\\n            }\\n            else\\n            {\\n                l=m+1;\\n            }\\n        }\\n       }\\n       return Math.round(h); \\n    }\\n}","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1465314931,"question_id":69,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1732825617,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1465314931/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"N/A","code":"class Solution \\n{\\n    public int mySqrt(int x)\\n    {\\n        int h=x;\\n       if(x==0||x==1)\\n       {\\n        return x;\\n       }\\n       else\\n       {\\n        int l=1;\\n        while(l<=h)\\n        {\\n            int m=l+(h-l)/2;\\n            if(m*m==x)\\n            {\\n               return m;\\n            }\\n            else if(m*m>x)\\n            {\\n                h=m-1;\\n            }\\n            else\\n            {\\n                l=m+1;\\n            }\\n        }\\n       }\\n       return Math.round(h); \\n    }\\n}","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1465307703,"question_id":268,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1732824751,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1465307703/","is_pending":"Not Pending","title":"Missing Number","memory":"45.3 MB","code":"class Solution {\\n    public int missingNumber(int[] nums) \\n    {\\n        int n=nums.length;\\n        int s=(n*(n+1))/2;\\n        int r=0;\\n        int x=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            x+=nums[i];\\n            r=s-x;\\n        }\\n        return r;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"missing-number","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1465296081,"question_id":1646,"lang":"java","lang_name":"Java","time":"8\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1732823378,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1465296081/","is_pending":"Not Pending","title":"Kth Missing Positive Number","memory":"42.9 MB","code":"class Solution {\\n    public int findKthPositive(int[] arr, int k)\\n     {\\n        int l=0;\\n        int h=arr.length-1;\\n        while(l<=h)\\n        {\\n            int mid=l+(h-l)/2;\\n            int mis=arr[mid]-(mid+1);\\n            if(mis<k)\\n            {\\n                l=mid+1;\\n            }\\n            else\\n            {\\n                h=mid-1;\\n            }\\n        }\\n        return k+h+1;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-missing-positive-number","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1464658624,"question_id":2375,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732759406,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/1464658624/","is_pending":"Not Pending","title":"Minimum Obstacle Removal to Reach Corner","memory":"70.1 MB","code":"class Solution {\\n    public int minimumObstacles(int[][] grid) {\\n        int r = grid.length, c = grid[0].length;\\n        Deque<int[]> dq = new ArrayDeque<>();\\n        dq.offer(new int[]{0, 0});\\n        int[][] dist = new int[r][c];\\n        for (int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);\\n        dist[0][0] = 0;\\n        int[] dx = {1, -1, 0, 0}, dy = {0, 0, 1, -1};\\n        while (!dq.isEmpty()) {\\n            int[] cell = dq.pollFirst();\\n            int x = cell[0], y = cell[1];\\n            for (int k = 0; k < 4; k++) {\\n                int nx = x + dx[k], ny = y + dy[k];\\n                if (nx >= 0 && ny >= 0 && nx < r && ny < c) {\\n                    int d = dist[x][y] + grid[nx][ny];\\n                    if (d < dist[nx][ny]) {\\n                        dist[nx][ny] = d;\\n                        if (grid[nx][ny] == 0) {\\n                            dq.offerFirst(new int[]{nx, ny});\\n                        } else {\\n                            dq.offerLast(new int[]{nx, ny});\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return dist[r - 1][c - 1];\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"minimum-obstacle-removal-to-reach-corner","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1464249617,"question_id":3517,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732716379,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1464249617/","is_pending":"Not Pending","title":"Shortest Distance After Road Addition Queries I","memory":"45.4 MB","code":"class Solution {\\n    private void updateDistances(List<List<Integer>> graph, int current, int[] distances) {\\n        int newDist = distances[current] + 1;\\n        \\n        for (int neighbor : graph.get(current)) {\\n            if (distances[neighbor] <= newDist) continue;\\n            \\n            distances[neighbor] = newDist;\\n            updateDistances(graph, neighbor, distances);\\n        }\\n    }\\n    \\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\\n        int[] distances = new int[n];\\n        for (int i = 0; i < n; ++i) {\\n            distances[i] = n - 1 - i;\\n        }\\n        \\n        List<List<Integer>> graph = new ArrayList<>();\\n        for (int i = 0; i < n; ++i) {\\n            graph.add(new ArrayList<>());\\n        }\\n        \\n        for (int i = 0; i + 1 < n; ++i) {\\n            graph.get(i + 1).add(i);\\n        }\\n        \\n        int[] answer = new int[queries.length];\\n        int queryIdx = 0;\\n        \\n        for (int[] query : queries) {\\n            int source = query[0];\\n            int target = query[1];\\n            \\n            graph.get(target).add(source);\\n            distances[source] = Math.min(distances[source], distances[target] + 1);\\n            updateDistances(graph, source, distances);\\n            \\n            answer[queryIdx++] = distances[0];\\n        }\\n        \\n        return answer;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-distance-after-road-addition-queries-i","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1464249337,"question_id":3517,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732716356,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1464249337/","is_pending":"Not Pending","title":"Shortest Distance After Road Addition Queries I","memory":"N/A","code":"class Solution:\\n    def updateDistances(self, graph, current, distances):\\n        newDist = distances[current] + 1\\n        \\n        for neighbor in graph[current]:\\n            if distances[neighbor] <= newDist:\\n                continue\\n                \\n            distances[neighbor] = newDist\\n            self.updateDistances(graph, neighbor, distances)\\n    \\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        distances = [n - 1 - i for i in range(n)]\\n        \\n        graph = [[] for _ in range(n)]\\n        for i in range(n-1):\\n            graph[i + 1].append(i)\\n        \\n        answer = []\\n        \\n        for source, target in queries:\\n            graph[target].append(source)\\n            distances[source] = min(distances[source], distances[target] + 1)\\n            self.updateDistances(graph, source, distances)\\n            \\n            answer.append(distances[0])\\n        \\n        return answer","compare_result":null,"title_slug":"shortest-distance-after-road-addition-queries-i","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1464247975,"question_id":1584,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732716244,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1464247975/","is_pending":"Not Pending","title":"Average Salary Excluding the Minimum and Maximum Salary","memory":"41.6 MB","code":"class Solution {\\n    public double average(int[] salary) \\n    {\\n       int n=salary.length;\\n       int s=0;\\n       int min=salary[0];\\n       int max=salary[0];\\n       for(int i=0;i<n;i++)\\n       {\\n        s+=salary[i];\\n         if(salary[i]>max)\\n         {\\n            max=salary[i];\\n         }\\n         else if(salary[i]<min)\\n         {\\n            min=salary[i];\\n         }\\n       }\\n       double r=s-min-max;\\n       int  al=salary.length-2;\\n       double ans=r/al;\\n       return ans; \\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"average-salary-excluding-the-minimum-and-maximum-salary","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1464240676,"question_id":1468,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732715627,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1464240676/","is_pending":"Not Pending","title":"Check If N and Its Double Exist","memory":"43.3 MB","code":"class Solution {\\n    public boolean checkIfExist(int[] arr) \\n    {\\n        int n=arr.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                if(arr[i]==arr[j]*2&&i!=j)\\n                {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-n-and-its-double-exist","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1464239445,"question_id":1468,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732715522,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1464239445/","is_pending":"Not Pending","title":"Check If N and Its Double Exist","memory":"N/A","code":"class Solution {\\n    public boolean checkIfExist(int[] arr) \\n    {\\n        int n=arr.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                if(arr[i]==arr[j]*2)\\n                {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-n-and-its-double-exist","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1464236521,"question_id":792,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732715280,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1464236521/","is_pending":"Not Pending","title":"Binary Search","memory":"45.7 MB","code":"class Solution {\\n    public int search(int[] nums, int target)\\n     {\\n        int n=nums.length;\\n        int l=0;\\n        int h=n-1;\\n        while(l<=h)\\n        {\\n            int mid=l+(h-l)/2;\\n            if(nums[mid]==target)\\n            {\\n                return mid;\\n            }\\n            else if(target<nums[mid])\\n            {\\n                h=mid-1;\\n            }\\n            else\\n            {\\n                l=mid+1;\\n            }\\n        }\\n        return -1;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"binary-search","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1463594161,"question_id":748,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732645364,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1463594161/","is_pending":"Not Pending","title":"Largest Number At Least Twice of Others","memory":"41.5 MB","code":"class Solution {\\n    public int dominantIndex(int[] nums) {\\n        if(nums.length == 0)\\n            return -1 ;\\n        else if(nums.length == 1)\\n            return 0 ;\\n        int l = nums[0];\\n        int index = 0 ;\\n        for(int i = 1 ; i<nums.length   ; i++ )\\n        {\\n            if(nums[i] > l )\\n            {\\n                l  = nums[i];\\n                index = i ;\\n            }\\n        }\\n        for(int i = 0 ; i<nums.length ; i++)\\n        {\\n            if(i == index)\\n                continue ;\\n            if(l < 2*nums[i])\\n                return -1 ;\\n        }\\n        return index ;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number-at-least-twice-of-others","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1463584284,"question_id":3189,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732644681,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1463584284/","is_pending":"Not Pending","title":"Find Champion II","memory":"45.6 MB","code":"class Solution {\\n    public int findChampion(int n, int[][] edges) {\\n        boolean[] isUndefeated = new boolean[n];\\n        Arrays.fill(isUndefeated, true);\\n        \\n        for (int[] edge : edges) {\\n            int winner = edge[0];\\n            int loser = edge[1];\\n            isUndefeated[loser] = false;\\n        }\\n        \\n        int champion = -1;\\n        int championCount = 0;\\n        \\n        for (int team = 0; team < n; team++) {\\n            if (isUndefeated[team]) {\\n                champion = team;\\n                championCount++;\\n            }\\n        }\\n        \\n        return championCount == 1 ? champion : -1;\\n    }\\n}","compare_resulttitle_slug":"find-champion-ii","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1462614560,"question_id":787,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732553750,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1462614560/","is_pending":"Not Pending","title":"Sliding Puzzle","memory":"44.5 MB","code":"class Solution {\\n    public int slidingPuzzle(int[][] board) {\\n        // Directions for possible swaps based on \'0\' position\\n        int[][] dir = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};\\n        String target = \\"123450\\";\\n        Set<String> vis = new HashSet<>(); // Track visited configurations\\n        Queue<String> q = new LinkedList<>();\\n        String start = \\"\\";\\n\\n        // Convert 2D board to a single string\\n        for (int[] row : board) {\\n            for (int col : row) {\\n                start += col;\\n            }\\n        }\\n\\n        q.offer(start);\\n        vis.add(start);\\n        int step = 0;\\n\\n        // Perform BFS\\n        while (!q.isEmpty()) {\\n            int size = q.size();\\n            while (size-- > 0) {\\n                String current = q.poll();\\n\\n                // Check if target is reached\\n                if (current.equals(target)) return step;\\n\\n                int zero = current.indexOf(\'0\'); // Find position of \'0\'\\n\\n                // Generate next moves\\n                for (int move : dir[zero]) {\\n                    StringBuilder next = new StringBuilder(current);\\n                    char temp = next.charAt(zero);\\n                    next.setCharAt(zero, next.charAt(move));\\n                    next.setCharAt(move, temp);\\n\\n                    if (!vis.contains(next.toString())) { // Add unvisited states to the queue\\n                        vis.add(next.toString());\\n                        q.offer(next.toString());\\n                    }\\n                }\\n            }\\n            step++;\\n        }\\n        return -1; // Return -1 if target is unreachable\\n    }\\n}","compare_result":"11111111111111111111111111111111","title_slug":"sliding-puzzle","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1462607322,"question_id":167,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732553261,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1462607322/","is_pending":"Not Pending","title":"Two Sum II - Input Array Is Sorted","memory":"46.7 MB","code":"class Solution {\\n    public int[] twoSum(int[] numbers, int target)\\n     {\\n        int n=numbers.length;\\n        int ind[]=new int[2];\\n        int l=0,r=n-1;\\n        while(l<=r)\\n        {\\n            if(numbers[l]+numbers[r]==target)\\n            {\\n                ind[0]=l+1;\\n                ind[1]=r+1;\\n                break;\\n            }\\n            else if(numbers[l]+numbers[r]>target)\\n            {\\n                r--;\\n            }\\n            else\\n            {\\n                l++;\\n            }\\n        }\\n        return ind;\\n    }\\n}","compare_result":"111111111111111111111111","title_slug":"two-sum-ii-input-array-is-sorted","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1462596995,"question_id":167,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732552546,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1462596995/","is_pending":"Not Pending","title":"Two Sum II - Input Array Is Sorted","memory":"N/A","code":"class Solution {\\n    public int[] twoSum(int[] numbers, int target)\\n     {\\n        int n=numbers.length;\\n        int ind[]=new int[2];\\n        for(int i=0;i<n-1;i++)\\n        {\\n            for(int j=i+1;j<n;j++)\\n            {\\n                if(numbers[i]+numbers[j]==target)\\n                {\\n                    ind[0]=i+1;\\n                    ind[1]=j+1;\\n                }\\n            }\\n        }\\n        return ind;\\n    }\\n}","compare_result":"111111111111111111111000","title_slug":"two-sum-ii-input-array-is-sorted","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1462594728,"question_id":167,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732552381,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1462594728/","is_pending":"Not Pending","title":"Two Sum II - Input Array Is Sorted","memory":"N/A","code":"class Solution {\\n    public int[] twoSum(int[] numbers, int target)\\n     {\\n        int n=numbers.length;\\n        int ind[]=new int[2];\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=i+1;j<n;j++)\\n            {\\n                if(numbers[i]+numbers[j]==target)\\n                {\\n                    ind[0]=i+1;\\n                    ind[1]=j+1;\\n                }\\n            }\\n        }\\n        return ind;\\n    }\\n}","compare_result":"111111111111111111111000","title_slug":"two-sum-ii-input-array-is-sorted","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1461618454,"question_id":2089,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732449629,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1461618454/","is_pending":"Not Pending","title":"Maximum Matrix Sum","memory":"55.2 MB","code":"class Solution {\\n    public long maxMatrixSum(int[][] matrix) {\\n        int negativecount=0;\\n        long sum=0;\\n        long minAbs=Long.MAX_VALUE;\\n        for(int[] row:matrix){\\n            for(int i:row){\\n                sum+=Math.abs(i);\\n                if(i<0)negativecount++;\\n                minAbs=Math.min(minAbs,Math.abs(i));\\n            }\\n        }\\n        if(negativecount%2==1)sum-=2*minAbs;\\n        return sum;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-matrix-sum","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1461455004,"question_id":948,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732431381,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1461455004/","is_pending":"Not Pending","title":"Sort an Array","memory":"57.1 MB","code":"class Solution \\n{\\n    public int[] sortArray(int[] nums) \\n    {\\n        int n=nums.length;\\n        int max=nums[0];\\n        int min=nums[0];\\n        for(int num:nums)\\n        {\\n            if(num>max)\\n            {\\n                max=num;\\n            }\\n            if(num<min)\\n            {\\n                min=num;\\n            }\\n        }\\n        int r=max-min+1;\\n        int ca[]=new int[r];\\n        for(int num:nums)\\n        {\\n            ca[num-min]++;\\n        }\\n        int ind=0;\\n        for(int i=0;i<r;i++)\\n        {\\n            while(ca[i]>0)\\n            {\\n              nums[ind]=i+min;\\n              ind++;\\n              ca[i]--;\\n            }\\n        }\\n        return nums;\\n    }\\n}","compare_result":"111111111111111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1,"frontend_id":91}],"has_next":true,"last_key":""}'
2025-08-25 23:33:17,516 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:17,518 [INFO] __main__.py:245 - Writing sqrtx/2024-11-29 01.59.38 - Accepted - runtime 1ms - memory 41.1MB.java
2025-08-25 23:33:17,518 [INFO] __main__.py:188 - Skipping sqrtx 2024-11-29 01.57.55 because its status is 'Wrong Answer'
2025-08-25 23:33:17,520 [INFO] __main__.py:188 - Skipping sqrtx 2024-11-29 01.56.57 because its status is 'Wrong Answer'
2025-08-25 23:33:17,520 [INFO] __main__.py:208 - Skipping missing-number 2024-11-29 01.42.31 in java because a more recent submission has already been exported
2025-08-25 23:33:17,957 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:17,963 [INFO] __main__.py:245 - Writing kth-missing-positive-number/2024-11-29 01.19.38 - Accepted - runtime 0ms - memory 42.9MB.java
2025-08-25 23:33:18,563 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:18,563 [INFO] __main__.py:245 - Writing minimum-obstacle-removal-to-reach-corner/2024-11-28 07.33.26 - Accepted - runtime 49ms - memory 70.1MB.java
2025-08-25 23:33:18,901 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:18,901 [INFO] __main__.py:245 - Writing shortest-distance-after-road-addition-queries-i/2024-11-27 19.36.19 - Accepted - runtime 10ms - memory 45.4MB.java
2025-08-25 23:33:18,901 [INFO] __main__.py:188 - Skipping shortest-distance-after-road-addition-queries-i 2024-11-27 19.35.56 because its status is 'Compile Error'
2025-08-25 23:33:19,280 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:19,280 [INFO] __main__.py:245 - Writing average-salary-excluding-the-minimum-and-maximum-salary/2024-11-27 19.34.04 - Accepted - runtime 0ms - memory 41.6MB.java
2025-08-25 23:33:19,286 [INFO] __main__.py:208 - Skipping check-if-n-and-its-double-exist 2024-11-27 19.23.47 in java because a more recent submission has already been exported
2025-08-25 23:33:19,286 [INFO] __main__.py:188 - Skipping check-if-n-and-its-double-exist 2024-11-27 19.22.02 because its status is 'Wrong Answer'
2025-08-25 23:33:19,771 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:19,775 [INFO] __main__.py:245 - Writing binary-search/2024-11-27 19.18.00 - Accepted - runtime 0ms - memory 45.7MB.java
2025-08-25 23:33:20,284 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:20,290 [INFO] __main__.py:245 - Writing largest-number-at-least-twice-of-others/2024-11-26 23.52.44 - Accepted - runtime 0ms - memory 41.5MB.java
2025-08-25 23:33:20,658 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:20,661 [INFO] __main__.py:245 - Writing find-champion-ii/2024-11-26 23.41.21 - Accepted - runtime 1ms - memory 45.6MB.java
2025-08-25 23:33:21,024 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:21,029 [INFO] __main__.py:245 - Writing sliding-puzzle/2024-11-25 22.25.50 - Accepted - runtime 17ms - memory 44.5MB.java
2025-08-25 23:33:21,485 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:21,489 [INFO] __main__.py:245 - Writing two-sum-ii-input-array-is-sorted/2024-11-25 22.17.41 - Accepted - runtime 2ms - memory 46.7MB.java
2025-08-25 23:33:21,504 [INFO] __main__.py:188 - Skipping two-sum-ii-input-array-is-sorted 2024-11-25 22.05.46 because its status is 'Time Limit Exceeded'
2025-08-25 23:33:21,504 [INFO] __main__.py:188 - Skipping two-sum-ii-input-array-is-sorted 2024-11-25 22.03.01 because its status is 'Time Limit Exceeded'
2025-08-25 23:33:21,869 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:21,873 [INFO] __main__.py:245 - Writing maximum-matrix-sum/2024-11-24 17.30.29 - Accepted - runtime 6ms - memory 55.2MB.java
2025-08-25 23:33:22,255 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:22,257 [INFO] __main__.py:245 - Writing sort-an-array/2024-11-24 12.26.21 - Accepted - runtime 5ms - memory 57.1MB.java
2025-08-25 23:33:27,270 [DEBUG] leetcode.py:150 - Exporting submissions from 560 to 580
2025-08-25 23:33:27,862 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=560&limit=20 HTTP/11" 200 None
2025-08-25 23:33:27,864 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1461450364,"question_id":948,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732430949,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1461450364/","is_pending":"Not Pending","title":"Sort an Array","memory":"N/A","code":"class Solution \\n{\\n    public int[] sortArray(int[] nums) \\n    {\\n        int n=nums.length;\\n        int max=nums[0];\\n        for(int num:nums)\\n        {\\n            if(num>max)\\n            {\\n                max=num;\\n            }\\n        }\\n        int ca[]=new int[max+1];\\n        for(int num:nums)\\n        {\\n            ca[num]++;\\n        }\\n        int ind=0;\\n        for(int i=0;i<=max;i++)\\n        {\\n            while(ca[i]>0)\\n            {\\n              nums[ind]=i;\\n              ind++;\\n              ca[i]--;\\n            }\\n        }\\n        return nums;\\n    }\\n}","compare_result":"111000000000000000000","title_slug":"sort-an-array","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1461298154,"question_id":3595,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732418317,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/1461298154/","is_pending":"Not Pending","title":"Rearrange K Substrings to Form Target String","memory":"55 MB","code":"class Solution {\\n    public boolean isPossibleToRearrange(String s, String t, int k) {\\n        int n = s.length();\\n        if (n % k != 0) {\\n            return false;\\n        }\\n        \\n        int segmentLength = n / k;\\n        \\n        Map<String, Integer> substringCountS = new HashMap<>();\\n        Map<String, Integer> substringCountT = new HashMap<>();\\n\\n        for (int i = 0; i < n; i += segmentLength) {\\n            String substring = s.substring(i, i + segmentLength);\\n            substringCountS.put(substring, substringCountS.getOrDefault(substring, 0) + 1);\\n        }\\n\\n        for (int i = 0; i < n; i += segmentLength) {\\n            String substring = t.substring(i, i + segmentLength);\\n            substringCountT.put(substring, substringCountT.getOrDefault(substring, 0) + 1);\\n        }\\n\\n        return substringCountS.equals(substringCountT);\\n    }\\n}\\n","compare_resulttitle_slug":"rearrange-k-substrings-to-form-target-string","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1461295279,"question_id":3595,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732418169,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/1461295279/","is_pending":"Not Pending","title":"Rearrange K Substrings to Form Target String","memory":"55.1 MB","code":"class Solution {\\n    public boolean isPossibleToRearrange(String s, String t, int k) {\\n        int n = s.length();\\n        if (n % k != 0) {\\n            return false;\\n        }\\n        \\n        int segmentLength = n / k;\\n        \\n        Map<String, Integer> substringCountS = new HashMap<>();\\n        Map<String, Integer> substringCountT = new HashMap<>();\\n\\n        for (int i = 0; i < n; i += segmentLength) {\\n            String substring = s.substring(i, i + segmentLength);\\n            substringCountS.put(substring, substringCountS.getOrDefault(substring, 0) + 1);\\n        }\\n\\n        for (int i = 0; i < n; i += segmentLength) {\\n            String substring = t.substring(i, i + segmentLength);\\n            substringCountT.put(substring, substringCountT.getOrDefault(substring, 0) + 1);\\n        }\\n\\n        return substringCountS.equals(substringCountT);\\n    }\\n}\\n","compare_resulttitle_slug":"rearrange-k-substrings-to-form-target-string","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1461275146,"question_id":3595,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732417163,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1461275146/","is_pending":"Not Pending","title":"Rearrange K Substrings to Form Target String","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public boolean isPossibleToRearrange(String s, String t, int k) {\\n        int n = s.length();\\n        int substringLength = n / k;\\n\\n        // Step 1: Split strings into k substrings and get frequency counts\\n        List<Map<Character, Integer>> sFreq = new ArrayList<>();\\n        List<Map<Character, Integer>> tFreq = new ArrayList<>();\\n\\n        for (int i = 0; i < n; i += substringLength) {\\n            sFreq.add(getFrequencyMap(s.substring(i, i + substringLength)));\\n            tFreq.add(getFrequencyMap(t.substring(i, i + substringLength)));\\n        }\\n\\n        // Step 2: Use a multiset approach to match substrings\\n        Map<Map<Character, Integer>, Integer> sCount = new HashMap<>();\\n        for (Map<Character, Integer> freqMap : sFreq) {\\n            sCount.put(freqMap, sCount.getOrDefault(freqMap, 0) + 1);\\n        }\\n\\n        for (Map<Character, Integer> freqMap : tFreq) {\\n            if (!sCount.containsKey(freqMap) || sCount.get(freqMap) == 0) {\\n                return false; // No match for this substring of t in s\\n            }\\n            sCount.put(freqMap, sCount.get(freqMap) - 1);\\n        }\\n\\n        return true; // All substrings matched\\n    }\\n\\n    private Map<Character, Integer> getFrequencyMap(String str) {\\n        Map<Character, Integer> freqMap = new HashMap<>();\\n        for (char c : str.toCharArray()) {\\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\\n        }\\n        return freqMap;\\n    }\\n}\\n","compare_resulttitle_slug":"rearrange-k-substrings-to-form-target-string","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1461274202,"question_id":3644,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732417118,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1461274202/","is_pending":"Not Pending","title":"Minimum Positive Sum Subarray ","memory":"44.6 MB","code":"class Solution {\\n    public int minimumSumSubarray(List<Integer> nums, int l, int r) {\\n        int n = nums.size();\\n        int minSum = Integer.MAX_VALUE;\\n        boolean found = false;\\n        for (int size = l; size <= r; size++) {\\n            int currentSum = 0;\\n            for (int i = 0; i < size; i++) {\\n                currentSum += nums.get(i);\\n            }\\n            if (currentSum > 0) {\\n                minSum = Math.min(minSum, currentSum);\\n                found = true;\\n            }\\n            for (int i = size; i < n; i++) {\\n                currentSum += nums.get(i) - nums.get(i - size);\\n\\n                if (currentSum > 0) {\\n                    minSum = Math.min(minSum, currentSum);\\n                    found = true;\\n                }\\n            }\\n        }\\n        return found ? minSum : -1;\\n    }\\n}","compare_resulttitle_slug":"minimum-positive-sum-subarray","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1461268346,"question_id":3595,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732416832,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1461268346/","is_pending":"Not Pending","title":"Rearrange K Substrings to Form Target String","memory":"N/A","code":"import java.util.*;\\n\\nclass Solution {\\n    public boolean isPossibleToRearrange(String s, String t, int k) {\\n        int n = s.length();\\n        int substringLength = n / k;\\n        List<String> sSubstrings = new ArrayList<>();\\n        List<String> tSubstrings = new ArrayList<>();\\n\\n        for (int i = 0; i < n; i += substringLength) {\\n            sSubstrings.add(s.substring(i, i + substringLength));\\n            tSubstrings.add(t.substring(i, i + substringLength));\\n        }\\n        List<Map<Character, Integer>> sFreq = new ArrayList<>();\\n        List<Map<Character, Integer>> tFreq = new ArrayList<>();\\n\\n        for (String sub : sSubstrings) {\\n            sFreq.add(getFrequencyMap(sub));\\n        }\\n        for (String sub : tSubstrings) {\\n            tFreq.add(getFrequencyMap(sub));\\n        }\\n        for (Map<Character, Integer> freqT : tFreq) {\\n            boolean foundMatch = false;\\n            for (int i = 0; i < sFreq.size(); i++) {\\n                if (sFreq.get(i).equals(freqT)) {\\n                    sFreq.remove(i);\\n                    foundMatch = true;\\n                    break;\\n                }\\n            }\\n            if (!foundMatch) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    private Map<Character, Integer> getFrequencyMap(String str) {\\n        Map<Character, Integer> freqMap = new HashMap<>();\\n        for (char c : str.toCharArray()) {\\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\\n        }\\n        return freqMap;\\n    }\\n}\\n","compare_resulttitle_slug":"rearrange-k-substrings-to-form-target-string","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1461253426,"question_id":3644,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732416158,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1461253426/","is_pending":"Not Pending","title":"Minimum Positive Sum Subarray ","memory":"44.6 MB","code":"import java.util.List;\\nclass Solution {\\n    public int minimumSumSubarray(List<Integer> nums, int l, int r) {\\n        int n = nums.size();\\n        int minSum = Integer.MAX_VALUE;\\n        boolean found = false;\\n        for (int size = l; size <= r; size++) {\\n            int currentSum = 0;\\n            for (int i = 0; i < size; i++) {\\n                currentSum += nums.get(i);\\n            }\\n            if (currentSum > 0) {\\n                minSum = Math.min(minSum, currentSum);\\n                found = true;\\n            }\\n            for (int i = size; i < n; i++) {\\n                currentSum += nums.get(i) - nums.get(i - size);\\n\\n                if (currentSum > 0) {\\n                    minSum = Math.min(minSum, currentSum);\\n                    found = true;\\n                }\\n            }\\n        }\\n        return found ? minSum : -1;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-positive-sum-subarray","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1461252068,"question_id":3644,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732416098,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1461252068/","is_pending":"Not Pending","title":"Minimum Positive Sum Subarray ","memory":"44.5 MB","code":"import java.util.List;\\n\\nclass Solution {\\n    public int minimumSumSubarray(List<Integer> nums, int l, int r) {\\n        int n = nums.size();\\n        int minSum = Integer.MAX_VALUE;\\n        boolean found = false;\\n\\n        // Iterate over all possible subarray sizes between l and r\\n        for (int size = l; size <= r; size++) {\\n            int currentSum = 0;\\n\\n            // Compute the sum of the first \'size\' elements\\n            for (int i = 0; i < size; i++) {\\n                currentSum += nums.get(i);\\n            }\\n\\n            // Check the first window\\n            if (currentSum > 0) {\\n                minSum = Math.min(minSum, currentSum);\\n                found = true;\\n            }\\n\\n            // Slide the window across the array\\n            for (int i = size; i < n; i++) {\\n                currentSum += nums.get(i) - nums.get(i - size);\\n\\n                if (currentSum > 0) {\\n                    minSum = Math.min(minSum, currentSum);\\n                    found = true;\\n                }\\n            }\\n        }\\n\\n        return found ? minSum : -1;\\n    }\\n}\\n","compare_resulttitle_slug":"minimum-positive-sum-subarray","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1460998929,"question_id":1972,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732384198,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1460998929/","is_pending":"Not Pending","title":"Rotating the Box","memory":"79.8 MB","code":"class Solution {\\n    public char[][] rotateTheBox(char[][] box) {\\n        for(char[] row:box){\\n            for(int start=0;start<row.length;start++){\\n                if(row[start]==\'#\'){\\n                    int index=row.length-1;\\n                    for(int end=start+1;end<row.length;end++){\\n                        if(row[end]==\'*\'){\\n                            index=start;\\n                            break;\\n                        }\\n                        else if(row[end]==\'.\'){\\n                            index=end;\\n                            break;\\n                        }\\n                    }\\n                    char temp=row[index];\\n                    row[index]=row[start];\\n                    row[start]=temp;\\n                }\\n            }\\n        }\\n        char[][] newBox=new char[box[0].length][box.length];\\n        for(int i=0;i<box.length;i++){\\n            for(int j=0;j<box[0].length;j++){\\n                newBox[j][box.length-1-i]=box[i][j];\\n            }\\n        }\\n        return newBox;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotating-the-box","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1459749393,"question_id":948,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months","timestamp":1732252000,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1459749393/","is_pending":"Not Pending","title":"Sort an Array","memory":"N/A","code":"class Solution {\\n    public int[] sortArray(int[] nums) \\n    {\\n        int n=nums.length;\\n        int m=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            m=Math.max(m,nums[i]);\\n        }\\n        int ca[]=new int[m+1];\\n        for(int i=0;i<n;i++)\\n        {\\n            ca[nums[i]]++;\\n        }\\n        for(int i=1;i<=m;i++)\\n        {\\n            ca[i]+=ca[i-1];\\n        }\\n        int oa[]=new int[n];\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            oa[ca[nums[i]]-1]=nums[i];\\n            ca[nums[i]]--;\\n        }\\n        return oa;\\n    }\\n}","compare_result":"111000000000000000000","title_slug":"sort-an-array","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1454910476,"question_id":3658,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 1\xc2\xa0week","timestamp":1731815312,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1454910476/","is_pending":"Not Pending","title":"Minimize the Maximum Adjacent Element Difference","memory":"N/A","code":"class Solution {\\n    public int minDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] xerolithx = nums.clone();\\n        \\n        int left = Integer.MAX_VALUE;\\n        int right = Integer.MIN_VALUE;\\n\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] != -1) {\\n                if (i > 0 && nums[i - 1] == -1) {\\n                    left = Math.min(left, nums[i]);\\n                    right = Math.max(right, nums[i]);\\n                }\\n                if (i < n - 1 && nums[i + 1] == -1) {\\n                    left = Math.min(left, nums[i]);\\n                    right = Math.max(right, nums[i]);\\n                }\\n            }\\n        }\\n\\n        if (left == Integer.MAX_VALUE && right == Integer.MIN_VALUE) {\\n            return 0;\\n        }\\n\\n        int x = (left + right) / 2;\\n        int y = x + 1;\\n\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] == -1) {\\n                nums[i] = (Math.abs(left - x) < Math.abs(left - y)) ? x : y;\\n            }\\n        }\\n\\n        int maxDiff = 0;\\n        for (int i = 1; i < n; i++) {\\n            maxDiff = Math.max(maxDiff, Math.abs(nums[i] - nums[i - 1]));\\n        }\\n\\n        return maxDiff;\\n    }\\n}\\n","compare_resulttitle_slug":"minimize-the-maximum-adjacent-element-difference","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1454908437,"question_id":3658,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 1\xc2\xa0week","timestamp":1731815222,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1454908437/","is_pending":"Not Pending","title":"Minimize the Maximum Adjacent Element Difference","memory":"N/A","code":"class Solution {\\n    public int minDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] xerolithx = nums.clone();\\n        int left = Integer.MAX_VALUE;\\n        int right = Integer.MIN_VALUE;\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] != -1) {\\n                if (i > 0 && nums[i - 1] == -1) {\\n                    left = Math.min(left, nums[i]);\\n                    right = Math.max(right, nums[i]);\\n                }\\n                if (i < n - 1 && nums[i + 1] == -1) {\\n                    left = Math.min(left, nums[i]);\\n                    right = Math.max(right, nums[i]);\\n                }\\n            }\\n        }\\n        if (left == Integer.MAX_VALUE && right == Integer.MIN_VALUE) {\\n            return 0;  \\n        }\\n        int x = (left + right) / 2;\\n        int y = x + 1;\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] == -1) {\\n                nums[i] = (Math.abs(left - x) < Math.abs(left - y)) ? x : y;\\n            }\\n        }\\n        int maxDiff = 0;\\n        for (int i = 1; i < n; i++) {\\n            maxDiff = Math.max(maxDiff, Math.abs(nums[i] - nums[i - 1]));\\n        }\\n\\n        return maxDiff;\\n    }\\n}\\n","compare_resulttitle_slug":"minimize-the-maximum-adjacent-element-difference","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1454874320,"question_id":3616,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 1\xc2\xa0week","timestamp":1731813722,"status":10,"status_display":"Accepted","runtime":"127 ms","url":"/submissions/detail/1454874320/","is_pending":"Not Pending","title":"Make Array Elements Equal to Zero","memory":"43.4 MB","code":"class Solution {\\n    public int countValidSelections(int[] nums) {\\n        int n = nums.length;\\n        int validSelections = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] == 0) {\\n                if (canMakeAllZeros(nums.clone(), i, -1)) {\\n                    validSelections++;\\n                }\\n                if (canMakeAllZeros(nums.clone(), i, 1)) {\\n                    validSelections++;\\n                }\\n            }\\n        }\\n\\n        return validSelections;\\n    }\\n\\n    private boolean canMakeAllZeros(int[] nums, int curr, int direction) {\\n        int n = nums.length;\\n\\n        while (curr >= 0 && curr < n) {\\n            if (nums[curr] == 0) {\\n                curr += direction;\\n            } else if (nums[curr] > 0) {\\n                nums[curr]--;\\n                direction *= -1;\\n                curr += direction;\\n            }\\n        }\\n\\n        for (int num : nums) {\\n            if (num != 0) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n","compare_resulttitle_slug":"make-array-elements-equal-to-zero","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1448280303,"question_id":3612,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1731209795,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1448280303/","is_pending":"Not Pending","title":"Adjacent Increasing Subarrays Detection I","memory":"44.3 MB","code":"class Solution {\\n    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {\\n        for (int i = 0; i <= nums.size() - 2 * k; i++) {\\n        \\n            if (isStrictlyIncreasing(nums, i, k)) {\\n                if (isStrictlyIncreasing(nums, i + k, k)) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n        \\n    }\\n     private boolean isStrictlyIncreasing(List<Integer> nums, int s, int k) {\\n        for (int i = s; i < s + k - 1; i++) {\\n            if (nums.get(i) >= nums.get(i + 1)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n     }\\n}\\n   ","compare_resulttitle_slug":"adjacent-increasing-subarrays-detection-i","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1447754922,"question_id":3626,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1731166035,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1447754922/","is_pending":"Not Pending","title":"Smallest Divisible Digit Product I","memory":"41.5 MB","code":"class Solution {\\n    public int smallestNumber(int n, int t) {\\n        while(true){\\n            int p=pro(n);\\n            if(p%t==0){\\n                return n;\\n            }\\n            n++;\\n        }\\n    }\\n    public int pro(int n){\\n        int p=1;\\n        while(n>0){\\n            int d=n%10;\\n            p*=d;\\n            n/=10;\\n        }\\n        return p;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-divisible-digit-product-i","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1447749088,"question_id":3626,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1731165815,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1447749088/","is_pending":"Not Pending","title":"Smallest Divisible Digit Product I","memory":"N/A","code":"class Solution {\\n    public int smallestNumber(int n, int t) {\\n        while(true){\\n            int p=pro(n);\\n            if(p%t==0){\\n                return 0;\\n            }\\n            n++;\\n        }\\n    }\\n    public int pro(int n){\\n        int p=1;\\n        while(n>0){\\n            int d=n%10;\\n            p*=d;\\n            n/=10;\\n        }\\n        return p;\\n    }\\n}","compare_resulttitle_slug":"smallest-divisible-digit-product-i","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1446572314,"question_id":40,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1731054793,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1446572314/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43.1 MB","code":"class Solution {\\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\\n        Arrays.sort(candidates);\\n        List<List<Integer>>res=new ArrayList<>();\\n        dfs(candidates,res,new ArrayList<>(),0,target,0);\\n        return res;\\n    }\\n    public void dfs(int[] candidates,List<List<Integer>>res,List<Integer>list,int idx,int target,int sum){\\n        if(sum==target){\\n            res.add(new ArrayList<>(list));\\n            return;\\n        }\\n        if(sum>target||idx>=candidates.length){\\n            return;\\n        }\\n       \\n        list.add(candidates[idx]);\\n        dfs(candidates,res,list,idx+1,target,sum+candidates[idx]);\\n        list.remove(list.size()-1);\\n        while(idx+1<candidates.length&&candidates[idx]==candidates[idx+1]){\\n            idx++;\\n        }\\n        dfs(candidates,res,list,idx+1,target,sum);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1446509622,"question_id":494,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1731048862,"status":10,"status_display":"Accepted","runtime":"560 ms","url":"/submissions/detail/1446509622/","is_pending":"Not Pending","title":"Target Sum","memory":"41.6 MB","code":"class Solution {\\n    public int findTargetSumWays(int[] nums, int target) \\n    {\\n        int n=nums.length;\\n        c=0;\\n        count(nums,n,target,0,0);\\n        return c;\\n    }\\n    static int c=0;\\n    static void count(int a[],int n,int t,int s,int id)\\n    {\\n        if(id==n)\\n        {\\n            if(s==t)\\n            {\\n                c++;\\n                return;\\n            }\\n            else\\n            {\\n                return;\\n            }\\n        }\\n        count(a,n,t,s+a[id],id+1);\\n        count(a,n,t,s-a[id],id+1);\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1446417605,"question_id":77,"lang":"java","lang_name":"Java","time":"9\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1731041752,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1446417605/","is_pending":"Not Pending","title":"Combinations","memory":"94.6 MB","code":"class Solution {\\n    public List<List<Integer>> combine(int n, int k) {\\n        List<List<Integer>> result = new ArrayList<>();\\n        List<Integer> currentCombination = new ArrayList<>();\\n\\n        backtrack(n, k, 1, currentCombination, result);\\n\\n        return result;\\n    }\\n\\n    private static void backtrack(int n, int k, int start, List<Integer> currentCombination, List<List<Integer>> result) {\\n        if (currentCombination.size() == k) {\\n            result.add(new ArrayList<>(currentCombination));\\n            return;\\n        }\\n\\n        for (int i = start; i <= n; i++) {\\n            currentCombination.add(i);\\n            backtrack(n, k, i + 1, currentCombination, result);\\n            currentCombination.remove(currentCombination.size() - 1);\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1434340022,"question_id":3617,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months","timestamp":1729956142,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1434340022/","is_pending":"Not Pending","title":"Find the Original Typed String I","memory":"42.2 MB","code":"class Solution {\\n    public int possibleStringCount(String word)\\n    {\\n        int n = word.length();\\n        int result = 1; // Start with 1 because the original string itself is always a valid possibility\\n\\n        int i = 0;\\n        while (i < n) {\\n            char currentChar = word.charAt(i);\\n            int count = 0;\\n\\n            // Count the consecutive occurrences of the current character\\n            while (i < n && word.charAt(i) == currentChar) {\\n                i++;\\n                count++;\\n            }\\n\\n            // If count > 1, we can remove 0, 1, 2, ..., count - 1 occurrences of this character\\n            // This gives us \'count\' choices (including not removing any occurrences)\\n            result += count - 1;\\n        }\\n\\n        return result;\\n    }\\n}","compare_resulttitle_slug":"find-the-original-typed-string-i","has_notes":false,"flag_type":1,"frontend_id":71}],"has_next":true,"last_key":""}'
2025-08-25 23:33:27,864 [INFO] __main__.py:188 - Skipping sort-an-array 2024-11-24 12.19.09 because its status is 'Runtime Error'
2025-08-25 23:33:28,244 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:28,246 [INFO] __main__.py:245 - Writing rearrange-k-substrings-to-form-target-string/2024-11-24 08.48.37 - Accepted - runtime 64ms - memory 55MB.java
2025-08-25 23:33:28,256 [INFO] __main__.py:208 - Skipping rearrange-k-substrings-to-form-target-string 2024-11-24 08.46.09 in java because a more recent submission has already been exported
2025-08-25 23:33:28,256 [INFO] __main__.py:188 - Skipping rearrange-k-substrings-to-form-target-string 2024-11-24 08.29.23 because its status is 'Wrong Answer'
2025-08-25 23:33:28,603 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:28,605 [INFO] __main__.py:245 - Writing minimum-positive-sum-subarray/2024-11-24 08.28.38 - Accepted - runtime 3ms - memory 44.6MB.java
2025-08-25 23:33:28,605 [INFO] __main__.py:188 - Skipping rearrange-k-substrings-to-form-target-string 2024-11-24 08.23.52 because its status is 'Wrong Answer'
2025-08-25 23:33:28,605 [INFO] __main__.py:208 - Skipping minimum-positive-sum-subarray 2024-11-24 08.12.38 in java because a more recent submission has already been exported
2025-08-25 23:33:28,605 [INFO] __main__.py:208 - Skipping minimum-positive-sum-subarray 2024-11-24 08.11.38 in java because a more recent submission has already been exported
2025-08-25 23:33:28,943 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:28,945 [INFO] __main__.py:245 - Writing rotating-the-box/2024-11-23 23.19.58 - Accepted - runtime 22ms - memory 79.8MB.java
2025-08-25 23:33:28,947 [INFO] __main__.py:188 - Skipping sort-an-array 2024-11-22 10.36.40 because its status is 'Runtime Error'
2025-08-25 23:33:28,947 [INFO] __main__.py:188 - Skipping minimize-the-maximum-adjacent-element-difference 2024-11-17 09.18.32 because its status is 'Wrong Answer'
2025-08-25 23:33:28,947 [INFO] __main__.py:188 - Skipping minimize-the-maximum-adjacent-element-difference 2024-11-17 09.17.02 because its status is 'Wrong Answer'
2025-08-25 23:33:29,606 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:29,616 [INFO] __main__.py:245 - Writing make-array-elements-equal-to-zero/2024-11-17 08.52.02 - Accepted - runtime 127ms - memory 43.4MB.java
2025-08-25 23:33:29,953 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:29,957 [INFO] __main__.py:245 - Writing adjacent-increasing-subarrays-detection-i/2024-11-10 09.06.35 - Accepted - runtime 1ms - memory 44.3MB.java
2025-08-25 23:33:30,299 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:30,299 [INFO] __main__.py:245 - Writing smallest-divisible-digit-product-i/2024-11-09 20.57.15 - Accepted - runtime 0ms - memory 41.5MB.java
2025-08-25 23:33:30,301 [INFO] __main__.py:188 - Skipping smallest-divisible-digit-product-i 2024-11-09 20.53.35 because its status is 'Wrong Answer'
2025-08-25 23:33:30,643 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:30,643 [INFO] __main__.py:245 - Writing combination-sum-ii/2024-11-08 14.03.13 - Accepted - runtime 5ms - memory 43.1MB.java
2025-08-25 23:33:30,643 [INFO] __main__.py:208 - Skipping target-sum 2024-11-08 12.24.22 in java because a more recent submission has already been exported
2025-08-25 23:33:31,082 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:31,085 [INFO] __main__.py:245 - Writing combinations/2024-11-08 10.25.52 - Accepted - runtime 18ms - memory 94.6MB.java
2025-08-25 23:33:31,085 [INFO] __main__.py:208 - Skipping find-the-original-typed-string-i 2024-10-26 20.52.22 in java because a more recent submission has already been exported
2025-08-25 23:33:36,086 [DEBUG] leetcode.py:150 - Exporting submissions from 580 to 600
2025-08-25 23:33:36,578 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=580&limit=20 HTTP/11" 200 None
2025-08-25 23:33:36,598 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1427861264,"question_id":3566,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 1\xc2\xa0week","timestamp":1729392971,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1427861264/","is_pending":"Not Pending","title":"Find the Sequence of Strings Appeared on the Screen","memory":"55.5 MB","code":"class Solution {\\n    public List<String> stringSequence(String target) \\n    {\\n List<String> result = new ArrayList<>();\\n        StringBuilder current = new StringBuilder();\\n        char currentChar = \'a\';\\n        for (char ch : target.toCharArray()) {\\n            if (current.length() == 0) {\\n                current.append(\'a\');\\n                result.add(current.toString());\\n            }\\n            while (currentChar != ch) {\\n                currentChar = currentChar == \'z\' ? \'a\' : (char) (currentChar + 1);\\n                current.setCharAt(current.length() - 1, currentChar);\\n                result.add(current.toString());\\n            }\\n\\n            if (current.length() < target.length()) {\\n                current.append(\'a\'); \\n                currentChar = \'a\';\\n                result.add(current.toString());\\n            }\\n        }\\n        return result;\\n    }\\n}","compare_resulttitle_slug":"find-the-sequence-of-strings-appeared-on-the-screen","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1420091302,"question_id":3605,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1728747170,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1420091302/","is_pending":"Not Pending","title":"Construct the Minimum Bitwise Array I","memory":"44.9 MB","code":"class Solution {\\n    public int[] minBitwiseArray(List<Integer> nums) {\\n        int n=nums.size();\\n        int [] a=new int[n];\\n        for(int i=0;i<n;i++){\\n            int num=nums.get(i);\\n            boolean f=false;\\n            for(int j=0;j<=num;j++){\\n                if((j|(j+1))==num){\\n                    a[i]=j;\\n                    f=true;\\n                    break;\\n                }\\n            }\\n            if(!f){\\n                a[i]=-1;\\n            }\\n\\n        }\\n        return a;\\n    }\\n}","compare_resulttitle_slug":"construct-the-minimum-bitwise-array-i","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1413224450,"question_id":3579,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728184908,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1413224450/","is_pending":"Not Pending","title":"Maximum Possible Number by Binary Concatenation","memory":"41.9 MB","code":"\\nclass Solution {\\n    public int maxGoodNumber(int[] nums)\\n     {\\n           String[] binaryStrings = new String[nums.length];\\n        for (int i = 0; i < nums.length; i++) {\\n            binaryStrings[i] = Integer.toBinaryString(nums[i]);\\n        }\\n\\n        Arrays.sort(binaryStrings, new Comparator<String>() {\\n            @Override\\n            public int compare(String a, String b) {\\n                // Compare concatenated results\\n                return (b + a).compareTo(a + b);\\n            }\\n        });\\n        StringBuilder concatenatedBinary = new StringBuilder();\\n        for (String binary : binaryStrings) {\\n            concatenatedBinary.append(binary);\\n        }\\n        return Integer.parseInt(concatenatedBinary.toString(), 2);\\n    }\\n}","compare_resulttitle_slug":"maximum-possible-number-by-binary-concatenation","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1413224110,"question_id":3579,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728184892,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1413224110/","is_pending":"Not Pending","title":"Maximum Possible Number by Binary Concatenation","memory":"N/A","code":"\\nclass Solution {\\n    public int maxGoodNumber(int[] nums)\\n     {\\n           String[] binaryStrings = new String[nums.length];\\n        for (int i = 0; i < nums.length; i++) {\\n            binaryStrings[i] = Integer.toBinaryString(nums[i]);\\n        }\\n\\n        Arrays.sort(binaryStrings, new Comparator<String>() {\\n            @Override\\n            public int compare(String a, String b) \\n                return (b + a).compareTo(a + b);\\n            }\\n        });\\n        StringBuilder concatenatedBinary = new StringBuilder();\\n        for (String binary : binaryStrings) {\\n            concatenatedBinary.append(binary);\\n        }\\n        return Integer.parseInt(concatenatedBinary.toString(), 2);\\n    }\\n}","compare_result":null,"title_slug":"maximum-possible-number-by-binary-concatenation","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1413223269,"question_id":3579,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728184854,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1413223269/","is_pending":"Not Pending","title":"Maximum Possible Number by Binary Concatenation","memory":"42.1 MB","code":"\\nclass Solution {\\n    public int maxGoodNumber(int[] nums)\\n     {\\n           String[] binaryStrings = new String[nums.length];\\n        for (int i = 0; i < nums.length; i++) {\\n            binaryStrings[i] = Integer.toBinaryString(nums[i]);\\n        }\\n\\n        // Sort the binary strings based on their concatenated values\\n        Arrays.sort(binaryStrings, new Comparator<String>() {\\n            @Override\\n            public int compare(String a, String b) {\\n                // Compare concatenated results\\n                return (b + a).compareTo(a + b);\\n            }\\n        });\\n\\n        // Build the final concatenated binary string\\n        StringBuilder concatenatedBinary = new StringBuilder();\\n        for (String binary : binaryStrings) {\\n            concatenatedBinary.append(binary);\\n        }\\n\\n        // Convert the binary string to integer\\n        return Integer.parseInt(concatenatedBinary.toString(), 2);\\n    }\\n}","compare_resulttitle_slug":"maximum-possible-number-by-binary-concatenation","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1413205609,"question_id":3583,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728184077,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1413205609/","is_pending":"Not Pending","title":"Sorted GCD Pair Queries","memory":"N/A","code":"class Solution {\\n    public int[] gcdValues(int[] nums, long[] queries)\\n    {\\n             List<Integer> gp = new ArrayList<>();\\n\\n        \\n        for (int i = 0; i < nums.length; i++) \\n        {\\n            for (int j = i + 1; j < nums.length; j++)\\n             {\\n                \\n                int a = nums[i], b = nums[j];\\n                while (b != 0) {\\n                    int temp = b;\\n                    b = a % b;\\n                    a = temp;\\n                }\\n                gp.add(a);  \\n            }\\n        }\\n\\n        \\n        Collections.sort(gp);\\n\\n       \\n        int[] result = new int[queries.length];\\n        for (int i = 0; i < queries.length; i++) {\\n           \\n            result[i] = gp.get((int) queries[i]);\\n        }\\n\\n        return result;\\n        \\n    }\\n}","compare_resulttitle_slug":"sorted-gcd-pair-queries","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1413194273,"question_id":3579,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728183575,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1413194273/","is_pending":"Not Pending","title":"Maximum Possible Number by Binary Concatenation","memory":"N/A","code":"\\nclass Solution {\\n    public int maxGoodNumber(int[] nums)\\n     {\\n        int r=0;\\n        for(int i:nums)\\n        {\\n            int nb=Integer.toBinaryString(i).length();\\n            r=(r<<nb)|i;\\n        }\\n        return r;\\n    }\\n}","compare_resulttitle_slug":"maximum-possible-number-by-binary-concatenation","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1411192658,"question_id":342,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728017839,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1411192658/","is_pending":"Not Pending","title":"Power of Four","memory":"40.9 MB","code":"class Solution {\\n    public boolean isPowerOfFour(int n)\\n     {\\n      if(n==0)\\n      {\\n        return false;\\n      }  \\n      while(n%4==0)\\n      {\\n        n/=4;\\n      }\\n      return n==1;\\n    }\\n}","compare_resulttitle_slug":"power-of-four","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1411191087,"question_id":326,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728017729,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1411191087/","is_pending":"Not Pending","title":"Power of Three","memory":"43.9 MB","code":"class Solution {\\n    public boolean isPowerOfThree(int n) \\n    {\\n      if(n==0)\\n      {\\n        return false;\\n      }    \\n      while(n%3==0)\\n      {\\n        n/=3;\\n      }\\n      return n==1;\\n    }\\n}","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1411185198,"question_id":231,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728017309,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1411185198/","is_pending":"Not Pending","title":"Power of Two","memory":"40.4 MB","code":"class Solution {\\n    public boolean isPowerOfTwo(int n)\\n     {\\n        if(n==0)\\n        {\\n            return false;\\n        }\\n        while(n%2==0)\\n        {\\n            n/=2;\\n        }\\n        return n==1;\\n    }\\n}","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1411184203,"question_id":231,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728017240,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1411184203/","is_pending":"Not Pending","title":"Power of Two","memory":"N/A","code":"class Solution {\\n    public boolean isPowerOfTwo(int n)\\n     {\\n        while(n%2==0)\\n        {\\n            n/=2;\\n        }\\n        return n==1;\\n    }\\n}","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1411174111,"question_id":1013,"lang":"java","lang_name":"Java","time":"10\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1728016506,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1411174111/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"40.2 MB","code":"class Solution {\\n    public int fib(int n) \\n    {\\n     if(n<=1)\\n     {\\n        return n;\\n     }   \\n     return fib(n-1)+fib(n-2);\\n    }\\n}","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1405604656,"question_id":3600,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727579479,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1405604656/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"42.1 MB","code":"class Solution {\\n    public char kthCharacter(int k)\\n    {\\n      StringBuilder s=new StringBuilder(\\"a\\");\\n      while(s.length()<k)\\n      {\\n        StringBuilder s1=new StringBuilder();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int x=(int)s.charAt(i);\\n            if(x<122)\\n            {\\n                s1.append((char)(x+1));\\n            }\\n            else\\n            {\\n                s1.append(\'a\');\\n            }\\n        }\\n        s.append(s1);\\n      }\\n      return s.charAt(k-1);\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1405037372,"question_id":3606,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727536163,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1405037372/","is_pending":"Not Pending","title":"Minimum Element After Replacement With Digit Sum","memory":"43 MB","code":"class Solution {\\n    public int minElement(int[] nums) \\n    {\\n        int s=0;\\n        int m=nums[0];\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            s=0;\\n            while(nums[i]!=0)\\n            {\\n            int r=nums[i]%10;\\n            s+=r;\\n            nums[i]/=10;\\n           }\\n           nums[i]=s;\\n    }\\n    for(int i=0;i<nums.length;i++)\\n    {\\n        if(nums[i]<m)\\n        {\\n            m=nums[i];\\n        }\\n    }\\n    \\n    return m;\\n}\\n}","compare_resulttitle_slug":"minimum-element-after-replacement-with-digit-sum","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1405025809,"question_id":3606,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727535830,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1405025809/","is_pending":"Not Pending","title":"Minimum Element After Replacement With Digit Sum","memory":"N/A","code":"class Solution {\\n    public int minElement(int[] nums) \\n    {\\n        int s=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            while(nums[i]!=0)\\n            {\\n            int r=nums[i]%10;\\n            s+=r;\\n            nums[i]/=10;\\n           }\\n           nums[i]=s;\\n    }\\n    Arrays.sort(nums);\\n    return nums[0];\\n}\\n}","compare_resulttitle_slug":"minimum-element-after-replacement-with-digit-sum","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1403256635,"question_id":137,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727376427,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1403256635/","is_pending":"Not Pending","title":"Single Number II","memory":"45.6 MB","code":"class Solution {\\n    public int singleNumber(int[] nums) \\n    {\\n        Arrays.sort(nums);\\n        int l=nums[nums.length-1];\\n        for(int i=0;i<nums.length-1;i+=3)\\n        {\\n            if(nums[i]!=nums[i+1])\\n            {\\n                \\n               l =nums[i];\\n               break;\\n            }\\n        }\\n        return l;\\n    }\\n}","compare_result":"111111111111111","title_slug":"single-number-ii","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1403254288,"question_id":137,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727376279,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1403254288/","is_pending":"Not Pending","title":"Single Number II","memory":"N/A","code":"class Solution {\\n    public int singleNumber(int[] nums) \\n    {\\n        Arrays.sort(nums);\\n        int l=nums[nums.length-1];\\n        for(int i=0;i<nums.length-1;i+=3)\\n        {\\n            if(nums[i]!=nums[i+1])\\n            {\\n                \\n               l =nums[i];\\n            }\\n        }\\n        return l;\\n    }\\n}","compare_result":"111110100100001","title_slug":"single-number-ii","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1403190797,"question_id":136,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727372796,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1403190797/","is_pending":"Not Pending","title":"Single Number","memory":"45.5 MB","code":"class Solution {\\n    public int singleNumber(int[] nums) \\n    {\\n        int xor=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            xor=xor^nums[i];\\n        }\\n        return xor;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"single-number","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1401649322,"question_id":2058,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727253277,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1401649322/","is_pending":"Not Pending","title":"Concatenation of Array","memory":"44.8 MB","code":"class Solution {\\n    public int[] getConcatenation(int[] nums) \\n    {\\n        int arr[]=new int[nums.length*2];\\n        for(int i=0;i<arr.length;i++)\\n        {\\n         arr[i]=nums[i%nums.length];\\n        }\\n        return arr;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"concatenation-of-array","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1401641607,"question_id":1651,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727252554,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1401641607/","is_pending":"Not Pending","title":"Shuffle String","memory":"44.6 MB","code":"class Solution {\\r\\n    public String restoreString(String s, int[] indices) \\r\\n    {\\r\\n        int j=0;\\r\\n        char c[]=new char[s.length()];\\r\\n        for(int i:indices)\\r\\n        {\\r\\n            c[i]=s.charAt(j);\\r\\n            j++;\\r\\n        }\\r\\n        //String str=new String(c);\\r\\n        return new String(c);\\r\\n    }\\r\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shuffle-string","has_notes":false,"flag_type":1,"frontend_id":51}],"has_next":true,"last_key":""}'
2025-08-25 23:33:36,965 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:36,967 [INFO] __main__.py:245 - Writing find-the-sequence-of-strings-appeared-on-the-screen/2024-10-20 08.26.11 - Accepted - runtime 6ms - memory 55.5MB.java
2025-08-25 23:33:37,904 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:37,909 [INFO] __main__.py:245 - Writing construct-the-minimum-bitwise-array-i/2024-10-12 21.02.50 - Accepted - runtime 3ms - memory 44.9MB.java
2025-08-25 23:33:38,289 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:38,291 [INFO] __main__.py:245 - Writing maximum-possible-number-by-binary-concatenation/2024-10-06 08.51.48 - Accepted - runtime 5ms - memory 41.9MB.java
2025-08-25 23:33:38,291 [INFO] __main__.py:188 - Skipping maximum-possible-number-by-binary-concatenation 2024-10-06 08.51.32 because its status is 'Compile Error'
2025-08-25 23:33:38,291 [INFO] __main__.py:208 - Skipping maximum-possible-number-by-binary-concatenation 2024-10-06 08.50.54 in java because a more recent submission has already been exported
2025-08-25 23:33:38,291 [INFO] __main__.py:188 - Skipping sorted-gcd-pair-queries 2024-10-06 08.37.57 because its status is 'Memory Limit Exceeded'
2025-08-25 23:33:38,291 [INFO] __main__.py:188 - Skipping maximum-possible-number-by-binary-concatenation 2024-10-06 08.29.35 because its status is 'Wrong Answer'
2025-08-25 23:33:38,291 [INFO] __main__.py:208 - Skipping power-of-four 2024-10-04 10.27.19 in java because a more recent submission has already been exported
2025-08-25 23:33:38,291 [INFO] __main__.py:208 - Skipping power-of-three 2024-10-04 10.25.29 in java because a more recent submission has already been exported
2025-08-25 23:33:38,291 [INFO] __main__.py:208 - Skipping power-of-two 2024-10-04 10.18.29 in java because a more recent submission has already been exported
2025-08-25 23:33:38,291 [INFO] __main__.py:188 - Skipping power-of-two 2024-10-04 10.17.20 because its status is 'Time Limit Exceeded'
2025-08-25 23:33:38,716 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:38,720 [INFO] __main__.py:245 - Writing fibonacci-number/2024-10-04 10.05.06 - Accepted - runtime 9ms - memory 40.2MB.java
2025-08-25 23:33:38,722 [INFO] __main__.py:208 - Skipping find-the-k-th-character-in-string-game-i 2024-09-29 08.41.19 in java because a more recent submission has already been exported
2025-08-25 23:33:39,708 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:39,719 [INFO] __main__.py:245 - Writing minimum-element-after-replacement-with-digit-sum/2024-09-28 20.39.23 - Accepted - runtime 1ms - memory 43MB.java
2025-08-25 23:33:39,724 [INFO] __main__.py:188 - Skipping minimum-element-after-replacement-with-digit-sum 2024-09-28 20.33.50 because its status is 'Wrong Answer'
2025-08-25 23:33:40,074 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:40,074 [INFO] __main__.py:245 - Writing single-number-ii/2024-09-27 00.17.07 - Accepted - runtime 4ms - memory 45.6MB.java
2025-08-25 23:33:40,091 [INFO] __main__.py:188 - Skipping single-number-ii 2024-09-27 00.14.39 because its status is 'Wrong Answer'
2025-08-25 23:33:40,093 [INFO] __main__.py:208 - Skipping single-number 2024-09-26 23.16.36 in java because a more recent submission has already been exported
2025-08-25 23:33:40,469 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:40,469 [INFO] __main__.py:245 - Writing concatenation-of-array/2024-09-25 14.04.37 - Accepted - runtime 1ms - memory 44.8MB.java
2025-08-25 23:33:41,096 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:41,107 [INFO] __main__.py:245 - Writing shuffle-string/2024-09-25 13.52.34 - Accepted - runtime 0ms - memory 44.6MB.java
2025-08-25 23:33:46,112 [DEBUG] leetcode.py:150 - Exporting submissions from 600 to 620
2025-08-25 23:33:46,699 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=600&limit=20 HTTP/11" 200 None
2025-08-25 23:33:46,701 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1401640625,"question_id":1651,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727252466,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1401640625/","is_pending":"Not Pending","title":"Shuffle String","memory":"44.4 MB","code":"class Solution {\\r\\n    public String restoreString(String s, int[] indices) \\r\\n    {\\r\\n        int j=0;\\r\\n        char c[]=new char[s.length()];\\r\\n        for(int i:indices)\\r\\n        {\\r\\n            c[i]=s.charAt(j);\\r\\n            j++;\\r\\n        }\\r\\n        String str=new String(c);\\r\\n        return str;\\r\\n    }\\r\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shuffle-string","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1401632187,"question_id":1781,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727251669,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1401632187/","is_pending":"Not Pending","title":"Check If Two String Arrays are Equivalent","memory":"40.9 MB","code":"class Solution {\\n    public boolean arrayStringsAreEqual(String[] word1, String[] word2) \\n    {\\n        String s1=String.join(\\"\\",word1);\\n        String s2=String.join(\\"\\",word2);\\n        return s1.equals(s2);\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-two-string-arrays-are-equivalent","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1401626695,"question_id":2219,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727251141,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1401626695/","is_pending":"Not Pending","title":"Maximum Number of Words Found in Sentences","memory":"43.4 MB","code":"import java.util.*;\\nclass Solution {\\n    public int mostWordsFound(String[] sentences) \\n    {\\n        int max=0;\\n        //StringTokenizer st;\\n        for(int i=0;i<sentences.length;i++)\\n        {\\n            StringTokenizer st=new StringTokenizer(sentences[i]);\\n            if(st.countTokens()>max)\\n            {\\n                max=st.countTokens();\\n            }\\n        }\\n        return max;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-words-found-in-sentences","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1401616882,"question_id":2737,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months","timestamp":1727250230,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1401616882/","is_pending":"Not Pending","title":"Row With Maximum Ones","memory":"46.8 MB","code":"class Solution {\\n    public int[] rowAndMaximumOnes(int[][] mat) \\n    {\\n        int n=mat.length;\\n        int m=mat[0].length;\\n        int max=0,ind=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            int c=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                if(mat[i][j]==1)\\n                {\\n                    c++;\\n                    if(max<c)\\n                    {\\n                       max=c;\\n                       ind=i;\\n                    }\\n                }\\n            }\\n        }\\n        int arr[]={ind,max};\\n        return arr;\\n        \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"row-with-maximum-ones","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1398786174,"question_id":742,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1727026317,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1398786174/","is_pending":"Not Pending","title":"To Lower Case","memory":"41.1 MB","code":"class Solution {\\n    public String toLowerCase(String s) \\n    {\\n        char cc[]=s.toCharArray();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch=cc[i];\\n            if(Character.isUpperCase(ch))\\n            {\\n                cc[i]=Character.toLowerCase(ch);\\n            }\\n        }\\n        String ss=new String(cc);\\n        return ss;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"to-lower-case","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1398781933,"question_id":1781,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1727026077,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1398781933/","is_pending":"Not Pending","title":"Check If Two String Arrays are Equivalent","memory":"40.7 MB","code":"class Solution {\\n    public boolean arrayStringsAreEqual(String[] word1, String[] word2)\\n     {\\n        String s1=String.join(\\"\\",word1);\\n        String s2=String.join(\\"\\",word2);\\n        return s1.equals(s2);\\n\\n\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-two-string-arrays-are-equivalent","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1398043131,"question_id":3541,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1726974723,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1398043131/","is_pending":"Not Pending","title":"Report Spam Message","memory":"85.3 MB","code":"class Solution\\n {\\n    public boolean reportSpam(String[] message, String[] bannedWords)\\n     {\\n        int c=0;\\n        Set<String> ss=new HashSet<>(Arrays.asList(bannedWords));\\n        for(String word:message)\\n        {\\n            if(ss.contains(word))\\n            {\\n                c++;\\n            }\\n            if(c>=2)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"report-spam-message","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1398042394,"question_id":3541,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1726974698,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1398042394/","is_pending":"Not Pending","title":"Report Spam Message","memory":"86.2 MB","code":"class Solution\\n {\\n    public boolean reportSpam(String[] message, String[] bannedWords)\\n     {\\n        int c=0;\\n        Set<String> ss=new HashSet<>(Arrays.asList(bannedWords));\\n        for(String word:message)\\n        {\\n            if(ss.contains(word))\\n            {\\n                c++;\\n            }\\n            if(c>=2)\\n            {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"report-spam-message","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1397992786,"question_id":3541,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1726973081,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1397992786/","is_pending":"Not Pending","title":"Report Spam Message","memory":"N/A","code":"class Solution\\n {\\n    public boolean reportSpam(String[] message, String[] bannedWords)\\n     {\\n        int c=0;\\n        for(int i=0;i<message.length;i++)\\n        {\\n            for(int j=0;j<bannedWords.length;j++)\\n            {\\n            if(message[i].equals(bannedWords[j]))\\n            {\\n                c++;\\n            }\\n            }\\n        }\\n        if(c>=2)\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n}","compare_resulttitle_slug":"report-spam-message","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1397179152,"question_id":1476,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1726903861,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1397179152/","is_pending":"Not Pending","title":"Count Negative Numbers in a Sorted Matrix","memory":"45 MB","code":"class Solution \\n{\\n    public int countNegatives(int[][] grid) \\n    {\\n        int n=grid.length;\\n        int m=grid[0].length;\\n        int c=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<m;j++)\\n            {\\n                if(grid[i][j]<0)\\n                {\\n                    c++;\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"count-negative-numbers-in-a-sorted-matrix","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1390540557,"question_id":3581,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1726369553,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1390540557/","is_pending":"Not Pending","title":"The Two Sneaky Numbers of Digitville","memory":"44.6 MB","code":"class Solution {\\n    public int[] getSneakyNumbers(int[] nums) \\n    {\\n        ArrayList<Integer> al=new ArrayList<>();\\n        int arr[]=new int[2];\\n       int ind=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(al.contains(nums[i]))\\n            {\\n                arr[ind]=nums[i];\\n                ind++;\\n            }\\n            else\\n            {\\n                al.add(nums[i]);\\n            }\\n        }\\n        return arr;\\n    }\\n}","compare_resulttitle_slug":"the-two-sneaky-numbers-of-digitville","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1389948810,"question_id":3582,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1726326251,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1389948810/","is_pending":"Not Pending","title":"Find Indices of Stable Mountains","memory":"44.9 MB","code":"class Solution {\\n    public List<Integer> stableMountains(int[] height, int threshold)\\n     {\\n        int n=height.length;\\n         ArrayList<Integer> al=new ArrayList<>();\\n        int ind=0;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(height[i-1]>threshold)\\n            {\\n            al.add(i);\\n            }\\n        }\\n     return al;\\n\\n    }\\n}","compare_resulttitle_slug":"find-indices-of-stable-mountains","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1387987636,"question_id":242,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1726164251,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1387987636/","is_pending":"Not Pending","title":"Valid Anagram","memory":"44.8 MB","code":"class Solution {\\n    public boolean isAnagram(String s, String t)\\n     {\\n        int l1=s.length();\\n        int l2=t.length();\\n        if(l1!=l2)\\n        {\\n            return false;\\n        }\\n        else\\n        {\\n            char c1[]=s.toCharArray();\\n            char c2[]=t.toCharArray();\\n            Arrays.sort(c1);\\n            Arrays.sort(c2);\\n            String a=new String(c1);\\n            String b=new String(c2);\\n            if(a.equals(b))\\n            {\\n                return true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1386343991,"question_id":26,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1726044147,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1386343991/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"44.7 MB","code":"class Solution {\\n    public int removeDuplicates(int[] nums)\\n    {\\n      int n=nums.length;\\n      int j=1,i=0;\\n      while(j<nums.length)\\n      {\\n        if(nums[i]==nums[j])\\n        {\\n            j++;\\n        }\\n        else\\n        {\\n            i++;\\n            nums[i]=nums[j];\\n        }\\n      }\\n      return i+1;  \\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1385374490,"question_id":169,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725973191,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1385374490/","is_pending":"Not Pending","title":"Majority Element","memory":"53.1 MB","code":"class Solution {\\n    public int majorityElement(int[] nums)\\n     {\\n        int n=nums.length;\\n        Arrays.sort(nums);\\n        return nums[nums.length/2];\\n}\\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1385373616,"question_id":169,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725973129,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1385373616/","is_pending":"Not Pending","title":"Majority Element","memory":"53.1 MB","code":"class Solution {\\n    public int majorityElement(int[] nums)\\n     {\\n        int n=nums.length;\\n        Arrays.sort(nums);\\n        return nums[nums.length/2];\\n}\\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1385348921,"question_id":74,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725971349,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1385348921/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"41.8 MB","code":"class Solution {\\n    public boolean searchMatrix(int[][] matrix, int target)\\n     {\\n        int n=matrix.length;\\n        int m=matrix[0].length;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<m;j++)\\n            {\\n                if(matrix[i][j]==target)\\n                {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1385345692,"question_id":33,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725971113,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1385345692/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"41.5 MB","code":"class Solution\\n {\\n    public int search(int[] nums, int target) \\n    {\\n        int n=nums.length;\\n        int in=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                in=i;\\n                return in;\\n            }\\n        }\\n        return -1;\\n        \\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1385327049,"question_id":162,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725969633,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1385327049/","is_pending":"Not Pending","title":"Find Peak Element","memory":"42.1 MB","code":"class Solution {\\n    public int findPeakElement(int[] nums)\\n     {\\n        int n=nums.length;\\n        int max=nums[0];\\n        int m1=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]>max)\\n            {\\n                max=nums[i];\\n                m1=i;\\n            }\\n        }\\n        return m1;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-peak-element","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1385325107,"question_id":162,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725969474,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1385325107/","is_pending":"Not Pending","title":"Find Peak Element","memory":"N/A","code":"class Solution {\\n    public int findPeakElement(int[] nums)\\n     {\\n        int n=nums.length;\\n        int max=nums[0];\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]>max)\\n            {\\n                max=i;\\n            }\\n        }\\n        return max;\\n    }\\n}","compare_result":"1100010110001110011011100111000000111110101111111000000000000000011","title_slug":"find-peak-element","has_notes":false,"flag_type":1,"frontend_id":31}],"has_next":true,"last_key":""}'
2025-08-25 23:33:46,703 [INFO] __main__.py:208 - Skipping shuffle-string 2024-09-25 13.51.06 in java because a more recent submission has already been exported
2025-08-25 23:33:47,072 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:47,074 [INFO] __main__.py:245 - Writing check-if-two-string-arrays-are-equivalent/2024-09-25 13.37.49 - Accepted - runtime 1ms - memory 40.9MB.java
2025-08-25 23:33:47,434 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:47,434 [INFO] __main__.py:245 - Writing maximum-number-of-words-found-in-sentences/2024-09-25 13.29.01 - Accepted - runtime 2ms - memory 43.4MB.java
2025-08-25 23:33:47,932 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:47,934 [INFO] __main__.py:245 - Writing row-with-maximum-ones/2024-09-25 13.13.50 - Accepted - runtime 4ms - memory 46.8MB.java
2025-08-25 23:33:48,300 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:48,304 [INFO] __main__.py:245 - Writing to-lower-case/2024-09-22 23.01.57 - Accepted - runtime 1ms - memory 41.1MB.java
2025-08-25 23:33:48,306 [INFO] __main__.py:208 - Skipping check-if-two-string-arrays-are-equivalent 2024-09-22 22.57.57 in java because a more recent submission has already been exported
2025-08-25 23:33:48,633 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:48,644 [INFO] __main__.py:245 - Writing report-spam-message/2024-09-22 08.42.03 - Accepted - runtime 51ms - memory 85.3MB.java
2025-08-25 23:33:48,647 [INFO] __main__.py:208 - Skipping report-spam-message 2024-09-22 08.41.38 in java because a more recent submission has already been exported
2025-08-25 23:33:48,647 [INFO] __main__.py:188 - Skipping report-spam-message 2024-09-22 08.14.41 because its status is 'Wrong Answer'
2025-08-25 23:33:49,045 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:49,049 [INFO] __main__.py:245 - Writing count-negative-numbers-in-a-sorted-matrix/2024-09-21 13.01.01 - Accepted - runtime 1ms - memory 45MB.java
2025-08-25 23:33:49,402 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:49,407 [INFO] __main__.py:245 - Writing the-two-sneaky-numbers-of-digitville/2024-09-15 08.35.53 - Accepted - runtime 3ms - memory 44.6MB.java
2025-08-25 23:33:49,865 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:49,869 [INFO] __main__.py:245 - Writing find-indices-of-stable-mountains/2024-09-14 20.34.11 - Accepted - runtime 1ms - memory 44.9MB.java
2025-08-25 23:33:49,875 [INFO] __main__.py:208 - Skipping valid-anagram 2024-09-12 23.34.11 in java because a more recent submission has already been exported
2025-08-25 23:33:49,875 [INFO] __main__.py:208 - Skipping remove-duplicates-from-sorted-array 2024-09-11 14.12.27 in java because a more recent submission has already been exported
2025-08-25 23:33:49,875 [INFO] __main__.py:208 - Skipping majority-element 2024-09-10 18.29.51 in java because a more recent submission has already been exported
2025-08-25 23:33:49,875 [INFO] __main__.py:208 - Skipping majority-element 2024-09-10 18.28.49 in java because a more recent submission has already been exported
2025-08-25 23:33:50,265 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:50,269 [INFO] __main__.py:245 - Writing search-a-2d-matrix/2024-09-10 17.59.09 - Accepted - runtime 0ms - memory 41.8MB.java
2025-08-25 23:33:50,633 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:50,642 [INFO] __main__.py:245 - Writing search-in-rotated-sorted-array/2024-09-10 17.55.13 - Accepted - runtime 0ms - memory 41.5MB.java
2025-08-25 23:33:51,052 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:51,056 [INFO] __main__.py:245 - Writing find-peak-element/2024-09-10 17.30.33 - Accepted - runtime 0ms - memory 42.1MB.java
2025-08-25 23:33:51,058 [INFO] __main__.py:188 - Skipping find-peak-element 2024-09-10 17.27.54 because its status is 'Wrong Answer'
2025-08-25 23:33:56,059 [DEBUG] leetcode.py:150 - Exporting submissions from 620 to 640
2025-08-25 23:33:56,731 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=620&limit=20 HTTP/11" 200 None
2025-08-25 23:33:56,731 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1385218690,"question_id":153,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725961160,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1385218690/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array","memory":"41.8 MB","code":"class Solution {\\n    public int findMin(int[] nums) \\n    {\\n        Arrays.sort(nums);\\n        return nums[0];\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1385209161,"question_id":73,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725960401,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1385209161/","is_pending":"Not Pending","title":"Set Matrix Zeroes","memory":"45.5 MB","code":"class Solution {\\n    public void setZeroes(int[][] matrix) \\n    {\\n\\nint m = matrix.length;\\nint n = matrix[0].length;\\nint[] row = new int[m];\\nint[] col = new int[n];\\nfor(int i=0; i<m; i++){\\nfor(int j=0; j<n; j++){\\nif(matrix[i][j] == 0){\\nrow[i]=1;\\ncol[j]=1;\\n}\\n}\\n}\\nfor(int i=0; i<m; i++){\\nfor(int j=0; j<n; j++){\\nif(row[i]==1 || col[j]==1){\\nmatrix[i][j]=0;\\n}\\n}\\n}\\n}\\n    \\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"set-matrix-zeroes","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1384613951,"question_id":2585,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725907695,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1384613951/","is_pending":"Not Pending","title":"Delete Greatest Value in Each Row","memory":"43.9 MB","code":"class Solution {\\n    public int deleteGreatestValue(int[][] grid) \\n    {\\n        int n=grid.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            Arrays.sort(grid[i]);\\n        }\\n        for(int i=grid[0].length-1;i>=0;i--)\\n        {\\n            int max=0;\\n            for(int j=0;j<n;j++)\\n            {\\n                max=Math.max(max,grid[j][i]);\\n            }\\n            sum+=max;\\n        }\\n        return sum;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"delete-greatest-value-in-each-row","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1384067440,"question_id":1677,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725872669,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1384067440/","is_pending":"Not Pending","title":"Matrix Diagonal Sum","memory":"44.9 MB","code":"class Solution {\\n    public int diagonalSum(int[][] mat) \\n    {\\n        int n=mat.length;\\n        int s1=0,s2=0;\\n        for(int i=0;i<mat.length;i++)\\n        {\\n            s1+=mat[i][i];\\n            if(i!=n-i-1)\\n            {\\n           s2+=mat[i][n-i-1];\\n            }\\n        }\\n        return s1+s2;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"matrix-diagonal-sum","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1383572803,"question_id":1791,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1725823767,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1383572803/","is_pending":"Not Pending","title":"Richest Customer Wealth","memory":"42.2 MB","code":"class Solution {\\n    public int maximumWealth(int[][] accounts)\\n     {\\n        int res=Integer.MIN_VALUE;\\n        for(int i=0;i<accounts.length;i++)\\n        {\\n            int s=0;\\n            for(int j=0;j<accounts[i].length;j++)\\n            {\\n                s+=accounts[i][j];\\n            }\\n            if(s>res)\\n            {\\n                res=s;\\n            }\\n        }\\n        return res;\\n    }\\n}","compare_result":"1111111111111111111111111111111111","title_slug":"richest-customer-wealth","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1382667737,"question_id":3567,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1725763597,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1382667737/","is_pending":"Not Pending","title":"Convert Date to Binary","memory":"42.9 MB","code":"class Solution {\\n    public String convertDateToBinary(String date) \\n    {\\n      String parts[]=date.split(\\"-\\");\\n      int yr=Integer.parseInt(parts[0]);\\n      int mn=Integer.parseInt(parts[1]);\\n      int day=Integer.parseInt(parts[2]);\\n      String yb=Integer.toBinaryString(yr);\\n      String mb=Integer.toBinaryString(mn);\\n      String db=Integer.toBinaryString(day);\\n      return yb+\\"-\\"+mb+\\"-\\"+db;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"convert-date-to-binary","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1381798322,"question_id":34,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1725692245,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1381798322/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"45.9 MB","code":"class Solution {\\n    public int[] searchRange(int[] nums, int target)\\n     {\\n        int n=nums.length;\\n        int f=-1;\\n        int l=-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==target)\\n            {\\n                if(f==-1)\\n                {\\n                    f=i;\\n                }\\n                l=i;\\n            }\\n        }\\n            return new int[] {f,l};\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1381782523,"question_id":485,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1725691107,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1381782523/","is_pending":"Not Pending","title":"Max Consecutive Ones","memory":"50.4 MB","code":"class Solution {\\n    public int findMaxConsecutiveOnes(int[] nums)\\n     {\\n        int n=nums.length;\\n        int c=0,mc=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                c=0;\\n            }\\n            else\\n            {\\n                c++;\\n                if(mc<c)\\n                {\\n                    mc=c;\\n                }\\n            }\\n        }\\n        return mc;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"max-consecutive-ones","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1381771942,"question_id":35,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1725690351,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1381771942/","is_pending":"Not Pending","title":"Search Insert Position","memory":"42.2 MB","code":"class Solution\\n {\\n    public int searchInsert(int[] nums, int target)\\n     {\\n       int low=0;\\n       int high=nums.length-1;\\n       while(low<=high)\\n       {\\n        int mid=(low+high)/2;\\n        if(nums[mid]==target)\\n        {\\n            return mid;\\n        }\\n        else\\n        {\\n            if(nums[mid]<target)\\n            {\\n                low=mid+1;\\n            }\\n            else\\n            {\\n                high=mid-1;\\n            }\\n        }\\n       }\\n       return low;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1380931634,"question_id":3553,"lang":"java","lang_name":"Java","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1725616596,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1380931634/","is_pending":"Not Pending","title":"Check if Two Chessboard Squares Have the Same Color","memory":"41.9 MB","code":"class Solution {\\n    public boolean checkTwoChessboards(String coordinate1, String coordinate2) \\n    {\\n        int board[][]=new int[8][8];\\n        int rs=0;\\n        for(int i=0;i<8;i++)\\n        {\\n            for(int j=0;j<8;j++)\\n            {\\n                board[i][j]=rs;\\n                rs=1-rs;\\n            }\\n            rs=1-rs;\\n        }\\n        int r1=(int)(coordinate1.charAt(1)-\'0\'-1);\\n        int c1=(int)(coordinate1.charAt(0)-\'a\');\\n        int r2=(int)(coordinate2.charAt(1)-\'0\'-1);\\n        int c2=(int)(coordinate2.charAt(0)-\'a\');\\n        return board[r1][c1]==board[r2][c2];  \\n          }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-if-two-chessboard-squares-have-the-same-color","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1290129059,"question_id":982,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718541992,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1290129059/","is_pending":"Not Pending","title":"Minimum Increment to Make Array Unique","memory":"60.3 MB","code":"class Solution {\\n    public int minIncrementForUnique(int[] nums)\\n    {\\n      Arrays.sort(nums);\\n      int r=0;\\n      for(int i=1;i<nums.length;i++)\\n      {\\n        int previous=nums[i-1];\\n        int current=nums[i];\\n        if(previous>=current)\\n        {\\n            r=r+(previous-current)+1;\\n            nums[i]=previous+1;\\n        }\\n      } \\n       return r; \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-increment-to-make-array-unique","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1290127947,"question_id":982,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718541898,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1290127947/","is_pending":"Not Pending","title":"Minimum Increment to Make Array Unique","memory":"59.8 MB","code":"class Solution {\\n    public int minIncrementForUnique(int[] nums)\\n    {\\n      Arrays.sort(nums);\\n      int r=0;\\n      for(int i=1;i<nums.length;i++)\\n      {\\n        int previous=nums[i-1];\\n        int current=nums[i];\\n        if(previous>=current)\\n        {\\n            r=r+(previous-current)+1;\\n            nums[i]=previous+1;\\n        }\\n      } \\n       return r; \\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-increment-to-make-array-unique","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1287277687,"question_id":2231,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718298294,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1287277687/","is_pending":"Not Pending","title":"Find First Palindromic String in the Array","memory":"44.8 MB","code":"class Solution {\\n    public String firstPalindrome(String[] words) \\n    {\\n        for(int i=0;i<words.length;i++)\\n        {\\n        StringBuilder sb=new StringBuilder(words[i]);\\n        if(sb.reverse().toString().equals(words[i]))\\n        {\\n            return words[i];\\n        }\\n        }\\n        return \\"\\";\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-palindromic-string-in-the-array","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1287103804,"question_id":2148,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718286946,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1287103804/","is_pending":"Not Pending","title":"Minimum Number of Moves to Seat Everyone","memory":"44.4 MB","code":"class Solution {\\n    public int minMovesToSeat(int[] seats, int[] students)\\n    {\\n     Arrays.sort(seats);\\n     Arrays.sort(students);\\n     int count=0;\\n     for(int i=0;i<seats.length;i++)\\n     {\\n        count=count+Math.abs(students[i]-seats[i]);\\n     }\\n     return count;\\n\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-moves-to-seat-everyone","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1286384534,"question_id":1603,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718223991,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1286384534/","is_pending":"Not Pending","title":"Running Sum of 1d Array","memory":"42.4 MB","code":"class Solution {\\n    public int[] runningSum(int[] nums)\\n    {\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            sum=sum+nums[i];\\n            nums[i]=sum;\\n        }\\n        return nums;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"running-sum-of-1d-array","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1286374524,"question_id":27,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718223046,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1286374524/","is_pending":"Not Pending","title":"Remove Element","memory":"42 MB","code":"class Solution {\\n    public int removeElement(int[] nums, int val)\\n    {\\n        int count=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            if(nums[i]!=val)\\n            {\\n                nums[count]=nums[i];\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1286369568,"question_id":20,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718222591,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1286369568/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"41.4 MB","code":"class Solution\\n {\\n    public boolean isValid(String s)\\n    {\\n      Stack<Character> st=new Stack<>();\\n      for(char ch:s.toCharArray())\\n      {\\n        if(ch==\'(\' || ch==\'[\' || ch==\'{\')\\n        {\\n            st.push(ch);\\n        }\\n        else if(ch==\')\' && !st.isEmpty() && st.peek()==\'(\')\\n        {\\n            st.pop();\\n        }\\n        else if(ch==\']\' && !st.isEmpty() && st.peek()==\'[\')\\n        {\\n            st.pop();\\n        }\\n        else if(ch==\'}\' && !st.isEmpty() && st.peek()==\'{\')\\n        {\\n            st.pop();\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n      }\\n      return st.isEmpty();\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1286048607,"question_id":75,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718201079,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1286048607/","is_pending":"Not Pending","title":"Sort Colors","memory":"41.6 MB","code":"class Solution \\n{\\n    public void sortColors(int[] nums)\\n    {\\n        int m=0;\\n        int l=0;\\n        int h=nums.length-1;\\n        while(m<=h)\\n        {\\n            if(nums[m]==0)\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[l];\\n                nums[l]=temp;\\n                l++;\\n                m++;\\n            }\\n            else if(nums[m]==1)\\n            {\\n                m++;\\n            }\\n            else\\n            {\\n                int temp=nums[m];\\n                nums[m]=nums[h];\\n                nums[h]=temp;\\n                h--;\\n            }\\n        }\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-colors","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1285139798,"question_id":121,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718126525,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1285139798/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"61.6 MB","code":"class Solution\\n {\\n    public int maxProfit(int[] prices)\\n    {\\n      int min=10000;\\n      int p=0;\\n      for(int i=0;i<prices.length;i++)\\n      {\\n        min=Math.min(min,prices[i]);\\n        p=Math.max(p,prices[i]-min);\\n      }\\n      return p;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1285136106,"question_id":26,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718126306,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1285136106/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"44.4 MB","code":"class Solution {\\n    public int removeDuplicates(int[] nums)\\n    {\\n        int i=0,j=1;\\n        while(j<nums.length)\\n        {\\n            if(nums[i]==nums[j])\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                i++;\\n                nums[i]=nums[j];\\n            }\\n        }\\n        return i+1;\\n    }\\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":11}],"has_next":true,"last_key":""}'
2025-08-25 23:33:57,071 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:57,071 [INFO] __main__.py:245 - Writing find-minimum-in-rotated-sorted-array/2024-09-10 15.09.20 - Accepted - runtime 2ms - memory 41.8MB.java
2025-08-25 23:33:57,084 [INFO] __main__.py:208 - Skipping set-matrix-zeroes 2024-09-10 14.56.41 in java because a more recent submission has already been exported
2025-08-25 23:33:57,420 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:57,422 [INFO] __main__.py:245 - Writing delete-greatest-value-in-each-row/2024-09-10 00.18.15 - Accepted - runtime 4ms - memory 43.9MB.java
2025-08-25 23:33:57,867 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:57,869 [INFO] __main__.py:245 - Writing matrix-diagonal-sum/2024-09-09 14.34.29 - Accepted - runtime 0ms - memory 44.9MB.java
2025-08-25 23:33:58,559 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:58,570 [INFO] __main__.py:245 - Writing richest-customer-wealth/2024-09-09 00.59.27 - Accepted - runtime 0ms - memory 42.2MB.java
2025-08-25 23:33:59,382 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:59,384 [INFO] __main__.py:245 - Writing convert-date-to-binary/2024-09-08 08.16.37 - Accepted - runtime 8ms - memory 42.9MB.java
2025-08-25 23:33:59,860 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:33:59,867 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2024-09-07 12.27.25 - Accepted - runtime 1ms - memory 45.9MB.java
2025-08-25 23:34:00,194 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:00,196 [INFO] __main__.py:245 - Writing max-consecutive-ones/2024-09-07 12.08.27 - Accepted - runtime 2ms - memory 50.4MB.java
2025-08-25 23:34:00,523 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:00,541 [INFO] __main__.py:245 - Writing search-insert-position/2024-09-07 11.55.51 - Accepted - runtime 0ms - memory 42.2MB.java
2025-08-25 23:34:00,926 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:00,928 [INFO] __main__.py:245 - Writing check-if-two-chessboard-squares-have-the-same-color/2024-09-06 15.26.36 - Accepted - runtime 1ms - memory 41.9MB.java
2025-08-25 23:34:01,274 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:01,278 [INFO] __main__.py:245 - Writing minimum-increment-to-make-array-unique/2024-06-16 18.16.32 - Accepted - runtime 37ms - memory 60.3MB.java
2025-08-25 23:34:01,278 [INFO] __main__.py:208 - Skipping minimum-increment-to-make-array-unique 2024-06-16 18.14.58 in java because a more recent submission has already been exported
2025-08-25 23:34:01,642 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:01,646 [INFO] __main__.py:245 - Writing find-first-palindromic-string-in-the-array/2024-06-13 22.34.54 - Accepted - runtime 4ms - memory 44.8MB.java
2025-08-25 23:34:02,001 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:02,001 [INFO] __main__.py:245 - Writing minimum-number-of-moves-to-seat-everyone/2024-06-13 19.25.46 - Accepted - runtime 3ms - memory 44.4MB.java
2025-08-25 23:34:02,456 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:02,458 [INFO] __main__.py:245 - Writing running-sum-of-1d-array/2024-06-13 01.56.31 - Accepted - runtime 0ms - memory 42.4MB.java
2025-08-25 23:34:02,778 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:02,782 [INFO] __main__.py:245 - Writing remove-element/2024-06-13 01.40.46 - Accepted - runtime 0ms - memory 42MB.java
2025-08-25 23:34:03,183 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:03,194 [INFO] __main__.py:245 - Writing valid-parentheses/2024-06-13 01.33.11 - Accepted - runtime 1ms - memory 41.4MB.java
2025-08-25 23:34:03,196 [INFO] __main__.py:208 - Skipping sort-colors 2024-06-12 19.34.39 in java because a more recent submission has already been exported
2025-08-25 23:34:03,517 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:03,521 [INFO] __main__.py:245 - Writing best-time-to-buy-and-sell-stock/2024-06-11 22.52.05 - Accepted - runtime 1ms - memory 61.6MB.java
2025-08-25 23:34:03,523 [INFO] __main__.py:208 - Skipping remove-duplicates-from-sorted-array 2024-06-11 22.48.26 in java because a more recent submission has already been exported
2025-08-25 23:34:08,524 [DEBUG] leetcode.py:150 - Exporting submissions from 640 to 660
2025-08-25 23:34:09,013 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "GET /api/submissions/?offset=640&limit=20 HTTP/11" 200 None
2025-08-25 23:34:09,013 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1284970382,"question_id":1,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718115658,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1284970382/","is_pending":"Not Pending","title":"Two Sum","memory":"44.8 MB","code":"class Solution {\\n    public int[] twoSum(int[] nums, int target)\\n     {\\n        int indexes[]=new int[2];\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            for(int j=i+1;j<nums.length;j++)\\n            {\\n                if(nums[i]+nums[j]==target)\\n                {\\n                    indexes[0]=i;\\n                    indexes[1]=j;\\n                }\\n            }\\n        }\\n        return indexes;\\n    }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1284962295,"question_id":1217,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718115116,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1284962295/","is_pending":"Not Pending","title":"Relative Sort Array","memory":"42 MB","code":"class Solution\\n {\\n    public int[] relativeSortArray(int[] arr1, int[] arr2)\\n    {\\n       int output[]=new int[arr1.length];\\n       int temp=0;\\n       for(int i=0;i<arr2.length;i++)\\n       {\\n         int m=arr2[i];\\n         for(int j=0;j<arr1.length;j++)\\n         {\\n            if(m==arr1[j])\\n            {\\n                output[temp++]=m;\\n            }\\n         }\\n       }\\n       int k=0;\\n       ArrayList<Integer> a=new ArrayList<Integer>();\\n       for(int i=0;i<arr1.length;i++)\\n       {\\n        int m=arr1[i];\\n        for(int j=0;j<arr2.length;j++)\\n        {\\n            if(m==arr2[j])\\n            {\\n                k=1;\\n                break;\\n            }\\n        }\\n        if(k==0)\\n        {\\n            a.add(m);\\n        }\\n        k=0;\\n       } \\n       Collections.sort(a);\\n       for(int i=0;i<a.size();i++)\\n       {\\n         output[temp++]=a.get(i);\\n       }\\n       return output;\\n    }\\n}","compare_result":"11111111111111111","title_slug":"relative-sort-array","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1284069747,"question_id":1137,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1718040332,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1284069747/","is_pending":"Not Pending","title":"Height Checker","memory":"41.3 MB","code":"class Solution\\n {\\n    public int heightChecker(int[] heights)\\n     {\\n        int count=0;\\n        int [] expected=Arrays.copyOf(heights,heights.length);\\n        Arrays.sort(expected);\\n        for(int i=0;i<heights.length;i++)\\n        {\\n            if(heights[i]!=expected[i])\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n     }\\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"height-checker","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1228697034,"question_id":987,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 4\xc2\xa0months","timestamp":1712767766,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1228697034/","is_pending":"Not Pending","title":"Reveal Cards In Increasing Order","memory":"43.7 MB","code":"class Solution {\\n  public int[] deckRevealedIncreasing(int[] d) \\n  {\\n     int n = d.length;\\n\\n    Arrays.sort(d);\\n\\n    Deque<Integer> dq = new ArrayDeque<>();\\n    dq.addFirst(d[n-1]);\\n\\n    for (int i = n - 2; i >= 0; --i) \\n    {\\n      dq.addFirst(dq.getLast());\\n      dq.pollLast();\\n      dq.addFirst(d[i]);\\n    }\\n\\n    for (int i = 0; i < n; ++i)\\n    {\\n      d[i] = dq.pollFirst();\\n    }\\n\\n    return d;\\n  }\\n}","compare_result":"111111111111111111111111111111111","title_slug":"reveal-cards-in-increasing-order","has_notes":false,"flag_type":1,"frontend_id":7},{"id":1227853971,"question_id":2195,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 4\xc2\xa0months","timestamp":1712683075,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1227853971/","is_pending":"Not Pending","title":"Time Needed to Buy Tickets","memory":"41.3 MB","code":" class Solution \\n {\\n  public int timeRequiredToBuy(int[] tickets, int k)\\n   {\\n    \\n    int t=0;\\n\\n    for (int i = 0; i < tickets.length;i++)\\n      if (i <= k)\\n        t=t+Math.min(tickets[i], tickets[k]);\\n      else\\n        t=t+Math.min(tickets[i], tickets[k] - 1);\\n    return t;\\n  }\\n}\\n    ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"time-needed-to-buy-tickets","has_notes":false,"flag_type":1,"frontend_id":6},{"id":1226569676,"question_id":1802,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 4\xc2\xa0months","timestamp":1712569283,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1226569676/","is_pending":"Not Pending","title":"Number of Students Unable to Eat Lunch","memory":"40.9 MB","code":"class Solution {\\n    public int countStudents(int[] students, int[] sandwiches) \\n    {\\n    int[] count = new int[2];\\n    for(final int student:students)\\n      ++count[student];\\n    for(int i=0;i<sandwiches.length;++i) \\n    {\\n      if(count[sandwiches[i]]==0)\\n        return sandwiches.length-i;\\n      --count[sandwiches[i]];\\n    }\\n   return 0;\\n  }\\n}  \\n    ","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"number-of-students-unable-to-eat-lunch","has_notes":false,"flag_type":1,"frontend_id":5},{"id":1226563692,"question_id":7,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 4\xc2\xa0months","timestamp":1712568721,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1226563692/","is_pending":"Not Pending","title":"Reverse Integer","memory":"40.4 MB","code":"class Solution {\\n    public int reverse(int x)\\n     {\\n        long rev=0;\\n        while(x!=0)\\n        {\\n            rev=rev*10+x%10;\\n            x=x/10;\\n        }\\n        return(rev<Integer.MIN_VALUE || rev>Integer.MAX_VALUE) ? 0:(int)rev;\\n    }\\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":4},{"id":1226546277,"question_id":9,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 4\xc2\xa0months","timestamp":1712567082,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1226546277/","is_pending":"Not Pending","title":"Palindrome Number","memory":"43.8 MB","code":"class Solution\\n {\\n    public boolean isPalindrome(int x) \\n    {\\n        int rev=0,rem=0,pal=x;\\n        if(x<0)\\n        return false;\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            x=x/10;\\n        }\\n        if(rev==pal)\\n        return true;\\n        else\\n        return false;\\n    }\\n}","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":3},{"id":1200683455,"question_id":9,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 5\xc2\xa0months","timestamp":1710173199,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1200683455/","is_pending":"Not Pending","title":"Palindrome Number","memory":"43.5 MB","code":"class Solution\\n {\\n    public boolean isPalindrome(int x)\\n {\\n        int r=0,rem=0,k=x;\\n        if(x<0)\\n        return false;\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            r=r*10+rem;\\n            x=x/10;\\n        }\\n        if(r==k)\\n        return true;\\n        else\\n        return false;\\n    }\\n}","compare_result":"","title_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":2},{"id":1200682291,"question_id":9,"lang":"java","lang_name":"Java","time":"1\xc2\xa0year, 5\xc2\xa0months","timestamp":1710173125,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1200682291/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution\\n {\\n    public boolean isPalindrome(int x)\\n {\\n        int r=0,rem=0,k=x;\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            r=r*10+rem;\\n            x=x/10;\\n        }\\n        if(r==k)\\n        return true;\\n        else\\n        return false;\\n    }\\n}","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-08-25 23:34:09,014 [INFO] __main__.py:208 - Skipping two-sum 2024-06-11 19.50.58 in java because a more recent submission has already been exported
2025-08-25 23:34:09,328 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:09,332 [INFO] __main__.py:245 - Writing relative-sort-array/2024-06-11 19.41.56 - Accepted - runtime 3ms - memory 42MB.java
2025-08-25 23:34:09,745 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:09,747 [INFO] __main__.py:245 - Writing height-checker/2024-06-10 22.55.32 - Accepted - runtime 2ms - memory 41.3MB.java
2025-08-25 23:34:10,094 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:10,096 [INFO] __main__.py:245 - Writing reveal-cards-in-increasing-order/2024-04-10 22.19.26 - Accepted - runtime 4ms - memory 43.7MB.java
2025-08-25 23:34:10,570 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:10,574 [INFO] __main__.py:245 - Writing time-needed-to-buy-tickets/2024-04-09 22.47.55 - Accepted - runtime 0ms - memory 41.3MB.java
2025-08-25 23:34:11,319 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:11,323 [INFO] __main__.py:245 - Writing number-of-students-unable-to-eat-lunch/2024-04-08 15.11.23 - Accepted - runtime 0ms - memory 40.9MB.java
2025-08-25 23:34:11,687 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:11,689 [INFO] __main__.py:245 - Writing reverse-integer/2024-04-08 15.02.01 - Accepted - runtime 1ms - memory 40.4MB.java
2025-08-25 23:34:12,001 [DEBUG] connectionpool.py:546 - https://leetcode.com:443 "POST /graphql HTTP/11" 200 None
2025-08-25 23:34:12,017 [INFO] __main__.py:245 - Writing palindrome-number/2024-04-08 14.34.42 - Accepted - runtime 4ms - memory 43.8MB.java
2025-08-25 23:34:12,019 [INFO] __main__.py:208 - Skipping palindrome-number 2024-03-11 21.36.39 in java because a more recent submission has already been exported
2025-08-25 23:34:12,019 [INFO] __main__.py:188 - Skipping palindrome-number 2024-03-11 21.35.25 because its status is 'Wrong Answer'
